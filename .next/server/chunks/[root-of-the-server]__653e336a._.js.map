{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  uuid,\n  decimal,\n  integer,\n  boolean,\n  jsonb,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  location: text(\"location\"),\n  country: text(\"country\"),\n  cropType: text(\"crop_type\"),\n  farmSize: text(\"farm_size\"),\n  experience: text(\"experience\"),\n  additionalInfo: text(\"additional_info\"),\n  // Settings fields\n  notifications: boolean(\"notifications\").default(true),\n  darkMode: boolean(\"dark_mode\").default(false),\n  language: text(\"language\").default(\"en\"),\n  currency: text(\"currency\").default(\"USD\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Farm data entries\nexport const farmData = pgTable(\"farm_data\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  cropType: text(\"crop_type\").notNull(),\n  location: text(\"location\").notNull(),\n  soilMoisture: decimal(\"soil_moisture\", { precision: 5, scale: 2 }).notNull(),\n  weatherNotes: text(\"weather_notes\"),\n  photo: text(\"photo\"), // Base64 encoded image data\n  photoMimeType: text(\"photo_mime_type\"), // MIME type of the image\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  temperature: decimal(\"temperature\", { precision: 5, scale: 2 }),\n  humidity: decimal(\"humidity\", { precision: 5, scale: 2 }),\n  rainfall: decimal(\"rainfall\", { precision: 5, scale: 2 }),\n  // AI Analysis fields\n  aiAnalysis: text(\"ai_analysis\"), // JSON string of AI analysis results\n  aiConfidence: decimal(\"ai_confidence\", { precision: 3, scale: 2 }), // 0.00 to 1.00\n  aiRecommendations: text(\"ai_recommendations\"), // AI-generated recommendations\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Yield predictions\nexport const yieldPredictions = pgTable(\"yield_predictions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  farmDataId: uuid(\"farm_data_id\").references(() => farmData.id, {\n    onDelete: \"set null\",\n  }),\n  cropType: text(\"crop_type\").notNull(),\n  predictedYield: decimal(\"predicted_yield\", {\n    precision: 8,\n    scale: 2,\n  }).notNull(),\n  riskLevel: decimal(\"risk_level\", { precision: 5, scale: 2 }).notNull(),\n  confidence: decimal(\"confidence\", { precision: 5, scale: 2 }).notNull(),\n  modelVersion: text(\"model_version\"),\n  inputData: jsonb(\"input_data\"), // Store the input data used for prediction\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Loans\nexport const loans = pgTable(\"loans\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  blockchainLoanId: text(\"blockchain_loan_id\"), // Smart contract loan ID\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(),\n  status: text(\"status\", {\n    enum: [\"pending\", \"active\", \"completed\", \"defaulted\"],\n  })\n    .notNull()\n    .default(\"pending\"),\n  collateral: jsonb(\"collateral\").notNull(), // Array of token IDs\n  collateralPredictionId: text(\"collateral_prediction_id\"), // Smart contract prediction ID\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  repaidAmount: decimal(\"repaid_amount\", { precision: 12, scale: 2 }).default(\n    \"0\"\n  ),\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Harvest tokens\nexport const harvestTokens = pgTable(\"harvest_tokens\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  yieldPredictionId: uuid(\"yield_prediction_id\").references(\n    () => yieldPredictions.id,\n    { onDelete: \"set null\" }\n  ),\n  cropType: text(\"crop_type\").notNull(),\n  amount: decimal(\"amount\", { precision: 8, scale: 2 }).notNull(),\n  tokenizedAmount: decimal(\"tokenized_amount\", {\n    precision: 12,\n    scale: 2,\n  }).notNull(),\n  qualityGrade: text(\"quality_grade\"), // A, B, C grade\n  status: text(\"status\", {\n    enum: [\"pending\", \"tokenized\", \"sold\", \"burned\", \"locked\"],\n  })\n    .notNull()\n    .default(\"pending\"),\n  isLocked: boolean(\"is_locked\").default(false), // Locked as loan collateral\n  qrCode: text(\"qr_code\").notNull(),\n  metadataURI: text(\"metadata_uri\"), // NFT metadata URI\n  blockchainTokenId: text(\"blockchain_token_id\"), // Smart contract token ID\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Badges/Achievements\nexport const badges = pgTable(\"badges\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  badgeType: text(\"badge_type\").notNull(), // 'data-contributor', 'yield-predictor', etc.\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  earned: boolean(\"earned\").notNull().default(false),\n  earnedDate: timestamp(\"earned_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Market prices (for price tracking)\nexport const marketPrices = pgTable(\"market_prices\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  cropType: text(\"crop_type\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"GHS\"),\n  source: text(\"source\").notNull(), // 'manual', 'api', 'blockchain'\n  location: text(\"location\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Supply chain tracking\nexport const supplyChainEvents = pgTable(\"supply_chain_events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  tokenId: uuid(\"token_id\")\n    .notNull()\n    .references(() => harvestTokens.id, { onDelete: \"cascade\" }),\n  eventType: text(\"event_type\").notNull(), // 'harvest', 'processing', 'transport', 'delivery'\n  description: text(\"description\").notNull(),\n  location: text(\"location\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  metadata: jsonb(\"metadata\"), // Additional event data\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  farmData: many(farmData),\n  yieldPredictions: many(yieldPredictions),\n  loans: many(loans),\n  harvestTokens: many(harvestTokens),\n  badges: many(badges),\n}));\n\nexport const farmDataRelations = relations(farmData, ({ one }) => ({\n  user: one(users, {\n    fields: [farmData.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const yieldPredictionsRelations = relations(\n  yieldPredictions,\n  ({ one }) => ({\n    user: one(users, {\n      fields: [yieldPredictions.userId],\n      references: [users.id],\n    }),\n    farmData: one(farmData, {\n      fields: [yieldPredictions.farmDataId],\n      references: [farmData.id],\n    }),\n  })\n);\n\nexport const loansRelations = relations(loans, ({ one }) => ({\n  user: one(users, {\n    fields: [loans.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const harvestTokensRelations = relations(\n  harvestTokens,\n  ({ one, many }) => ({\n    user: one(users, {\n      fields: [harvestTokens.userId],\n      references: [users.id],\n    }),\n    yieldPrediction: one(yieldPredictions, {\n      fields: [harvestTokens.yieldPredictionId],\n      references: [yieldPredictions.id],\n    }),\n    supplyChainEvents: many(supplyChainEvents),\n  })\n);\n\nexport const badgesRelations = relations(badges, ({ one }) => ({\n  user: one(users, {\n    fields: [badges.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const supplyChainEventsRelations = relations(\n  supplyChainEvents,\n  ({ one }) => ({\n    token: one(harvestTokens, {\n      fields: [supplyChainEvents.tokenId],\n      references: [harvestTokens.id],\n    }),\n  })\n);\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type FarmData = typeof farmData.$inferSelect;\nexport type NewFarmData = typeof farmData.$inferInsert;\nexport type YieldPrediction = typeof yieldPredictions.$inferSelect;\nexport type NewYieldPrediction = typeof yieldPredictions.$inferInsert;\nexport type Loan = typeof loans.$inferSelect;\nexport type NewLoan = typeof loans.$inferInsert;\nexport type HarvestToken = typeof harvestTokens.$inferSelect;\nexport type NewHarvestToken = typeof harvestTokens.$inferInsert;\nexport type Badge = typeof badges.$inferSelect;\nexport type NewBadge = typeof badges.$inferInsert;\nexport type MarketPrice = typeof marketPrices.$inferSelect;\nexport type NewMarketPrice = typeof marketPrices.$inferInsert;\nexport type SupplyChainEvent = typeof supplyChainEvents.$inferSelect;\nexport type NewSupplyChainEvent = typeof supplyChainEvents.$inferInsert;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;;;AAGO,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IACpC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,eAAe,IAAA,yKAAI,EAAC,kBAAkB,OAAO,GAAG,MAAM;IACtD,MAAM,IAAA,yKAAI,EAAC;IACX,OAAO,IAAA,yKAAI,EAAC;IACZ,OAAO,IAAA,yKAAI,EAAC;IACZ,UAAU,IAAA,yKAAI,EAAC;IACf,SAAS,IAAA,yKAAI,EAAC;IACd,UAAU,IAAA,yKAAI,EAAC;IACf,UAAU,IAAA,yKAAI,EAAC;IACf,YAAY,IAAA,yKAAI,EAAC;IACjB,gBAAgB,IAAA,yKAAI,EAAC;IACrB,kBAAkB;IAClB,eAAe,IAAA,+KAAO,EAAC,iBAAiB,OAAO,CAAC;IAChD,UAAU,IAAA,+KAAO,EAAC,aAAa,OAAO,CAAC;IACvC,UAAU,IAAA,yKAAI,EAAC,YAAY,OAAO,CAAC;IACnC,UAAU,IAAA,yKAAI,EAAC,YAAY,OAAO,CAAC;IACnC,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,WAAW,IAAA,kKAAO,EAAC,aAAa;IAC3C,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACpD,UAAU,IAAA,yKAAI,EAAC,aAAa,OAAO;IACnC,UAAU,IAAA,yKAAI,EAAC,YAAY,OAAO;IAClC,cAAc,IAAA,+KAAO,EAAC,iBAAiB;QAAE,WAAW;QAAG,OAAO;IAAE,GAAG,OAAO;IAC1E,cAAc,IAAA,yKAAI,EAAC;IACnB,OAAO,IAAA,yKAAI,EAAC;IACZ,eAAe,IAAA,yKAAI,EAAC;IACpB,UAAU,IAAA,+KAAO,EAAC,YAAY;QAAE,WAAW;QAAI,OAAO;IAAE;IACxD,WAAW,IAAA,+KAAO,EAAC,aAAa;QAAE,WAAW;QAAI,OAAO;IAAE;IAC1D,aAAa,IAAA,+KAAO,EAAC,eAAe;QAAE,WAAW;QAAG,OAAO;IAAE;IAC7D,UAAU,IAAA,+KAAO,EAAC,YAAY;QAAE,WAAW;QAAG,OAAO;IAAE;IACvD,UAAU,IAAA,+KAAO,EAAC,YAAY;QAAE,WAAW;QAAG,OAAO;IAAE;IACvD,qBAAqB;IACrB,YAAY,IAAA,yKAAI,EAAC;IACjB,cAAc,IAAA,+KAAO,EAAC,iBAAiB;QAAE,WAAW;QAAG,OAAO;IAAE;IAChE,mBAAmB,IAAA,yKAAI,EAAC;IACxB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,mBAAmB,IAAA,kKAAO,EAAC,qBAAqB;IAC3D,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACpD,YAAY,IAAA,yKAAI,EAAC,gBAAgB,UAAU,CAAC,IAAM,SAAS,EAAE,EAAE;QAC7D,UAAU;IACZ;IACA,UAAU,IAAA,yKAAI,EAAC,aAAa,OAAO;IACnC,gBAAgB,IAAA,+KAAO,EAAC,mBAAmB;QACzC,WAAW;QACX,OAAO;IACT,GAAG,OAAO;IACV,WAAW,IAAA,+KAAO,EAAC,cAAc;QAAE,WAAW;QAAG,OAAO;IAAE,GAAG,OAAO;IACpE,YAAY,IAAA,+KAAO,EAAC,cAAc;QAAE,WAAW;QAAG,OAAO;IAAE,GAAG,OAAO;IACrE,cAAc,IAAA,yKAAI,EAAC;IACnB,WAAW,IAAA,2KAAK,EAAC;IACjB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,QAAQ,IAAA,kKAAO,EAAC,SAAS;IACpC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACpD,kBAAkB,IAAA,yKAAI,EAAC;IACvB,QAAQ,IAAA,+KAAO,EAAC,UAAU;QAAE,WAAW;QAAI,OAAO;IAAE,GAAG,OAAO;IAC9D,cAAc,IAAA,+KAAO,EAAC,iBAAiB;QAAE,WAAW;QAAG,OAAO;IAAE,GAAG,OAAO;IAC1E,QAAQ,IAAA,yKAAI,EAAC,UAAU;QACrB,MAAM;YAAC;YAAW;YAAU;YAAa;SAAY;IACvD,GACG,OAAO,GACP,OAAO,CAAC;IACX,YAAY,IAAA,2KAAK,EAAC,cAAc,OAAO;IACvC,wBAAwB,IAAA,yKAAI,EAAC;IAC7B,WAAW,IAAA,mLAAS,EAAC,cAAc,OAAO;IAC1C,SAAS,IAAA,mLAAS,EAAC,YAAY,OAAO;IACtC,cAAc,IAAA,+KAAO,EAAC,iBAAiB;QAAE,WAAW;QAAI,OAAO;IAAE,GAAG,OAAO,CACzE;IAEF,kBAAkB,IAAA,yKAAI,EAAC;IACvB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,gBAAgB,IAAA,kKAAO,EAAC,kBAAkB;IACrD,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACpD,mBAAmB,IAAA,yKAAI,EAAC,uBAAuB,UAAU,CACvD,IAAM,iBAAiB,EAAE,EACzB;QAAE,UAAU;IAAW;IAEzB,UAAU,IAAA,yKAAI,EAAC,aAAa,OAAO;IACnC,QAAQ,IAAA,+KAAO,EAAC,UAAU;QAAE,WAAW;QAAG,OAAO;IAAE,GAAG,OAAO;IAC7D,iBAAiB,IAAA,+KAAO,EAAC,oBAAoB;QAC3C,WAAW;QACX,OAAO;IACT,GAAG,OAAO;IACV,cAAc,IAAA,yKAAI,EAAC;IACnB,QAAQ,IAAA,yKAAI,EAAC,UAAU;QACrB,MAAM;YAAC;YAAW;YAAa;YAAQ;YAAU;SAAS;IAC5D,GACG,OAAO,GACP,OAAO,CAAC;IACX,UAAU,IAAA,+KAAO,EAAC,aAAa,OAAO,CAAC;IACvC,QAAQ,IAAA,yKAAI,EAAC,WAAW,OAAO;IAC/B,aAAa,IAAA,yKAAI,EAAC;IAClB,mBAAmB,IAAA,yKAAI,EAAC;IACxB,kBAAkB,IAAA,yKAAI,EAAC;IACvB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;IACvD,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,SAAS,IAAA,kKAAO,EAAC,UAAU;IACtC,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,QAAQ,IAAA,yKAAI,EAAC,WACV,OAAO,GACP,UAAU,CAAC,IAAM,MAAM,EAAE,EAAE;QAAE,UAAU;IAAU;IACpD,WAAW,IAAA,yKAAI,EAAC,cAAc,OAAO;IACrC,MAAM,IAAA,yKAAI,EAAC,QAAQ,OAAO;IAC1B,aAAa,IAAA,yKAAI,EAAC,eAAe,OAAO;IACxC,QAAQ,IAAA,+KAAO,EAAC,UAAU,OAAO,GAAG,OAAO,CAAC;IAC5C,YAAY,IAAA,mLAAS,EAAC;IACtB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,eAAe,IAAA,kKAAO,EAAC,iBAAiB;IACnD,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,UAAU,IAAA,yKAAI,EAAC,aAAa,OAAO;IACnC,OAAO,IAAA,+KAAO,EAAC,SAAS;QAAE,WAAW;QAAI,OAAO;IAAE,GAAG,OAAO;IAC5D,UAAU,IAAA,yKAAI,EAAC,YAAY,OAAO,GAAG,OAAO,CAAC;IAC7C,QAAQ,IAAA,yKAAI,EAAC,UAAU,OAAO;IAC9B,UAAU,IAAA,yKAAI,EAAC;IACf,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,oBAAoB,IAAA,kKAAO,EAAC,uBAAuB;IAC9D,IAAI,IAAA,yKAAI,EAAC,MAAM,UAAU,GAAG,aAAa;IACzC,SAAS,IAAA,yKAAI,EAAC,YACX,OAAO,GACP,UAAU,CAAC,IAAM,cAAc,EAAE,EAAE;QAAE,UAAU;IAAU;IAC5D,WAAW,IAAA,yKAAI,EAAC,cAAc,OAAO;IACrC,aAAa,IAAA,yKAAI,EAAC,eAAe,OAAO;IACxC,UAAU,IAAA,yKAAI,EAAC;IACf,UAAU,IAAA,+KAAO,EAAC,YAAY;QAAE,WAAW;QAAI,OAAO;IAAE;IACxD,WAAW,IAAA,+KAAO,EAAC,aAAa;QAAE,WAAW;QAAI,OAAO;IAAE;IAC1D,UAAU,IAAA,2KAAK,EAAC;IAChB,kBAAkB,IAAA,yKAAI,EAAC;IACvB,WAAW,IAAA,mLAAS,EAAC,cAAc,UAAU,GAAG,OAAO;AACzD;AAGO,MAAM,iBAAiB,IAAA,0JAAS,EAAC,OAAO,CAAC,EAAE,IAAI,EAAE,GAAK,CAAC;QAC5D,UAAU,KAAK;QACf,kBAAkB,KAAK;QACvB,OAAO,KAAK;QACZ,eAAe,KAAK;QACpB,QAAQ,KAAK;IACf,CAAC;AAEM,MAAM,oBAAoB,IAAA,0JAAS,EAAC,UAAU,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACjE,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,SAAS,MAAM;aAAC;YACzB,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAEM,MAAM,4BAA4B,IAAA,0JAAS,EAChD,kBACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,iBAAiB,MAAM;aAAC;YACjC,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,UAAU,IAAI,UAAU;YACtB,QAAQ;gBAAC,iBAAiB,UAAU;aAAC;YACrC,YAAY;gBAAC,SAAS,EAAE;aAAC;QAC3B;IACF,CAAC;AAGI,MAAM,iBAAiB,IAAA,0JAAS,EAAC,OAAO,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC3D,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,MAAM,MAAM;aAAC;YACtB,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAEM,MAAM,yBAAyB,IAAA,0JAAS,EAC7C,eACA,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,GAAK,CAAC;QAClB,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,cAAc,MAAM;aAAC;YAC9B,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;QACA,iBAAiB,IAAI,kBAAkB;YACrC,QAAQ;gBAAC,cAAc,iBAAiB;aAAC;YACzC,YAAY;gBAAC,iBAAiB,EAAE;aAAC;QACnC;QACA,mBAAmB,KAAK;IAC1B,CAAC;AAGI,MAAM,kBAAkB,IAAA,0JAAS,EAAC,QAAQ,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC7D,MAAM,IAAI,OAAO;YACf,QAAQ;gBAAC,OAAO,MAAM;aAAC;YACvB,YAAY;gBAAC,MAAM,EAAE;aAAC;QACxB;IACF,CAAC;AAEM,MAAM,6BAA6B,IAAA,0JAAS,EACjD,mBACA,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QACZ,OAAO,IAAI,eAAe;YACxB,QAAQ;gBAAC,kBAAkB,OAAO;aAAC;YACnC,YAAY;gBAAC,cAAc,EAAE;aAAC;QAChC;IACF,CAAC","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"./schema\";\n\n// Create the connection - only works on server side\nlet db: ReturnType<typeof drizzle>;\n\nif (typeof window === \"undefined\") {\n  // Server side - load environment variables\n  const { config } = require(\"dotenv\");\n  config({ path: \".env.local\" });\n\n  const sql = neon(process.env.DATABASE_URL!);\n  db = drizzle({ client: sql, schema });\n} else {\n  // Client side - create a mock db that throws errors\n  db = null as any;\n}\n\nexport { db };\n\n// Export schema for use in other files\nexport * from \"./schema\";\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,oDAAoD;AACpD,IAAI;AAEJ,wCAAmC;IACjC,2CAA2C;IAC3C,MAAM,EAAE,MAAM,EAAE;IAChB,OAAO;QAAE,MAAM;IAAa;IAE5B,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;IACzC,KAAK,IAAA,qKAAO,EAAC;QAAE,QAAQ;QAAK,QAAA;IAAO;AACrC,OAAO;IACL,oDAAoD;IACpD,KAAK;AACP","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/services.ts"],"sourcesContent":["import { eq, desc, and } from \"drizzle-orm\";\nimport { db } from \"./index\";\nimport {\n  users,\n  farmData,\n  yieldPredictions,\n  loans,\n  harvestTokens,\n  badges,\n  marketPrices,\n  supplyChainEvents,\n  type NewUser,\n  type NewFarmData,\n  type NewYieldPrediction,\n  type NewLoan,\n  type NewHarvestToken,\n  type NewBadge,\n  type NewMarketPrice,\n  type NewSupplyChainEvent,\n} from \"./schema\";\n\n// User services\nexport async function createUser(userData: NewUser) {\n  const [user] = await db.insert(users).values(userData).returning();\n  return user;\n}\n\nexport async function getUserByWalletAddress(walletAddress: string) {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.walletAddress, walletAddress));\n  return user;\n}\n\nexport async function updateUser(id: string, userData: Partial<NewUser>) {\n  const [user] = await db\n    .update(users)\n    .set(userData)\n    .where(eq(users.id, id))\n    .returning();\n  return user;\n}\n\n// Farm data services\nexport async function createFarmData(farmDataInput: NewFarmData) {\n  const [data] = await db.insert(farmData).values(farmDataInput).returning();\n  return data;\n}\n\nexport async function getFarmDataByUserId(userId: string) {\n  return await db\n    .select()\n    .from(farmData)\n    .where(eq(farmData.userId, userId))\n    .orderBy(desc(farmData.createdAt));\n}\n\nexport async function getLatestFarmDataByUserId(userId: string) {\n  const [data] = await db\n    .select()\n    .from(farmData)\n    .where(eq(farmData.userId, userId))\n    .orderBy(desc(farmData.createdAt))\n    .limit(1);\n  return data;\n}\n\n// Yield prediction services\nexport async function createYieldPrediction(\n  predictionData: NewYieldPrediction\n) {\n  const [prediction] = await db\n    .insert(yieldPredictions)\n    .values(predictionData)\n    .returning();\n  return prediction;\n}\n\nexport async function createYieldPredictionWithFarmData(\n  predictionData: NewYieldPrediction & { farmDataId?: string }\n) {\n  const [prediction] = await db\n    .insert(yieldPredictions)\n    .values(predictionData)\n    .returning();\n  return prediction;\n}\n\nexport async function getYieldPredictionsByUserId(userId: string) {\n  return await db\n    .select()\n    .from(yieldPredictions)\n    .where(eq(yieldPredictions.userId, userId))\n    .orderBy(desc(yieldPredictions.createdAt));\n}\n\nexport async function getLatestYieldPredictionByUserId(userId: string) {\n  const [prediction] = await db\n    .select()\n    .from(yieldPredictions)\n    .where(eq(yieldPredictions.userId, userId))\n    .orderBy(desc(yieldPredictions.createdAt))\n    .limit(1);\n  return prediction;\n}\n\nexport async function getYieldPredictionsWithFarmDataByUserId(userId: string) {\n  return await db\n    .select({\n      id: yieldPredictions.id,\n      cropType: yieldPredictions.cropType,\n      predictedYield: yieldPredictions.predictedYield,\n      riskLevel: yieldPredictions.riskLevel,\n      confidence: yieldPredictions.confidence,\n      modelVersion: yieldPredictions.modelVersion,\n      inputData: yieldPredictions.inputData,\n      createdAt: yieldPredictions.createdAt,\n      farmDataId: yieldPredictions.farmDataId,\n      farmData: {\n        id: farmData.id,\n        location: farmData.location,\n        soilMoisture: farmData.soilMoisture,\n        weatherNotes: farmData.weatherNotes,\n        temperature: farmData.temperature,\n        humidity: farmData.humidity,\n        rainfall: farmData.rainfall,\n        createdAt: farmData.createdAt,\n      },\n    })\n    .from(yieldPredictions)\n    .leftJoin(farmData, eq(yieldPredictions.farmDataId, farmData.id))\n    .where(eq(yieldPredictions.userId, userId))\n    .orderBy(desc(yieldPredictions.createdAt));\n}\n\n// Loan services\nexport async function createLoan(loanData: NewLoan) {\n  const [loan] = await db.insert(loans).values(loanData).returning();\n  return loan;\n}\n\nexport async function createLoanWithBlockchain(\n  loanData: NewLoan & {\n    blockchainLoanId?: string;\n    collateralPredictionId?: string;\n    blockchainTxHash?: string;\n  }\n) {\n  const [loan] = await db.insert(loans).values(loanData).returning();\n  return loan;\n}\n\nexport async function getLoansByUserId(userId: string) {\n  return await db\n    .select()\n    .from(loans)\n    .where(eq(loans.userId, userId))\n    .orderBy(desc(loans.createdAt));\n}\n\nexport async function getActiveLoanByUserId(userId: string) {\n  const [loan] = await db\n    .select()\n    .from(loans)\n    .where(and(eq(loans.userId, userId), eq(loans.status, \"active\")));\n  return loan;\n}\n\nexport async function updateLoanStatus(\n  id: string,\n  status: \"pending\" | \"active\" | \"completed\" | \"defaulted\"\n) {\n  const [loan] = await db\n    .update(loans)\n    .set({ status, updatedAt: new Date() })\n    .where(eq(loans.id, id))\n    .returning();\n  return loan;\n}\n\nexport async function updateLoanRepayment(\n  id: string,\n  repaidAmount: string,\n  status?: \"pending\" | \"active\" | \"completed\" | \"defaulted\"\n) {\n  const updateData: any = {\n    repaidAmount,\n    updatedAt: new Date(),\n  };\n  if (status) {\n    updateData.status = status;\n  }\n\n  const [loan] = await db\n    .update(loans)\n    .set(updateData)\n    .where(eq(loans.id, id))\n    .returning();\n  return loan;\n}\n\n// Harvest token services\nexport async function createHarvestToken(tokenData: NewHarvestToken) {\n  const [token] = await db.insert(harvestTokens).values(tokenData).returning();\n  return token;\n}\n\nexport async function createHarvestTokenWithBlockchain(\n  tokenData: NewHarvestToken & {\n    yieldPredictionId?: string;\n    qualityGrade?: string;\n    metadataURI?: string;\n    blockchainTokenId?: string;\n    blockchainTxHash?: string;\n  }\n) {\n  const [token] = await db.insert(harvestTokens).values(tokenData).returning();\n  return token;\n}\n\nexport async function getHarvestTokensByUserId(userId: string) {\n  return await db\n    .select()\n    .from(harvestTokens)\n    .where(eq(harvestTokens.userId, userId))\n    .orderBy(desc(harvestTokens.createdAt));\n}\n\nexport async function updateHarvestTokenStatus(\n  id: string,\n  status: \"pending\" | \"tokenized\" | \"sold\" | \"burned\" | \"locked\"\n) {\n  const [token] = await db\n    .update(harvestTokens)\n    .set({ status, updatedAt: new Date() })\n    .where(eq(harvestTokens.id, id))\n    .returning();\n  return token;\n}\n\nexport async function getAvailableCollateralByUserId(userId: string) {\n  return await db\n    .select()\n    .from(harvestTokens)\n    .where(\n      and(\n        eq(harvestTokens.userId, userId),\n        eq(harvestTokens.status, \"tokenized\"),\n        eq(harvestTokens.isLocked, false)\n      )\n    )\n    .orderBy(desc(harvestTokens.createdAt));\n}\n\nexport async function updateHarvestTokenLockStatus(\n  id: string,\n  isLocked: boolean\n) {\n  const [token] = await db\n    .update(harvestTokens)\n    .set({ isLocked, updatedAt: new Date() })\n    .where(eq(harvestTokens.id, id))\n    .returning();\n  return token;\n}\n\n// Badge services\nexport async function createBadge(badgeData: NewBadge) {\n  const [badge] = await db.insert(badges).values(badgeData).returning();\n  return badge;\n}\n\nexport async function getBadgesByUserId(userId: string) {\n  return await db.select().from(badges).where(eq(badges.userId, userId));\n}\n\nexport async function updateBadgeEarned(id: string, earned: boolean) {\n  const [badge] = await db\n    .update(badges)\n    .set({ earned, earnedDate: earned ? new Date() : null })\n    .where(eq(badges.id, id))\n    .returning();\n  return badge;\n}\n\n// Market price services\nexport async function createMarketPrice(priceData: NewMarketPrice) {\n  const [price] = await db.insert(marketPrices).values(priceData).returning();\n  return price;\n}\n\nexport async function getLatestMarketPrices() {\n  return await db\n    .select()\n    .from(marketPrices)\n    .orderBy(desc(marketPrices.createdAt));\n}\n\nexport async function getLatestMarketPriceByCrop(cropType: string) {\n  const [price] = await db\n    .select()\n    .from(marketPrices)\n    .where(eq(marketPrices.cropType, cropType))\n    .orderBy(desc(marketPrices.createdAt))\n    .limit(1);\n  return price;\n}\n\n// Supply chain services\nexport async function createSupplyChainEvent(eventData: NewSupplyChainEvent) {\n  const [event] = await db\n    .insert(supplyChainEvents)\n    .values(eventData)\n    .returning();\n  return event;\n}\n\nexport async function getSupplyChainEventsByTokenId(tokenId: string) {\n  return await db\n    .select()\n    .from(supplyChainEvents)\n    .where(eq(supplyChainEvents.tokenId, tokenId))\n    .orderBy(supplyChainEvents.createdAt);\n}\n\n// Analytics services\nexport async function getUserStats(userId: string) {\n  const [farmDataCount] = await db\n    .select({ count: farmData.id })\n    .from(farmData)\n    .where(eq(farmData.userId, userId));\n  const [predictionCount] = await db\n    .select({ count: yieldPredictions.id })\n    .from(yieldPredictions)\n    .where(eq(yieldPredictions.userId, userId));\n  const [loanCount] = await db\n    .select({ count: loans.id })\n    .from(loans)\n    .where(eq(loans.userId, userId));\n  const [tokenCount] = await db\n    .select({ count: harvestTokens.id })\n    .from(harvestTokens)\n    .where(eq(harvestTokens.userId, userId));\n\n  return {\n    farmDataCount: farmDataCount?.count || 0,\n    predictionCount: predictionCount?.count || 0,\n    loanCount: loanCount?.count || 0,\n    tokenCount: tokenCount?.count || 0,\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 694, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/adapter.ts"],"sourcesContent":["import { db } from \"./index\";\nimport {\n  createUser,\n  getUserByWalletAddress,\n  createFarmData,\n  getFarmDataByUserId,\n  createYieldPrediction,\n  getYieldPredictionsByUserId,\n  createLoan,\n  getLoansByUserId,\n  getActiveLoanByUserId,\n  createHarvestToken,\n  getHarvestTokensByUserId,\n  createBadge,\n  getBadgesByUserId,\n  updateBadgeEarned,\n  getUserStats,\n} from \"./services\";\n\n// Database adapter for the existing store\nexport class DatabaseAdapter {\n  private userId: string | null = null;\n\n  async initializeUser(walletAddress: string) {\n    try {\n      // Try to get existing user\n      let user = await getUserByWalletAddress(walletAddress);\n\n      if (!user) {\n        // Create new user\n        user = await createUser({\n          walletAddress,\n          name: \"Farmer\", // Default name\n          location: \"Ghana\", // Default location\n        });\n      }\n\n      this.userId = user.id;\n      return user;\n    } catch (error) {\n      console.error(\"Failed to initialize user:\", error);\n      throw error;\n    }\n  }\n\n  async addFarmData(data: {\n    cropType: string;\n    location: string;\n    soilMoisture: number;\n    weatherNotes: string;\n    photo?: string;\n  }) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      return await createFarmData({\n        userId: this.userId,\n        cropType: data.cropType,\n        location: data.location,\n        soilMoisture: data.soilMoisture.toString(),\n        weatherNotes: data.weatherNotes,\n        photo: data.photo,\n      });\n    } catch (error) {\n      console.error(\"Failed to add farm data:\", error);\n      throw error;\n    }\n  }\n\n  async addYieldPrediction(prediction: {\n    cropType: string;\n    predictedYield: number;\n    riskLevel: number;\n    confidence: number;\n    farmDataId?: string;\n    modelVersion?: string;\n    inputData?: any;\n  }) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      return await createYieldPrediction({\n        userId: this.userId,\n        farmDataId: prediction.farmDataId,\n        cropType: prediction.cropType,\n        predictedYield: prediction.predictedYield.toString(),\n        riskLevel: prediction.riskLevel.toString(),\n        confidence: prediction.confidence.toString(),\n        modelVersion: prediction.modelVersion,\n        inputData: prediction.inputData,\n      });\n    } catch (error) {\n      console.error(\"Failed to add yield prediction:\", error);\n      throw error;\n    }\n  }\n\n  async addLoan(loan: {\n    amount: number;\n    interestRate: number;\n    status: \"pending\" | \"active\" | \"completed\" | \"defaulted\";\n    collateral: string[];\n    startDate: Date;\n    endDate: Date;\n  }) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      return await createLoan({\n        userId: this.userId,\n        amount: loan.amount.toString(),\n        interestRate: loan.interestRate.toString(),\n        status: loan.status,\n        collateral: loan.collateral,\n        startDate: loan.startDate,\n        endDate: loan.endDate,\n      });\n    } catch (error) {\n      console.error(\"Failed to add loan:\", error);\n      throw error;\n    }\n  }\n\n  async addHarvestToken(token: {\n    cropType: string;\n    amount: number;\n    tokenizedAmount: number;\n    status: \"pending\" | \"tokenized\" | \"sold\" | \"burned\";\n  }) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      return await createHarvestToken({\n        userId: this.userId,\n        cropType: token.cropType,\n        amount: token.amount.toString(),\n        tokenizedAmount: token.tokenizedAmount.toString(),\n        status: token.status,\n        qrCode: `https://agriyield.app/token/${crypto.randomUUID()}`,\n      });\n    } catch (error) {\n      console.error(\"Failed to add harvest token:\", error);\n      throw error;\n    }\n  }\n\n  async earnBadge(badgeType: string, name: string, description: string) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      // Check if badge already exists\n      const existingBadges = await getBadgesByUserId(this.userId);\n      const existingBadge = existingBadges.find(\n        (b) => b.badgeType === badgeType\n      );\n\n      if (existingBadge) {\n        // Update existing badge\n        return await updateBadgeEarned(existingBadge.id, true);\n      } else {\n        // Create new badge\n        return await createBadge({\n          userId: this.userId,\n          badgeType,\n          name,\n          description,\n          earned: true,\n          earnedDate: new Date(),\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to earn badge:\", error);\n      throw error;\n    }\n  }\n\n  async getUserData() {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      const [farmDataList, predictions, loans, tokens, badges, stats] =\n        await Promise.all([\n          getFarmDataByUserId(this.userId),\n          getYieldPredictionsByUserId(this.userId),\n          getLoansByUserId(this.userId),\n          getHarvestTokensByUserId(this.userId),\n          getBadgesByUserId(this.userId),\n          getUserStats(this.userId),\n        ]);\n\n      return {\n        farmData: farmDataList.map((data) => ({\n          id: data.id,\n          cropType: data.cropType,\n          location: data.location,\n          soilMoisture: parseFloat(data.soilMoisture),\n          weatherNotes: data.weatherNotes || \"\",\n          photo: data.photo,\n          timestamp: data.createdAt,\n        })),\n        yieldPredictions: predictions.map((pred) => ({\n          cropType: pred.cropType,\n          predictedYield: parseFloat(pred.predictedYield),\n          riskLevel: parseFloat(pred.riskLevel),\n          confidence: parseFloat(pred.confidence),\n          timestamp: pred.createdAt,\n        })),\n        loans: loans.map((loan) => ({\n          id: loan.id,\n          amount: parseFloat(loan.amount),\n          interestRate: parseFloat(loan.interestRate),\n          status: loan.status,\n          collateral: loan.collateral as string[],\n          startDate: loan.startDate,\n          endDate: loan.endDate,\n        })),\n        harvestTokens: tokens.map((token) => ({\n          id: token.id,\n          cropType: token.cropType,\n          amount: parseFloat(token.amount),\n          tokenizedAmount: parseFloat(token.tokenizedAmount),\n          status: token.status,\n          qrCode: token.qrCode,\n        })),\n        badges: badges.map((badge) => ({\n          id: badge.id,\n          name: badge.name,\n          description: badge.description,\n          earned: badge.earned,\n          earnedDate: badge.earnedDate,\n        })),\n        stats,\n      };\n    } catch (error) {\n      console.error(\"Failed to get user data:\", error);\n      throw error;\n    }\n  }\n\n  getUserId() {\n    return this.userId;\n  }\n}\n\n// Create a singleton instance\nexport const dbAdapter = new DatabaseAdapter();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 946, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/contract.ts"],"sourcesContent":["import { ethers } from \"ethers\";\nimport AgriYieldArtifact from \"../artifacts/contracts/AgriYield.sol/AgriYield.json\";\n\n// Contract configuration\nexport const CONTRACT_ADDRESS = \"0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9\"; // From deployment\nexport const CONTRACT_ABI = AgriYieldArtifact.abi;\n\n// Contract interface for type safety\nexport interface AgriYieldContract {\n  // Farmer Management\n  registerFarmer: (\n    name: string,\n    location: string,\n    totalFarmSize: number\n  ) => Promise<any>;\n  updateFarmerProfile: (\n    name: string,\n    location: string,\n    totalFarmSize: number\n  ) => Promise<any>;\n  farmers: (address: string) => Promise<{\n    walletAddress: string;\n    name: string;\n    location: string;\n    totalFarmSize: number;\n    registrationDate: number;\n    reputationScore: number;\n    isActive: boolean;\n  }>;\n\n  // Yield Predictions\n  createYieldPrediction: (\n    cropType: string,\n    predictedYield: number,\n    confidence: number,\n    harvestDate: number\n  ) => Promise<any>;\n  verifyYield: (predictionId: number, actualYield: number) => Promise<any>;\n  yieldPredictions: (id: number) => Promise<{\n    predictionId: number;\n    farmer: string;\n    cropType: string;\n    predictedYield: number;\n    confidence: number;\n    predictionDate: number;\n    harvestDate: number;\n    isVerified: boolean;\n    actualYield: number;\n  }>;\n\n  // Harvest Tokenization\n  mintHarvestToken: (\n    cropType: string,\n    quantity: number,\n    qualityGrade: string,\n    metadataURI: string\n  ) => Promise<any>;\n  harvestTokens: (id: number) => Promise<{\n    tokenId: number;\n    farmer: string;\n    cropType: string;\n    quantity: number;\n    harvestDate: number;\n    qualityGrade: string;\n    isLocked: boolean;\n    metadataURI: string;\n  }>;\n\n  // Lending System\n  requestLoan: (collateralPredictionId: number, amount: number) => Promise<any>;\n  repayLoan: (loanId: number) => Promise<any>;\n  loans: (id: number) => Promise<{\n    loanId: number;\n    borrower: string;\n    amount: number;\n    collateralPredictionId: number;\n    interestRate: number;\n    startDate: number;\n    dueDate: number;\n    status: number;\n    repaidAmount: number;\n  }>;\n\n  // Supply Chain\n  addSupplyChainEvent: (\n    tokenId: number,\n    eventType: string,\n    location: string,\n    notes: string\n  ) => Promise<any>;\n\n  // Reward System\n  rewardFarmer: (farmer: string, amount: number) => Promise<any>;\n  fundRewards: () => Promise<any>;\n\n  // View Functions\n  getFarmerPredictions: (farmer: string) => Promise<number[]>;\n  getFarmerLoans: (farmer: string) => Promise<number[]>;\n  getFarmerTokens: (farmer: string) => Promise<number[]>;\n  getSupplyChainEvents: (tokenId: number) => Promise<any[]>;\n  getLoanDetails: (loanId: number) => Promise<{\n    borrower: string;\n    amount: number;\n    totalOwed: number;\n    status: number;\n    dueDate: number;\n  }>;\n\n  // Platform Settings\n  platformFeeRate: () => Promise<number>;\n  defaultInterestRate: () => Promise<number>;\n  maxLoanDuration: () => Promise<number>;\n  minCollateralRatio: () => Promise<number>;\n}\n\n// Contract instance factory\nexport function getAgriYieldContract(\n  provider: ethers.Provider | ethers.Signer\n): AgriYieldContract {\n  return new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider) as any;\n}\n\n// Helper functions for common operations\nexport class AgriYieldHelper {\n  private contract: AgriYieldContract;\n\n  constructor(provider: ethers.Provider | ethers.Signer) {\n    this.contract = getAgriYieldContract(provider);\n  }\n\n  // Farmer operations\n  async registerFarmer(name: string, location: string, totalFarmSize: number) {\n    const tx = await this.contract.registerFarmer(\n      name,\n      location,\n      totalFarmSize\n    );\n    return await tx.wait();\n  }\n\n  async getFarmer(address: string) {\n    return await this.contract.farmers(address);\n  }\n\n  // Yield prediction operations\n  async createYieldPrediction(\n    cropType: string,\n    predictedYield: number,\n    confidence: number,\n    harvestDate: number\n  ) {\n    const tx = await this.contract.createYieldPrediction(\n      cropType,\n      predictedYield,\n      confidence,\n      harvestDate\n    );\n    return await tx.wait();\n  }\n\n  async getYieldPrediction(predictionId: number) {\n    return await this.contract.yieldPredictions(predictionId);\n  }\n\n  // Harvest token operations\n  async mintHarvestToken(\n    cropType: string,\n    quantity: number,\n    qualityGrade: string,\n    metadataURI: string\n  ) {\n    const tx = await this.contract.mintHarvestToken(\n      cropType,\n      quantity,\n      qualityGrade,\n      metadataURI\n    );\n    return await tx.wait();\n  }\n\n  async getHarvestToken(tokenId: number) {\n    return await this.contract.harvestTokens(tokenId);\n  }\n\n  // Lending operations\n  async requestLoan(collateralPredictionId: number, amount: number) {\n    try {\n      const tx = await this.contract.requestLoan(\n        collateralPredictionId,\n        amount\n      );\n      const receipt = await tx.wait();\n      return {\n        hash: tx.hash,\n        receipt,\n        success: true,\n        loanId: receipt.logs[0]?.args?.loanId || null,\n      };\n    } catch (error) {\n      console.error(\"Error requesting loan:\", error);\n      throw error;\n    }\n  }\n\n  async repayLoan(loanId: number, amount: bigint) {\n    try {\n      const tx = await this.contract.repayLoan(loanId, { value: amount });\n      const receipt = await tx.wait();\n      return {\n        hash: tx.hash,\n        receipt,\n        success: true,\n        amount: amount,\n      };\n    } catch (error) {\n      console.error(\"Error repaying loan:\", error);\n      throw error;\n    }\n  }\n\n  async getLoan(loanId: number) {\n    return await this.contract.loans(loanId);\n  }\n\n  async getLoanDetails(loanId: number) {\n    return await this.contract.getLoanDetails(loanId);\n  }\n\n  // Supply chain operations\n  async addSupplyChainEvent(\n    tokenId: number,\n    eventType: string,\n    location: string,\n    notes: string\n  ) {\n    const tx = await this.contract.addSupplyChainEvent(\n      tokenId,\n      eventType,\n      location,\n      notes\n    );\n    return await tx.wait();\n  }\n\n  async getSupplyChainEvents(tokenId: number) {\n    try {\n      return await this.contract.getSupplyChainEvents(tokenId);\n    } catch (error) {\n      console.log(\"⚠️  getSupplyChainEvents not available in current ABI\");\n      return [];\n    }\n  }\n\n  // View functions\n  async getFarmerPredictions(farmer: string) {\n    return await this.contract.getFarmerPredictions(farmer);\n  }\n\n  async getFarmerTokens(farmer: string) {\n    return await this.contract.getFarmerTokens(farmer);\n  }\n\n  async getFarmerLoans(farmer: string) {\n    return await this.contract.getFarmerLoans(farmer);\n  }\n\n  // Reward System\n  async rewardFarmer(farmer: string, amount: bigint) {\n    try {\n      const tx = await this.contract.rewardFarmer(farmer, amount);\n      await tx.wait();\n      return {\n        hash: tx.hash,\n        success: true,\n        amount: amount,\n        farmer: farmer,\n      };\n    } catch (error) {\n      console.error(\"Error rewarding farmer:\", error);\n      throw error;\n    }\n  }\n\n  async fundRewards(amount?: bigint) {\n    try {\n      const tx = await this.contract.fundRewards({ value: amount || 0n });\n      await tx.wait();\n      return {\n        hash: tx.hash,\n        success: true,\n        amount: amount || 0n,\n      };\n    } catch (error) {\n      console.error(\"Error funding rewards:\", error);\n      throw error;\n    }\n  }\n\n  // Platform info\n  async getPlatformSettings() {\n    const [feeRate, interestRate, maxDuration, collateralRatio] =\n      await Promise.all([\n        this.contract.platformFeeRate(),\n        this.contract.defaultInterestRate(),\n        this.contract.maxLoanDuration(),\n        this.contract.minCollateralRatio(),\n      ]);\n\n    return {\n      feeRate: Number(feeRate),\n      interestRate: Number(interestRate),\n      maxDuration: Number(maxDuration),\n      collateralRatio: Number(collateralRatio),\n    };\n  }\n}\n\n// Server-side contract helper for owner operations\nexport function getServerContractHelper(): AgriYieldHelper {\n  if (!process.env.CONTRACT_OWNER_PRIVATE_KEY) {\n    throw new Error(\"CONTRACT_OWNER_PRIVATE_KEY not set in environment\");\n  }\n\n  if (!process.env.HEDERA_RPC_URL) {\n    throw new Error(\"HEDERA_RPC_URL not set in environment\");\n  }\n\n  const provider = new ethers.JsonRpcProvider(process.env.HEDERA_RPC_URL);\n  const signer = new ethers.Wallet(\n    process.env.CONTRACT_OWNER_PRIVATE_KEY,\n    provider\n  );\n\n  return new AgriYieldHelper(signer);\n}\n\n// Export contract address for easy access\nexport { CONTRACT_ADDRESS as AGRIYIELD_CONTRACT_ADDRESS };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1124, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/app/api/loans/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { dbAdapter } from \"@/lib/db/adapter\";\nimport { AgriYieldHelper } from \"@/lib/contract\";\nimport {\n  getUserByWalletAddress,\n  getLoansByUserId,\n  createLoanWithBlockchain,\n  getAvailableCollateralByUserId,\n} from \"@/lib/db/services\";\nimport { ethers } from \"ethers\";\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const walletAddress = searchParams.get(\"walletAddress\");\n\n    if (!walletAddress) {\n      return NextResponse.json(\n        { error: \"Wallet address is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Get user by wallet address\n    const user = await getUserByWalletAddress(walletAddress);\n    if (!user) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    // Get user's loans\n    const userLoans = await getLoansByUserId(user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: userLoans.map((loan) => ({\n        id: loan.id,\n        blockchainLoanId: loan.blockchainLoanId,\n        amount: parseFloat(loan.amount),\n        interestRate: parseFloat(loan.interestRate),\n        status: loan.status,\n        collateral: loan.collateral,\n        collateralPredictionId: loan.collateralPredictionId,\n        startDate: loan.startDate,\n        endDate: loan.endDate,\n        repaidAmount: parseFloat(loan.repaidAmount || \"0\"),\n        blockchainTxHash: loan.blockchainTxHash,\n        createdAt: loan.createdAt,\n      })),\n    });\n  } catch (error) {\n    console.error(\"Failed to fetch loans:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch loans\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { walletAddress, collateralTokenId, amount, collateralPredictionId } =\n      body;\n\n    if (!walletAddress || !collateralTokenId || !amount) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" },\n        { status: 400 }\n      );\n    }\n\n    // Initialize user in database adapter\n    await dbAdapter.initializeUser(walletAddress);\n\n    // Get user by wallet address\n    const user = await getUserByWalletAddress(walletAddress);\n    if (!user) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    // Get available collateral\n    const availableCollateral = await getAvailableCollateralByUserId(user.id);\n    const selectedCollateral = availableCollateral.find(\n      (token) => token.id === collateralTokenId\n    );\n\n    if (!selectedCollateral) {\n      return NextResponse.json(\n        { error: \"Selected collateral not available\" },\n        { status: 400 }\n      );\n    }\n\n    // Create provider and contract helper\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const contractHelper = new AgriYieldHelper(signer);\n\n    // Request loan from smart contract\n    const loanAmount = ethers.parseEther(amount.toString());\n    const blockchainResult = await contractHelper.requestLoan(\n      parseInt(collateralPredictionId),\n      loanAmount\n    );\n\n    if (!blockchainResult.success) {\n      throw new Error(\"Blockchain transaction failed\");\n    }\n\n    // Calculate loan details\n    const interestRate = 12; // 12% APR from contract\n    const startDate = new Date();\n    const endDate = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000); // 1 year\n\n    // Store loan in database\n    const loanData = {\n      userId: user.id,\n      blockchainLoanId: blockchainResult.loanId?.toString(),\n      amount: amount.toString(),\n      interestRate: interestRate.toString(),\n      status: \"active\" as const,\n      collateral: [collateralTokenId],\n      collateralPredictionId: collateralPredictionId,\n      startDate,\n      endDate,\n      repaidAmount: \"0\",\n      blockchainTxHash: blockchainResult.hash,\n    };\n\n    const loan = await createLoanWithBlockchain(loanData);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: loan.id,\n        blockchainLoanId: loan.blockchainLoanId,\n        amount: parseFloat(loan.amount),\n        interestRate: parseFloat(loan.interestRate),\n        status: loan.status,\n        collateral: loan.collateral,\n        startDate: loan.startDate,\n        endDate: loan.endDate,\n        blockchainTxHash: loan.blockchainTxHash,\n        transactionHash: blockchainResult.hash,\n      },\n    });\n  } catch (error) {\n    console.error(\"Failed to create loan:\", error);\n    return NextResponse.json(\n      { error: \"Failed to create loan\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAMA;;;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,gBAAgB,aAAa,GAAG,CAAC;QAEvC,IAAI,CAAC,eAAe;YAClB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,6BAA6B;QAC7B,MAAM,OAAO,MAAM,IAAA,iJAAsB,EAAC;QAC1C,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,mBAAmB;QACnB,MAAM,YAAY,MAAM,IAAA,2IAAgB,EAAC,KAAK,EAAE;QAEhD,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM,UAAU,GAAG,CAAC,CAAC,OAAS,CAAC;oBAC7B,IAAI,KAAK,EAAE;oBACX,kBAAkB,KAAK,gBAAgB;oBACvC,QAAQ,WAAW,KAAK,MAAM;oBAC9B,cAAc,WAAW,KAAK,YAAY;oBAC1C,QAAQ,KAAK,MAAM;oBACnB,YAAY,KAAK,UAAU;oBAC3B,wBAAwB,KAAK,sBAAsB;oBACnD,WAAW,KAAK,SAAS;oBACzB,SAAS,KAAK,OAAO;oBACrB,cAAc,WAAW,KAAK,YAAY,IAAI;oBAC9C,kBAAkB,KAAK,gBAAgB;oBACvC,WAAW,KAAK,SAAS;gBAC3B,CAAC;QACH;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,EAAE,sBAAsB,EAAE,GACxE;QAEF,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,QAAQ;YACnD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,MAAM,mIAAS,CAAC,cAAc,CAAC;QAE/B,6BAA6B;QAC7B,MAAM,OAAO,MAAM,IAAA,iJAAsB,EAAC;QAC1C,IAAI,CAAC,MAAM;YACT,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,2BAA2B;QAC3B,MAAM,sBAAsB,MAAM,IAAA,yJAA8B,EAAC,KAAK,EAAE;QACxE,MAAM,qBAAqB,oBAAoB,IAAI,CACjD,CAAC,QAAU,MAAM,EAAE,KAAK;QAG1B,IAAI,CAAC,oBAAoB;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,MAAM,WAAW,IAAI,4LAAM,CAAC,eAAe,CAAC,OAAO,QAAQ;QAC3D,MAAM,SAAS,MAAM,SAAS,SAAS;QACvC,MAAM,iBAAiB,IAAI,oIAAe,CAAC;QAE3C,mCAAmC;QACnC,MAAM,aAAa,4LAAM,CAAC,UAAU,CAAC,OAAO,QAAQ;QACpD,MAAM,mBAAmB,MAAM,eAAe,WAAW,CACvD,SAAS,yBACT;QAGF,IAAI,CAAC,iBAAiB,OAAO,EAAE;YAC7B,MAAM,IAAI,MAAM;QAClB;QAEA,yBAAyB;QACzB,MAAM,eAAe,IAAI,wBAAwB;QACjD,MAAM,YAAY,IAAI;QACtB,MAAM,UAAU,IAAI,KAAK,KAAK,GAAG,KAAK,MAAM,KAAK,KAAK,KAAK,OAAO,SAAS;QAE3E,yBAAyB;QACzB,MAAM,WAAW;YACf,QAAQ,KAAK,EAAE;YACf,kBAAkB,iBAAiB,MAAM,EAAE;YAC3C,QAAQ,OAAO,QAAQ;YACvB,cAAc,aAAa,QAAQ;YACnC,QAAQ;YACR,YAAY;gBAAC;aAAkB;YAC/B,wBAAwB;YACxB;YACA;YACA,cAAc;YACd,kBAAkB,iBAAiB,IAAI;QACzC;QAEA,MAAM,OAAO,MAAM,IAAA,mJAAwB,EAAC;QAE5C,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;gBACJ,IAAI,KAAK,EAAE;gBACX,kBAAkB,KAAK,gBAAgB;gBACvC,QAAQ,WAAW,KAAK,MAAM;gBAC9B,cAAc,WAAW,KAAK,YAAY;gBAC1C,QAAQ,KAAK,MAAM;gBACnB,YAAY,KAAK,UAAU;gBAC3B,WAAW,KAAK,SAAS;gBACzB,SAAS,KAAK,OAAO;gBACrB,kBAAkB,KAAK,gBAAgB;gBACvC,iBAAiB,iBAAiB,IAAI;YACxC;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}