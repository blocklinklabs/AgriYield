{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  uuid,\n  decimal,\n  integer,\n  boolean,\n  jsonb,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  location: text(\"location\"),\n  country: text(\"country\"),\n  cropType: text(\"crop_type\"),\n  farmSize: text(\"farm_size\"),\n  experience: text(\"experience\"),\n  additionalInfo: text(\"additional_info\"),\n  // Settings fields\n  notifications: boolean(\"notifications\").default(true),\n  darkMode: boolean(\"dark_mode\").default(false),\n  language: text(\"language\").default(\"en\"),\n  currency: text(\"currency\").default(\"USD\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Farm data entries\nexport const farmData = pgTable(\"farm_data\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  cropType: text(\"crop_type\").notNull(),\n  location: text(\"location\").notNull(),\n  soilMoisture: decimal(\"soil_moisture\", { precision: 5, scale: 2 }).notNull(),\n  weatherNotes: text(\"weather_notes\"),\n  photo: text(\"photo\"), // Base64 encoded image data\n  photoMimeType: text(\"photo_mime_type\"), // MIME type of the image\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  temperature: decimal(\"temperature\", { precision: 5, scale: 2 }),\n  humidity: decimal(\"humidity\", { precision: 5, scale: 2 }),\n  rainfall: decimal(\"rainfall\", { precision: 5, scale: 2 }),\n  // AI Analysis fields\n  aiAnalysis: text(\"ai_analysis\"), // JSON string of AI analysis results\n  aiConfidence: decimal(\"ai_confidence\", { precision: 3, scale: 2 }), // 0.00 to 1.00\n  aiRecommendations: text(\"ai_recommendations\"), // AI-generated recommendations\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Yield predictions\nexport const yieldPredictions = pgTable(\"yield_predictions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  farmDataId: uuid(\"farm_data_id\").references(() => farmData.id, {\n    onDelete: \"set null\",\n  }),\n  cropType: text(\"crop_type\").notNull(),\n  predictedYield: decimal(\"predicted_yield\", {\n    precision: 8,\n    scale: 2,\n  }).notNull(),\n  riskLevel: decimal(\"risk_level\", { precision: 5, scale: 2 }).notNull(),\n  confidence: decimal(\"confidence\", { precision: 5, scale: 2 }).notNull(),\n  modelVersion: text(\"model_version\"),\n  inputData: jsonb(\"input_data\"), // Store the input data used for prediction\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Loans\nexport const loans = pgTable(\"loans\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  blockchainLoanId: text(\"blockchain_loan_id\"), // Smart contract loan ID\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(),\n  status: text(\"status\", {\n    enum: [\"pending\", \"active\", \"completed\", \"defaulted\"],\n  })\n    .notNull()\n    .default(\"pending\"),\n  collateral: jsonb(\"collateral\").notNull(), // Array of token IDs\n  collateralPredictionId: text(\"collateral_prediction_id\"), // Smart contract prediction ID\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  repaidAmount: decimal(\"repaid_amount\", { precision: 12, scale: 2 }).default(\n    \"0\"\n  ),\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Harvest tokens\nexport const harvestTokens = pgTable(\"harvest_tokens\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  yieldPredictionId: uuid(\"yield_prediction_id\").references(\n    () => yieldPredictions.id,\n    { onDelete: \"set null\" }\n  ),\n  cropType: text(\"crop_type\").notNull(),\n  amount: decimal(\"amount\", { precision: 8, scale: 2 }).notNull(),\n  tokenizedAmount: decimal(\"tokenized_amount\", {\n    precision: 12,\n    scale: 2,\n  }).notNull(),\n  qualityGrade: text(\"quality_grade\"), // A, B, C grade\n  status: text(\"status\", {\n    enum: [\"pending\", \"tokenized\", \"sold\", \"burned\", \"locked\"],\n  })\n    .notNull()\n    .default(\"pending\"),\n  isLocked: boolean(\"is_locked\").default(false), // Locked as loan collateral\n  qrCode: text(\"qr_code\").notNull(),\n  metadataURI: text(\"metadata_uri\"), // NFT metadata URI\n  blockchainTokenId: text(\"blockchain_token_id\"), // Smart contract token ID\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Badges/Achievements\nexport const badges = pgTable(\"badges\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  badgeType: text(\"badge_type\").notNull(), // 'data-contributor', 'yield-predictor', etc.\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  earned: boolean(\"earned\").notNull().default(false),\n  earnedDate: timestamp(\"earned_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Market prices (for price tracking)\nexport const marketPrices = pgTable(\"market_prices\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  cropType: text(\"crop_type\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"GHS\"),\n  source: text(\"source\").notNull(), // 'manual', 'api', 'blockchain'\n  location: text(\"location\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Supply chain tracking\nexport const supplyChainEvents = pgTable(\"supply_chain_events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  tokenId: uuid(\"token_id\")\n    .notNull()\n    .references(() => harvestTokens.id, { onDelete: \"cascade\" }),\n  eventType: text(\"event_type\").notNull(), // 'harvest', 'processing', 'transport', 'delivery'\n  description: text(\"description\").notNull(),\n  location: text(\"location\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  metadata: jsonb(\"metadata\"), // Additional event data\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  farmData: many(farmData),\n  yieldPredictions: many(yieldPredictions),\n  loans: many(loans),\n  harvestTokens: many(harvestTokens),\n  badges: many(badges),\n}));\n\nexport const farmDataRelations = relations(farmData, ({ one }) => ({\n  user: one(users, {\n    fields: [farmData.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const yieldPredictionsRelations = relations(\n  yieldPredictions,\n  ({ one }) => ({\n    user: one(users, {\n      fields: [yieldPredictions.userId],\n      references: [users.id],\n    }),\n    farmData: one(farmData, {\n      fields: [yieldPredictions.farmDataId],\n      references: [farmData.id],\n    }),\n  })\n);\n\nexport const loansRelations = relations(loans, ({ one }) => ({\n  user: one(users, {\n    fields: [loans.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const harvestTokensRelations = relations(\n  harvestTokens,\n  ({ one, many }) => ({\n    user: one(users, {\n      fields: [harvestTokens.userId],\n      references: [users.id],\n    }),\n    yieldPrediction: one(yieldPredictions, {\n      fields: [harvestTokens.yieldPredictionId],\n      references: [yieldPredictions.id],\n    }),\n    supplyChainEvents: many(supplyChainEvents),\n  })\n);\n\nexport const badgesRelations = relations(badges, ({ one }) => ({\n  user: one(users, {\n    fields: [badges.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const supplyChainEventsRelations = relations(\n  supplyChainEvents,\n  ({ one }) => ({\n    token: one(harvestTokens, {\n      fields: [supplyChainEvents.tokenId],\n      references: [harvestTokens.id],\n    }),\n  })\n);\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type FarmData = typeof farmData.$inferSelect;\nexport type NewFarmData = typeof farmData.$inferInsert;\nexport type YieldPrediction = typeof yieldPredictions.$inferSelect;\nexport type NewYieldPrediction = typeof yieldPredictions.$inferInsert;\nexport type Loan = typeof loans.$inferSelect;\nexport type NewLoan = typeof loans.$inferInsert;\nexport type HarvestToken = typeof harvestTokens.$inferSelect;\nexport type NewHarvestToken = typeof harvestTokens.$inferInsert;\nexport type Badge = typeof badges.$inferSelect;\nexport type NewBadge = typeof badges.$inferInsert;\nexport type MarketPrice = typeof marketPrices.$inferSelect;\nexport type NewMarketPrice = typeof marketPrices.$inferInsert;\nexport type SupplyChainEvent = typeof supplyChainEvents.$inferSelect;\nexport type NewSupplyChainEvent = typeof supplyChainEvents.$inferInsert;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"./schema\";\n\n// Create the connection - only works on server side\nlet db: ReturnType<typeof drizzle>;\n\nif (typeof window === \"undefined\") {\n  // Server side - load environment variables\n  const { config } = require(\"dotenv\");\n  config({ path: \".env.local\" });\n\n  const sql = neon(process.env.DATABASE_URL!);\n  db = drizzle({ client: sql, schema });\n} else {\n  // Client side - create a mock db that throws errors\n  db = null as any;\n}\n\nexport { db };\n\n// Export schema for use in other files\nexport * from \"./schema\";\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,oDAAoD;AACpD,IAAI;AAEJ,wCAAmC;IACjC,2CAA2C;IAC3C,MAAM,EAAE,MAAM,EAAE;IAChB,OAAO;QAAE,MAAM;IAAa;IAE5B,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;IACzC,KAAK,IAAA,qKAAO,EAAC;QAAE,QAAQ;QAAK,QAAA;IAAO;AACrC,OAAO;IACL,oDAAoD;IACpD,KAAK;AACP","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/gemini-ai.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize Gemini AI\nconst genAI = new GoogleGenerativeAI(\n  process.env.GEMINI_API_KEY || \"AIzaSyCDjJOR9qH3WqatqCkZwb-XHE6lKu5XS1c\"\n);\n\nexport interface FarmDataAnalysis {\n  cropHealth: \"excellent\" | \"good\" | \"fair\" | \"poor\";\n  diseaseRisk: \"low\" | \"medium\" | \"high\";\n  pestRisk: \"low\" | \"medium\" | \"high\";\n  soilQuality: \"excellent\" | \"good\" | \"fair\" | \"poor\";\n  waterNeeds: \"low\" | \"medium\" | \"high\";\n  yieldPrediction: number; // in tons per hectare\n  confidence: number; // 0.0 to 1.0\n  recommendations: string[];\n  issues: string[];\n}\n\nexport interface GeminiAnalysisResult {\n  analysis: FarmDataAnalysis;\n  rawResponse: string;\n}\n\nexport class GeminiAIService {\n  private model: any;\n\n  constructor() {\n    this.model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\n  }\n\n  async analyzeFarmData(data: {\n    cropType: string;\n    soilMoisture: number;\n    temperature?: number;\n    humidity?: number;\n    rainfall?: number;\n    weatherNotes?: string;\n    imageData?: string; // Base64 encoded image\n    imageMimeType?: string;\n    location?: string;\n  }): Promise<GeminiAnalysisResult> {\n    try {\n      // Prepare the prompt for Gemini\n      const prompt = this.buildAnalysisPrompt(data);\n\n      // Prepare content for Gemini\n      const content: any[] = [{ text: prompt }];\n\n      // Add image if provided\n      if (data.imageData && data.imageMimeType) {\n        content.push({\n          inlineData: {\n            data: data.imageData,\n            mimeType: data.imageMimeType,\n          },\n        });\n      }\n\n      const result = await this.model.generateContent(content);\n      const response = await result.response;\n      const text = response.text();\n\n      // Parse the AI response\n      const analysis = this.parseAIResponse(text, data);\n\n      return {\n        analysis,\n        rawResponse: text,\n      };\n    } catch (error) {\n      console.error(\"Gemini AI analysis error:\", error);\n      throw new Error(\"Failed to analyze farm data with AI\");\n    }\n  }\n\n  private buildAnalysisPrompt(data: any): string {\n    return `\nYou are an expert agricultural AI assistant. Analyze the following farm data and provide detailed insights:\n\nCROP INFORMATION:\n- Crop Type: ${data.cropType}\n- Location: ${data.location || \"Not specified\"}\n\nENVIRONMENTAL DATA:\n- Soil Moisture: ${data.soilMoisture}%\n- Temperature: ${data.temperature || \"Not provided\"}°C\n- Humidity: ${data.humidity || \"Not provided\"}%\n- Rainfall: ${data.rainfall || \"Not provided\"}mm\n- Weather Notes: ${data.weatherNotes || \"None\"}\n\nPlease provide a comprehensive analysis in the following JSON format:\n{\n  \"cropHealth\": \"excellent|good|fair|poor\",\n  \"diseaseRisk\": \"low|medium|high\",\n  \"pestRisk\": \"low|medium|high\", \n  \"soilQuality\": \"excellent|good|fair|poor\",\n  \"waterNeeds\": \"low|medium|high\",\n  \"yieldPrediction\": 0.0,\n  \"confidence\": 0.0,\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"],\n  \"issues\": [\"issue1\", \"issue2\"]\n}\n\nFocus on:\n1. Crop health assessment based on environmental conditions\n2. Disease and pest risk evaluation\n3. Soil quality analysis\n4. Water requirements\n5. Yield prediction in tons per hectare\n6. Specific actionable recommendations\n7. Potential issues to address\n\nBe precise and practical in your recommendations for African smallholder farmers.\n    `.trim();\n  }\n\n  private parseAIResponse(response: string, data: any): FarmDataAnalysis {\n    try {\n      // Extract JSON from the response\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error(\"No JSON found in AI response\");\n      }\n\n      const parsed = JSON.parse(jsonMatch[0]);\n\n      // Validate and normalize the response\n      return {\n        cropHealth: (this.validateEnum(parsed.cropHealth, [\n          \"excellent\",\n          \"good\",\n          \"fair\",\n          \"poor\",\n        ]) || \"fair\") as \"excellent\" | \"good\" | \"fair\" | \"poor\",\n        diseaseRisk: (this.validateEnum(parsed.diseaseRisk, [\n          \"low\",\n          \"medium\",\n          \"high\",\n        ]) || \"medium\") as \"low\" | \"medium\" | \"high\",\n        pestRisk: (this.validateEnum(parsed.pestRisk, [\n          \"low\",\n          \"medium\",\n          \"high\",\n        ]) || \"medium\") as \"low\" | \"medium\" | \"high\",\n        soilQuality: (this.validateEnum(parsed.soilQuality, [\n          \"excellent\",\n          \"good\",\n          \"fair\",\n          \"poor\",\n        ]) || \"fair\") as \"excellent\" | \"good\" | \"fair\" | \"poor\",\n        waterNeeds: (this.validateEnum(parsed.waterNeeds, [\n          \"low\",\n          \"medium\",\n          \"high\",\n        ]) || \"medium\") as \"low\" | \"medium\" | \"high\",\n        yieldPrediction: Math.max(\n          0,\n          Math.min(50, parseFloat(parsed.yieldPrediction) || 0)\n        ),\n        confidence: Math.max(\n          0,\n          Math.min(1, parseFloat(parsed.confidence) || 0.5)\n        ),\n        recommendations: Array.isArray(parsed.recommendations)\n          ? parsed.recommendations.slice(0, 5)\n          : [],\n        issues: Array.isArray(parsed.issues) ? parsed.issues.slice(0, 3) : [],\n      };\n    } catch (error) {\n      console.error(\"Error parsing AI response:\", error);\n\n      // Return default analysis if parsing fails\n      return {\n        cropHealth: \"fair\",\n        diseaseRisk: \"medium\",\n        pestRisk: \"medium\",\n        soilQuality: \"fair\",\n        waterNeeds: \"medium\",\n        yieldPrediction: 2.5,\n        confidence: 0.5,\n        recommendations: [\n          \"Monitor soil moisture levels regularly\",\n          \"Check for signs of disease or pest damage\",\n          \"Consider soil testing for better insights\",\n        ],\n        issues: [\"Limited data for comprehensive analysis\"],\n      };\n    }\n  }\n\n  private validateEnum(value: any, validValues: string[]): string | null {\n    return validValues.includes(value) ? value : null;\n  }\n\n  async generateYieldPrediction(data: {\n    cropType: string;\n    soilMoisture: number;\n    temperature?: number;\n    humidity?: number;\n    rainfall?: number;\n    weatherNotes?: string;\n    location?: string;\n    historicalData?: any[];\n  }): Promise<{\n    predictedYield: number;\n    confidence: number;\n    factors: string[];\n    recommendations: string[];\n    riskFactors: string[];\n  }> {\n    try {\n      const prompt = `\nYou are an expert agricultural AI assistant specializing in yield prediction for African smallholder farmers. Analyze the following farm data and provide a comprehensive yield prediction:\n\nCROP INFORMATION:\n- Crop Type: ${data.cropType}\n- Location: ${data.location || \"Not specified\"}\n\nENVIRONMENTAL DATA:\n- Soil Moisture: ${data.soilMoisture}%\n- Temperature: ${data.temperature || \"Not provided\"}°C\n- Humidity: ${data.humidity || \"Not provided\"}%\n- Rainfall: ${data.rainfall || \"Not provided\"}mm\n- Weather Notes: ${data.weatherNotes || \"None\"}\n\nPlease provide a comprehensive yield prediction analysis in the following JSON format:\n{\n  \"predictedYield\": 0.0,\n  \"confidence\": 0.0,\n  \"factors\": [\"factor1\", \"factor2\", \"factor3\"],\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"],\n  \"riskFactors\": [\"risk1\", \"risk2\"]\n}\n\nFocus on:\n1. Realistic yield prediction in tons per hectare for ${\n        data.cropType\n      } in African conditions\n2. Confidence level based on data completeness and quality\n3. Key factors affecting yield (soil, weather, crop-specific needs)\n4. Practical recommendations for the farmer\n5. Risk factors to monitor\n\nBe specific and practical for smallholder farmers in Africa. Consider typical yields for ${\n        data.cropType\n      } in similar conditions.\n      `;\n\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n\n      const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const parsed = JSON.parse(jsonMatch[0]);\n\n        // Validate and normalize the response\n        return {\n          predictedYield: Math.max(\n            0.5,\n            Math.min(50, parseFloat(parsed.predictedYield) || 2.5)\n          ),\n          confidence: Math.max(\n            0.1,\n            Math.min(1, parseFloat(parsed.confidence) || 0.6)\n          ),\n          factors: Array.isArray(parsed.factors)\n            ? parsed.factors.slice(0, 5)\n            : [\"Soil moisture levels\", \"Environmental conditions\"],\n          recommendations: Array.isArray(parsed.recommendations)\n            ? parsed.recommendations.slice(0, 4)\n            : [\n                \"Monitor soil moisture regularly\",\n                \"Check for pest and disease signs\",\n              ],\n          riskFactors: Array.isArray(parsed.riskFactors)\n            ? parsed.riskFactors.slice(0, 3)\n            : [\"Weather variability\", \"Pest pressure\"],\n        };\n      }\n\n      // Fallback prediction with more realistic values\n      const baseYield = this.getBaseYieldForCrop(data.cropType);\n      const moistureFactor = Math.max(\n        0.5,\n        Math.min(1.5, data.soilMoisture / 70)\n      );\n      const predictedYield = baseYield * moistureFactor;\n\n      return {\n        predictedYield: Math.round(predictedYield * 10) / 10,\n        confidence: 0.6,\n        factors: [\n          \"Soil moisture levels\",\n          \"Crop-specific requirements\",\n          \"Environmental conditions\",\n        ],\n        recommendations: [\n          \"Monitor soil moisture regularly\",\n          \"Check for signs of disease or pest damage\",\n          \"Consider soil testing for better insights\",\n        ],\n        riskFactors: [\n          \"Weather variability\",\n          \"Pest and disease pressure\",\n          \"Soil nutrient levels\",\n        ],\n      };\n    } catch (error) {\n      console.error(\"Yield prediction error:\", error);\n      return {\n        predictedYield: this.getBaseYieldForCrop(data.cropType),\n        confidence: 0.5,\n        factors: [\"Limited data available\"],\n        recommendations: [\"Gather more farm data for better predictions\"],\n        riskFactors: [\"Insufficient data for risk assessment\"],\n      };\n    }\n  }\n\n  private getBaseYieldForCrop(cropType: string): number {\n    const baseYields: { [key: string]: number } = {\n      Maize: 3.5,\n      Cocoa: 0.8,\n      Rice: 4.2,\n      Wheat: 2.8,\n      Cassava: 12.0,\n      Sorghum: 2.5,\n      Millet: 1.8,\n      Groundnut: 1.2,\n    };\n    return baseYields[cropType] || 2.5;\n  }\n}\n\nexport const geminiAI = new GeminiAIService();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 717, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/app/api/farm-data/submit/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { farmData, users } from \"@/lib/db/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { geminiAI } from \"@/lib/gemini-ai\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { config } from \"dotenv\";\n\nconfig({ path: \".env.local\" });\nconst neonDb = neon(process.env.DATABASE_URL!);\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n\n    // Extract form data\n    const walletAddress = formData.get(\"walletAddress\") as string;\n    const cropType = formData.get(\"cropType\") as string;\n    const location = formData.get(\"location\") as string;\n    const soilMoisture = parseFloat(formData.get(\"soilMoisture\") as string);\n    const weatherNotes = formData.get(\"weatherNotes\") as string;\n    const latitude = formData.get(\"latitude\")\n      ? parseFloat(formData.get(\"latitude\") as string)\n      : null;\n    const longitude = formData.get(\"longitude\")\n      ? parseFloat(formData.get(\"longitude\") as string)\n      : null;\n    const temperature = formData.get(\"temperature\")\n      ? parseFloat(formData.get(\"temperature\") as string)\n      : null;\n    const humidity = formData.get(\"humidity\")\n      ? parseFloat(formData.get(\"humidity\") as string)\n      : null;\n    const rainfall = formData.get(\"rainfall\")\n      ? parseFloat(formData.get(\"rainfall\") as string)\n      : null;\n\n    // Handle image upload\n    const imageFile = formData.get(\"photo\") as File | null;\n    let imageData: string | null = null;\n    let imageMimeType: string | null = null;\n\n    if (imageFile && imageFile.size > 0) {\n      // Convert image to base64\n      const arrayBuffer = await imageFile.arrayBuffer();\n      const buffer = Buffer.from(arrayBuffer);\n      imageData = buffer.toString(\"base64\");\n      imageMimeType = imageFile.type;\n    }\n\n    // Validate required fields\n    if (!walletAddress || !cropType || !location || isNaN(soilMoisture)) {\n      return NextResponse.json(\n        { error: \"Missing required fields\" },\n        { status: 400 }\n      );\n    }\n\n    // Get user ID\n    const user = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.walletAddress, walletAddress))\n      .limit(1);\n\n    if (user.length === 0) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    const userId = user[0].id;\n\n    // Prepare data for AI analysis\n    const analysisData = {\n      cropType,\n      soilMoisture,\n      temperature,\n      humidity,\n      rainfall,\n      weatherNotes,\n      location,\n      imageData,\n      imageMimeType,\n    };\n\n    // Get AI analysis\n    let aiAnalysis = null;\n    let aiConfidence = 0.5;\n    let aiRecommendations = null;\n\n    try {\n      const aiResult = await geminiAI.analyzeFarmData(analysisData);\n      aiAnalysis = JSON.stringify(aiResult.analysis);\n      aiConfidence = aiResult.analysis.confidence;\n      aiRecommendations = aiResult.analysis.recommendations.join(\"; \");\n    } catch (aiError) {\n      console.error(\"AI analysis failed:\", aiError);\n      // Continue without AI analysis\n    }\n\n    // Save farm data to database\n    const result = await db\n      .insert(farmData)\n      .values({\n        userId,\n        cropType,\n        location,\n        soilMoisture,\n        weatherNotes,\n        photo: imageData,\n        photoMimeType: imageMimeType,\n        latitude,\n        longitude,\n        temperature,\n        humidity,\n        rainfall,\n        aiAnalysis,\n        aiConfidence,\n        aiRecommendations,\n      })\n      .returning();\n\n    // Generate yield prediction\n    let yieldPrediction = null;\n    try {\n      const yieldResult = await geminiAI.generateYieldPrediction({\n        cropType,\n        soilMoisture,\n        temperature,\n        humidity,\n        rainfall,\n      });\n\n      yieldPrediction = {\n        predictedYield: yieldResult.predictedYield,\n        confidence: yieldResult.confidence,\n        factors: yieldResult.factors,\n      };\n    } catch (yieldError) {\n      console.error(\"Yield prediction failed:\", yieldError);\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: \"Farm data submitted successfully\",\n      data: {\n        id: result[0].id,\n        aiAnalysis: aiAnalysis ? JSON.parse(aiAnalysis) : null,\n        yieldPrediction,\n        imageUploaded: !!imageData,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error submitting farm data:\", error);\n    return NextResponse.json(\n      { error: \"Failed to submit farm data\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const walletAddress = searchParams.get(\"walletAddress\");\n    const submissionId = searchParams.get(\"id\");\n\n    if (!walletAddress) {\n      return NextResponse.json(\n        { error: \"Wallet address is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Get user ID using raw SQL\n    const userResult = await neonDb`\n      SELECT id FROM users WHERE wallet_address = ${walletAddress} LIMIT 1\n    `;\n\n    if (userResult.length === 0) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    const userId = userResult[0].id;\n\n    // If specific submission ID is requested, return detailed data with image\n    if (submissionId) {\n      const submission = await neonDb`\n        SELECT * FROM farm_data WHERE id = ${submissionId} LIMIT 1\n      `;\n\n      if (submission.length === 0) {\n        return NextResponse.json(\n          { error: \"Submission not found\" },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json({\n        success: true,\n        data: submission,\n      });\n    }\n\n    // Get farm data for user (without full image data for performance)\n    const farmDataList = await neonDb`\n      SELECT \n        id,\n        crop_type as \"cropType\",\n        location,\n        soil_moisture as \"soilMoisture\",\n        weather_notes as \"weatherNotes\",\n        temperature,\n        humidity,\n        rainfall,\n        latitude,\n        longitude,\n        CASE WHEN photo IS NOT NULL THEN 'exists' ELSE NULL END as photo,\n        photo_mime_type as \"photoMimeType\",\n        ai_analysis as \"aiAnalysis\",\n        ai_confidence as \"aiConfidence\",\n        ai_recommendations as \"aiRecommendations\",\n        created_at as \"createdAt\"\n      FROM farm_data \n      WHERE user_id = ${userId}\n      ORDER BY created_at DESC\n    `;\n\n    return NextResponse.json({\n      success: true,\n      data: farmDataList,\n    });\n  } catch (error) {\n    console.error(\"Error fetching farm data:\", error);\n    console.error(\"Error stack:\", error.stack);\n    return NextResponse.json(\n      { error: \"Failed to fetch farm data\", details: error.message },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}