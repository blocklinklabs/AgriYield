{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/wallet-provider.ts"],"sourcesContent":["\"use client\";\n\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\nexport interface WalletAccount {\n  address: string;\n  accountId: string;\n  balance?: string;\n}\n\nexport interface WalletState {\n  account: WalletAccount | null;\n  isConnected: boolean;\n  isConnecting: boolean;\n  error: string | null;\n  connect: (account: WalletAccount) => void;\n  disconnect: () => void;\n  setConnecting: (connecting: boolean) => void;\n  setError: (error: string | null) => void;\n}\n\nexport const useWalletStore = create<WalletState>()(\n  persist(\n    (set, get) => ({\n      account: null,\n      isConnected: false,\n      isConnecting: false,\n      error: null,\n\n      connect: (account: WalletAccount) => {\n        set({\n          account,\n          isConnected: true,\n          isConnecting: false,\n          error: null,\n        });\n      },\n\n      disconnect: () => {\n        set({\n          account: null,\n          isConnected: false,\n          isConnecting: false,\n          error: null,\n        });\n      },\n\n      setConnecting: (connecting: boolean) => {\n        set({ isConnecting: connecting });\n      },\n\n      setError: (error: string | null) => {\n        set({ error });\n      },\n    }),\n    {\n      name: \"wallet-storage\",\n      partialize: (state) => ({\n        account: state.account,\n        isConnected: state.isConnected,\n      }),\n    }\n  )\n);\n\n// Web3 wallet connection utilities\nexport class WalletProvider {\n  private static instance: WalletProvider;\n\n  static getInstance(): WalletProvider {\n    if (!WalletProvider.instance) {\n      WalletProvider.instance = new WalletProvider();\n    }\n    return WalletProvider.instance;\n  }\n\n  async connectWallet(): Promise<WalletAccount> {\n    if (typeof window === \"undefined\" || !window.ethereum) {\n      throw new Error(\n        \"No Web3 wallet found. Please install MetaMask or another Web3 wallet.\"\n      );\n    }\n\n    try {\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      if (!accounts || accounts.length === 0) {\n        throw new Error(\"No accounts found. Please unlock your wallet.\");\n      }\n\n      const address = accounts[0];\n\n      // Get balance\n      let balance = \"0\";\n      try {\n        const balanceHex = await window.ethereum.request({\n          method: \"eth_getBalance\",\n          params: [address, \"latest\"],\n        });\n        balance = (parseInt(balanceHex, 16) / Math.pow(10, 18)).toFixed(4);\n      } catch (error) {\n        console.warn(\"Could not fetch balance:\", error);\n      }\n\n      const account: WalletAccount = {\n        address,\n        accountId: address, // Using address as accountId for compatibility\n        balance,\n      };\n\n      return account;\n    } catch (error: any) {\n      throw new Error(error.message || \"Failed to connect wallet\");\n    }\n  }\n\n  async getAccountInfo(address: string): Promise<WalletAccount> {\n    if (typeof window === \"undefined\" || !window.ethereum) {\n      throw new Error(\"No Web3 wallet found\");\n    }\n\n    let balance = \"0\";\n    try {\n      const balanceHex = await window.ethereum.request({\n        method: \"eth_getBalance\",\n        params: [address, \"latest\"],\n      });\n      balance = (parseInt(balanceHex, 16) / Math.pow(10, 18)).toFixed(4);\n    } catch (error) {\n      console.warn(\"Could not fetch balance:\", error);\n    }\n\n    return {\n      address,\n      accountId: address,\n      balance,\n    };\n  }\n\n  async switchNetwork(chainId: string) {\n    if (typeof window === \"undefined\" || !window.ethereum) {\n      throw new Error(\"No Web3 wallet found\");\n    }\n\n    try {\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId }],\n      });\n    } catch (error: any) {\n      // If the chain doesn't exist, add it\n      if (error.code === 4902) {\n        await this.addNetwork();\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  private async addNetwork() {\n    if (typeof window === \"undefined\" || !window.ethereum) {\n      throw new Error(\"No Web3 wallet found\");\n    }\n\n    // Add Hedera Testnet\n    await window.ethereum.request({\n      method: \"wallet_addEthereumChain\",\n      params: [\n        {\n          chainId: \"0x128\", // 296 in hex\n          chainName: \"Hedera Testnet\",\n          nativeCurrency: {\n            name: \"HBAR\",\n            symbol: \"HBAR\",\n            decimals: 18,\n          },\n          rpcUrls: [\"https://testnet.hashio.io/api\"],\n          blockExplorerUrls: [\"https://hashscan.io/testnet\"],\n        },\n      ],\n    });\n  }\n}\n\n// Export singleton instance\nexport const walletProvider = WalletProvider.getInstance();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 279, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/app/prediction/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useWalletStore } from \"@/lib/wallet-provider\";\nimport { formatDate, generateMockYieldPrediction } from \"@/lib/utils\";\nimport { toast } from \"sonner\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\";\nimport {\n  TrendingUp,\n  ArrowLeft,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle,\n  BarChart3,\n} from \"lucide-react\";\n\nexport default function Prediction() {\n  const router = useRouter();\n  const { isConnected, account } = useWalletStore();\n  \n  // Simulation data - in the future this will come from the database\n  const farmData = [\n    {\n      id: \"1\",\n      cropType: \"Maize\",\n      location: \"Kumasi, Ghana\",\n      soilMoisture: 75,\n      weatherNotes: \"Sunny with light rain expected\",\n      timestamp: new Date(),\n    },\n  ];\n\n  const yieldPredictions = [\n    {\n      cropType: \"Maize\",\n      predictedYield: 4.2,\n      riskLevel: 2,\n      confidence: 0.87,\n      timestamp: new Date(),\n    },\n  ];\n\n  const addYieldPrediction = (prediction: any) => {\n    console.log(\"Adding yield prediction:\", prediction);\n  };\n\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [selectedCrop, setSelectedCrop] = useState(\"\");\n\n  useEffect(() => {\n    if (!isConnected) {\n      router.push(\"/\");\n    }\n  }, [isConnected, router]);\n\n  const handleGeneratePrediction = async () => {\n    if (!selectedCrop) {\n      toast.error(\"Please select a crop type\");\n      return;\n    }\n\n    setIsGenerating(true);\n    try {\n      // Simulate AI prediction\n      await new Promise((resolve) => setTimeout(resolve, 3000));\n\n      const prediction = generateMockYieldPrediction(selectedCrop);\n      addYieldPrediction({\n        cropType: selectedCrop,\n        predictedYield: prediction.predictedYield,\n        riskLevel: prediction.riskLevel,\n        confidence: prediction.confidence,\n      });\n\n      toast.success(\"Yield prediction generated successfully!\");\n    } catch (error) {\n      console.error(\"Failed to generate prediction:\", error);\n      toast.error(\"Failed to generate prediction. Please try again.\");\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  // Chart data\n  const yieldData = yieldPredictions.map((pred, index) => ({\n    name: `${pred.cropType} ${index + 1}`,\n    yield: pred.predictedYield,\n    risk: pred.riskLevel,\n    confidence: pred.confidence,\n  }));\n\n  const riskData = [\n    {\n      name: \"Low Risk\",\n      value: yieldPredictions.filter((p) => p.riskLevel < 15).length,\n      color: \"#10b981\",\n    },\n    {\n      name: \"Medium Risk\",\n      value: yieldPredictions.filter(\n        (p) => p.riskLevel >= 15 && p.riskLevel < 25\n      ).length,\n      color: \"#f59e0b\",\n    },\n    {\n      name: \"High Risk\",\n      value: yieldPredictions.filter((p) => p.riskLevel >= 25).length,\n      color: \"#ef4444\",\n    },\n  ];\n\n  const cropTypes = [\"Maize\", \"Cocoa\", \"Rice\", \"Wheat\", \"Cassava\"];\n\n  if (!isConnected) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => router.push(\"/dashboard\")}\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">\n            Yield Predictions\n          </h1>\n          <p className=\"text-muted-foreground\">\n            AI-powered crop yield predictions and risk analysis\n          </p>\n        </div>\n      </div>\n\n      {/* Generate New Prediction */}\n      <Card className=\"dashboard-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Generate New Prediction\n          </CardTitle>\n          <CardDescription>\n            Get AI-powered yield predictions for your crops\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <label className=\"block text-sm font-medium mb-2\">\n                Select Crop Type\n              </label>\n              <select\n                className=\"w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800\"\n                value={selectedCrop}\n                onChange={(e) => setSelectedCrop(e.target.value)}\n              >\n                <option value=\"\">Choose a crop...</option>\n                {cropTypes.map((crop) => (\n                  <option key={crop} value={crop}>\n                    {crop}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"flex items-end\">\n              <Button\n                onClick={handleGeneratePrediction}\n                disabled={isGenerating || !selectedCrop}\n                className=\"w-full sm:w-auto btn-primary\"\n              >\n                {isGenerating ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Generating...\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw className=\"mr-2 h-4 w-4\" />\n                    Generate Prediction\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {yieldPredictions.length > 0 ? (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Yield vs Risk Chart */}\n          <Card className=\"dashboard-card\">\n            <CardHeader>\n              <CardTitle>Yield vs Risk Analysis</CardTitle>\n              <CardDescription>\n                Predicted yield and risk levels for your crops\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <BarChart data={yieldData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"yield\" fill=\"#10b981\" name=\"Yield (tons)\" />\n                    <Bar dataKey=\"risk\" fill=\"#ef4444\" name=\"Risk (%)\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Risk Distribution */}\n          <Card className=\"dashboard-card\">\n            <CardHeader>\n              <CardTitle>Risk Distribution</CardTitle>\n              <CardDescription>\n                Distribution of risk levels across your predictions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-80\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <PieChart>\n                    <Pie\n                      data={riskData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, value }) => `${name}: ${value}`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {riskData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      ) : (\n        <Card className=\"dashboard-card\">\n          <CardContent className=\"text-center py-12\">\n            <BarChart3 className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No Predictions Yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Generate your first yield prediction to see detailed analytics\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Recent Predictions */}\n      <Card className=\"dashboard-card\">\n        <CardHeader>\n          <CardTitle>Recent Predictions</CardTitle>\n          <CardDescription>\n            Your latest yield predictions and recommendations\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {yieldPredictions.length > 0 ? (\n            <div className=\"space-y-4\">\n              {yieldPredictions\n                .slice(-5)\n                .reverse()\n                .map((prediction, index) => (\n                  <div\n                    key={index}\n                    className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg\"\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-2\">\n                        <h3 className=\"font-semibold\">{prediction.cropType}</h3>\n                        <Badge\n                          variant={\n                            prediction.riskLevel < 15\n                              ? \"default\"\n                              : prediction.riskLevel < 25\n                              ? \"secondary\"\n                              : \"destructive\"\n                          }\n                        >\n                          {prediction.riskLevel < 15\n                            ? \"Low Risk\"\n                            : prediction.riskLevel < 25\n                            ? \"Medium Risk\"\n                            : \"High Risk\"}\n                        </Badge>\n                      </div>\n                      <span className=\"text-sm text-gray-500\">\n                        {prediction.timestamp\n                          ? formatDate(prediction.timestamp)\n                          : \"N/A\"}\n                      </span>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"text-center p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                          Predicted Yield\n                        </p>\n                        <p className=\"text-2xl font-bold text-green-600\">\n                          {prediction.predictedYield} tons\n                        </p>\n                      </div>\n                      <div className=\"text-center p-3 bg-orange-50 dark:bg-orange-950 rounded-lg\">\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                          Risk Level\n                        </p>\n                        <p className=\"text-2xl font-bold text-orange-600\">\n                          {prediction.riskLevel}%\n                        </p>\n                      </div>\n                      <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                          Confidence\n                        </p>\n                        <p className=\"text-2xl font-bold text-blue-600\">\n                          {prediction.confidence}%\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Recommendations */}\n                    <div className=\"mt-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                      <div className=\"flex items-start gap-2\">\n                        {prediction.riskLevel < 15 ? (\n                          <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                        ) : (\n                          <AlertTriangle className=\"h-5 w-5 text-orange-600 mt-0.5\" />\n                        )}\n                        <div>\n                          <p className=\"font-medium text-sm\">\n                            {prediction.riskLevel < 15\n                              ? \"Excellent conditions! Your crop is expected to perform well.\"\n                              : prediction.riskLevel < 25\n                              ? \"Good conditions with some risk factors to monitor.\"\n                              : \"High risk detected. Consider additional measures to protect your crop.\"}\n                          </p>\n                          <p className=\"text-xs text-gray-600 dark:text-gray-300 mt-1\">\n                            Confidence: {prediction.confidence}% | Based on\n                            latest farm data and weather patterns\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <BarChart3 className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground\">\n                No predictions available. Generate your first prediction above.\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}