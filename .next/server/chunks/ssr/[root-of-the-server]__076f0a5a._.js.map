{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Card({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card\"\n      className={cn(\n        \"bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-header\"\n      className={cn(\n        \"@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-title\"\n      className={cn(\"leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardDescription({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardAction({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-action\"\n      className={cn(\n        \"col-start-2 row-span-2 row-start-1 self-start justify-self-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction CardContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-content\"\n      className={cn(\"px-6\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction CardFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"card-footer\"\n      className={cn(\"flex items-center px-6 [.border-t]:pt-6\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardAction,\n  CardDescription,\n  CardContent,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAEA;;;AAEA,SAAS,KAAK,EAAE,SAAS,EAAE,GAAG,OAAoC;IAChE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,qFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,8JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,UAAU,EAAE,SAAS,EAAE,GAAG,OAAoC;IACrE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,gBAAgB,EAAE,SAAS,EAAE,GAAG,OAAoC;IAC3E,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,kEACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EAAE,SAAS,EAAE,GAAG,OAAoC;IACvE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,QAAQ;QACrB,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,2CAA2C;QACxD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { CheckIcon, ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Select({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Root>) {\n  return <SelectPrimitive.Root data-slot=\"select\" {...props} />\n}\n\nfunction SelectGroup({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Group>) {\n  return <SelectPrimitive.Group data-slot=\"select-group\" {...props} />\n}\n\nfunction SelectValue({\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Value>) {\n  return <SelectPrimitive.Value data-slot=\"select-value\" {...props} />\n}\n\nfunction SelectTrigger({\n  className,\n  size = \"default\",\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {\n  size?: \"sm\" | \"default\"\n}) {\n  return (\n    <SelectPrimitive.Trigger\n      data-slot=\"select-trigger\"\n      data-size={size}\n      className={cn(\n        \"border-input data-[placeholder]:text-muted-foreground [&_svg:not([class*='text-'])]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 dark:hover:bg-input/50 flex w-fit items-center justify-between gap-2 rounded-md border bg-transparent px-3 py-2 text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-9 data-[size=sm]:h-8 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <SelectPrimitive.Icon asChild>\n        <ChevronDownIcon className=\"size-4 opacity-50\" />\n      </SelectPrimitive.Icon>\n    </SelectPrimitive.Trigger>\n  )\n}\n\nfunction SelectContent({\n  className,\n  children,\n  position = \"popper\",\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Content>) {\n  return (\n    <SelectPrimitive.Portal>\n      <SelectPrimitive.Content\n        data-slot=\"select-content\"\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-[8rem] origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border shadow-md\",\n          position === \"popper\" &&\n            \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n          className\n        )}\n        position={position}\n        {...props}\n      >\n        <SelectScrollUpButton />\n        <SelectPrimitive.Viewport\n          className={cn(\n            \"p-1\",\n            position === \"popper\" &&\n              \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] scroll-my-1\"\n          )}\n        >\n          {children}\n        </SelectPrimitive.Viewport>\n        <SelectScrollDownButton />\n      </SelectPrimitive.Content>\n    </SelectPrimitive.Portal>\n  )\n}\n\nfunction SelectLabel({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Label>) {\n  return (\n    <SelectPrimitive.Label\n      data-slot=\"select-label\"\n      className={cn(\"text-muted-foreground px-2 py-1.5 text-xs\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Item>) {\n  return (\n    <SelectPrimitive.Item\n      data-slot=\"select-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground [&_svg:not([class*='text-'])]:text-muted-foreground relative flex w-full cursor-default items-center gap-2 rounded-sm py-1.5 pr-8 pl-2 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4 *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"absolute right-2 flex size-3.5 items-center justify-center\">\n        <SelectPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </SelectPrimitive.ItemIndicator>\n      </span>\n      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n    </SelectPrimitive.Item>\n  )\n}\n\nfunction SelectSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.Separator>) {\n  return (\n    <SelectPrimitive.Separator\n      data-slot=\"select-separator\"\n      className={cn(\"bg-border pointer-events-none -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SelectScrollUpButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {\n  return (\n    <SelectPrimitive.ScrollUpButton\n      data-slot=\"select-scroll-up-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronUpIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollUpButton>\n  )\n}\n\nfunction SelectScrollDownButton({\n  className,\n  ...props\n}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {\n  return (\n    <SelectPrimitive.ScrollDownButton\n      data-slot=\"select-scroll-down-button\"\n      className={cn(\n        \"flex cursor-default items-center justify-center py-1\",\n        className\n      )}\n      {...props}\n    >\n      <ChevronDownIcon className=\"size-4\" />\n    </SelectPrimitive.ScrollDownButton>\n  )\n}\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAAA;AAAA;AAEA;AANA;;;;;AAQA,SAAS,OAAO,EACd,GAAG,OAC+C;IAClD,qBAAO,8OAAC,0KAAoB;QAAC,aAAU;QAAU,GAAG,KAAK;;;;;;AAC3D;AAEA,SAAS,YAAY,EACnB,GAAG,OACgD;IACnD,qBAAO,8OAAC,2KAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,YAAY,EACnB,GAAG,OACgD;IACnD,qBAAO,8OAAC,2KAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,OAAO,SAAS,EAChB,QAAQ,EACR,GAAG,OAGJ;IACC,qBACE,8OAAC,6KAAuB;QACtB,aAAU;QACV,aAAW;QACX,WAAW,IAAA,kHAAE,EACX,gzBACA;QAED,GAAG,KAAK;;YAER;0BACD,8OAAC,0KAAoB;gBAAC,OAAO;0BAC3B,cAAA,8OAAC,2OAAe;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAInC;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,QAAQ,EACR,WAAW,QAAQ,EACnB,GAAG,OACkD;IACrD,qBACE,8OAAC,4KAAsB;kBACrB,cAAA,8OAAC,6KAAuB;YACtB,aAAU;YACV,WAAW,IAAA,kHAAE,EACX,ijBACA,aAAa,YACX,mIACF;YAEF,UAAU;YACT,GAAG,KAAK;;8BAET,8OAAC;;;;;8BACD,8OAAC,8KAAwB;oBACvB,WAAW,IAAA,kHAAE,EACX,OACA,aAAa,YACX;8BAGH;;;;;;8BAEH,8OAAC;;;;;;;;;;;;;;;;AAIT;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,8OAAC,2KAAqB;QACpB,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,6CAA6C;QAC1D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAClB,SAAS,EACT,QAAQ,EACR,GAAG,OAC+C;IAClD,qBACE,8OAAC,0KAAoB;QACnB,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,6aACA;QAED,GAAG,KAAK;;0BAET,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC,mLAA6B;8BAC5B,cAAA,8OAAC,qNAAS;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAGzB,8OAAC,8KAAwB;0BAAE;;;;;;;;;;;;AAGjC;AAEA,SAAS,gBAAgB,EACvB,SAAS,EACT,GAAG,OACoD;IACvD,qBACE,8OAAC,+KAAyB;QACxB,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iDAAiD;QAC9D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,qBAAqB,EAC5B,SAAS,EACT,GAAG,OACyD;IAC5D,qBACE,8OAAC,oLAA8B;QAC7B,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,qOAAa;YAAC,WAAU;;;;;;;;;;;AAG/B;AAEA,SAAS,uBAAuB,EAC9B,SAAS,EACT,GAAG,OAC2D;IAC9D,qBACE,8OAAC,sLAAgC;QAC/B,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,2OAAe;YAAC,WAAU;;;;;;;;;;;AAGjC","debugId":null}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/ui/dialog.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { XIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Dialog({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Root>) {\n  return <DialogPrimitive.Root data-slot=\"dialog\" {...props} />\n}\n\nfunction DialogTrigger({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {\n  return <DialogPrimitive.Trigger data-slot=\"dialog-trigger\" {...props} />\n}\n\nfunction DialogPortal({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Portal>) {\n  return <DialogPrimitive.Portal data-slot=\"dialog-portal\" {...props} />\n}\n\nfunction DialogClose({\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Close>) {\n  return <DialogPrimitive.Close data-slot=\"dialog-close\" {...props} />\n}\n\nfunction DialogOverlay({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {\n  return (\n    <DialogPrimitive.Overlay\n      data-slot=\"dialog-overlay\"\n      className={cn(\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogContent({\n  className,\n  children,\n  showCloseButton = true,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Content> & {\n  showCloseButton?: boolean\n}) {\n  return (\n    <DialogPortal data-slot=\"dialog-portal\">\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        data-slot=\"dialog-content\"\n        className={cn(\n          \"bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <DialogPrimitive.Close\n            data-slot=\"dialog-close\"\n            className=\"ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\"\n          >\n            <XIcon />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        )}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  )\n}\n\nfunction DialogHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-header\"\n      className={cn(\"flex flex-col gap-2 text-center sm:text-left\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"dialog-footer\"\n      className={cn(\n        \"flex flex-col-reverse gap-2 sm:flex-row sm:justify-end\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DialogTitle({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Title>) {\n  return (\n    <DialogPrimitive.Title\n      data-slot=\"dialog-title\"\n      className={cn(\"text-lg leading-none font-semibold\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DialogDescription({\n  className,\n  ...props\n}: React.ComponentProps<typeof DialogPrimitive.Description>) {\n  return (\n    <DialogPrimitive.Description\n      data-slot=\"dialog-description\"\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Dialog,\n  DialogClose,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogOverlay,\n  DialogPortal,\n  DialogTitle,\n  DialogTrigger,\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;AAEA;AANA;;;;;AAQA,SAAS,OAAO,EACd,GAAG,OAC+C;IAClD,qBAAO,8OAAC,0KAAoB;QAAC,aAAU;QAAU,GAAG,KAAK;;;;;;AAC3D;AAEA,SAAS,cAAc,EACrB,GAAG,OACkD;IACrD,qBAAO,8OAAC,6KAAuB;QAAC,aAAU;QAAkB,GAAG,KAAK;;;;;;AACtE;AAEA,SAAS,aAAa,EACpB,GAAG,OACiD;IACpD,qBAAO,8OAAC,4KAAsB;QAAC,aAAU;QAAiB,GAAG,KAAK;;;;;;AACpE;AAEA,SAAS,YAAY,EACnB,GAAG,OACgD;IACnD,qBAAO,8OAAC,2KAAqB;QAAC,aAAU;QAAgB,GAAG,KAAK;;;;;;AAClE;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,GAAG,OACkD;IACrD,qBACE,8OAAC,6KAAuB;QACtB,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,0JACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,cAAc,EACrB,SAAS,EACT,QAAQ,EACR,kBAAkB,IAAI,EACtB,GAAG,OAGJ;IACC,qBACE,8OAAC;QAAa,aAAU;;0BACtB,8OAAC;;;;;0BACD,8OAAC,6KAAuB;gBACtB,aAAU;gBACV,WAAW,IAAA,kHAAE,EACX,+WACA;gBAED,GAAG,KAAK;;oBAER;oBACA,iCACC,8OAAC,2KAAqB;wBACpB,aAAU;wBACV,WAAU;;0CAEV,8OAAC,yMAAK;;;;;0CACN,8OAAC;gCAAK,WAAU;0CAAU;;;;;;;;;;;;;;;;;;;;;;;;AAMtC;AAEA,SAAS,aAAa,EAAE,SAAS,EAAE,GAAG,OAAoC;IACxE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,aAAa,EAAE,SAAS,EAAE,GAAG,OAAoC;IACxE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,0DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,YAAY,EACnB,SAAS,EACT,GAAG,OACgD;IACnD,qBACE,8OAAC,2KAAqB;QACpB,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACsD;IACzD,qBACE,8OAAC,iLAA2B;QAC1B,aAAU;QACV,WAAW,IAAA,kHAAE,EAAC,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/contract.ts"],"sourcesContent":["import { ethers } from \"ethers\";\nimport AgriYieldArtifact from \"../artifacts/contracts/AgriYield.sol/AgriYield.json\";\n\n// Contract configuration - will be updated after Hedera Testnet deployment\nexport const CONTRACT_ADDRESS = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"; // Placeholder - deploy to Hedera Testnet\nexport const CONTRACT_ABI = AgriYieldArtifact.abi;\n\n// Contract interface for type safety\nexport interface AgriYieldContract {\n  // Farmer Management\n  registerFarmer: (\n    name: string,\n    location: string,\n    totalFarmSize: number\n  ) => Promise<any>;\n  updateFarmerProfile: (\n    name: string,\n    location: string,\n    totalFarmSize: number\n  ) => Promise<any>;\n  farmers: (address: string) => Promise<{\n    walletAddress: string;\n    name: string;\n    location: string;\n    totalFarmSize: number;\n    registrationDate: number;\n    reputationScore: number;\n    isActive: boolean;\n  }>;\n\n  // Yield Predictions\n  createYieldPrediction: (\n    cropType: string,\n    predictedYield: number,\n    confidence: number,\n    harvestDate: number\n  ) => Promise<any>;\n  verifyYield: (predictionId: number, actualYield: number) => Promise<any>;\n  yieldPredictions: (id: number) => Promise<{\n    predictionId: number;\n    farmer: string;\n    cropType: string;\n    predictedYield: number;\n    confidence: number;\n    predictionDate: number;\n    harvestDate: number;\n    isVerified: boolean;\n    actualYield: number;\n  }>;\n\n  // Harvest Tokenization\n  mintHarvestToken: (\n    cropType: string,\n    quantity: number,\n    qualityGrade: string,\n    metadataURI: string\n  ) => Promise<any>;\n  harvestTokens: (id: number) => Promise<{\n    tokenId: number;\n    farmer: string;\n    cropType: string;\n    quantity: number;\n    harvestDate: number;\n    qualityGrade: string;\n    isLocked: boolean;\n    metadataURI: string;\n  }>;\n\n  // Lending System\n  requestLoan: (collateralPredictionId: number, amount: bigint) => Promise<any>;\n  repayLoan: (loanId: number, options?: { value: bigint }) => Promise<any>;\n  loans: (id: number) => Promise<{\n    loanId: number;\n    borrower: string;\n    amount: number;\n    collateralPredictionId: number;\n    interestRate: number;\n    startDate: number;\n    dueDate: number;\n    status: number;\n    repaidAmount: number;\n  }>;\n\n  // Supply Chain\n  addSupplyChainEvent: (\n    tokenId: number,\n    eventType: string,\n    location: string,\n    notes: string\n  ) => Promise<any>;\n\n  // Reward System\n  rewardFarmer: (farmer: string, amount: bigint) => Promise<any>;\n  fundRewards: (amount?: bigint) => Promise<any>;\n\n  // View Functions\n  getFarmerPredictions: (farmer: string) => Promise<number[]>;\n  getFarmerLoans: (farmer: string) => Promise<number[]>;\n  getFarmerTokens: (farmer: string) => Promise<number[]>;\n  getSupplyChainEvents: (tokenId: number) => Promise<any[]>;\n  getLoanDetails: (loanId: number) => Promise<{\n    borrower: string;\n    amount: number;\n    totalOwed: number;\n    status: number;\n    dueDate: number;\n  }>;\n\n  // Platform Settings\n  platformFeeRate: () => Promise<number>;\n  defaultInterestRate: () => Promise<number>;\n  maxLoanDuration: () => Promise<number>;\n  minCollateralRatio: () => Promise<number>;\n}\n\n// Contract instance factory\nexport function getAgriYieldContract(\n  provider: ethers.Provider | ethers.Signer\n): AgriYieldContract {\n  return new ethers.Contract(CONTRACT_ADDRESS, CONTRACT_ABI, provider) as any;\n}\n\n// Helper functions for common operations\nexport class AgriYieldHelper {\n  private contract: AgriYieldContract;\n\n  constructor(provider: ethers.Provider | ethers.Signer) {\n    this.contract = getAgriYieldContract(provider);\n  }\n\n  // Farmer operations\n  async registerFarmer(name: string, location: string, totalFarmSize: number) {\n    const tx = await this.contract.registerFarmer(\n      name,\n      location,\n      totalFarmSize\n    );\n    return await tx.wait();\n  }\n\n  async getFarmer(address: string) {\n    return await this.contract.farmers(address);\n  }\n\n  async getYieldPrediction(predictionId: number) {\n    return await this.contract.yieldPredictions(predictionId);\n  }\n\n  // Harvest token operations\n  async mintHarvestToken(\n    cropType: string,\n    quantity: number,\n    qualityGrade: string,\n    metadataURI: string\n  ) {\n    try {\n      const tx = await this.contract.mintHarvestToken(\n        cropType,\n        quantity,\n        qualityGrade,\n        metadataURI\n      );\n      const receipt = await tx.wait();\n      return {\n        hash: tx.hash,\n        receipt,\n        success: true,\n      };\n    } catch (error) {\n      console.error(\"Error minting harvest token:\", error);\n      throw error;\n    }\n  }\n\n  async getHarvestToken(tokenId: number) {\n    return await this.contract.harvestTokens(tokenId);\n  }\n\n  // Yield Prediction operations\n  async createYieldPrediction(\n    cropType: string,\n    predictedYield: number,\n    confidence: number,\n    harvestDate: number\n  ) {\n    try {\n      console.log(\"Creating yield prediction with:\", {\n        cropType,\n        predictedYield,\n        confidence,\n        harvestDate,\n      });\n\n      const tx = await this.contract.createYieldPrediction(\n        cropType,\n        predictedYield,\n        confidence,\n        harvestDate\n      );\n      const receipt = await tx.wait();\n      return {\n        hash: tx.hash,\n        receipt,\n        success: true,\n        predictionId: receipt.logs[0]?.args?.predictionId || 1,\n      };\n    } catch (error: any) {\n      console.error(\"Failed to create yield prediction:\", error);\n      return {\n        success: false,\n        error: error.message,\n      };\n    }\n  }\n\n  // Lending operations\n  async requestLoan(collateralPredictionId: number, amount: bigint) {\n    try {\n      console.log(\"Contract requestLoan called with:\", {\n        collateralPredictionId,\n        amount,\n        amountType: typeof amount,\n        isNaN: Number.isNaN(amount),\n      });\n\n      const tx = await this.contract.requestLoan(\n        collateralPredictionId,\n        amount\n      );\n      const receipt = await tx.wait();\n      return {\n        hash: tx.hash,\n        receipt,\n        success: true,\n        loanId: receipt.logs[0]?.args?.loanId || null,\n      };\n    } catch (error) {\n      console.error(\"Error requesting loan:\", error);\n      throw error;\n    }\n  }\n\n  async repayLoan(loanId: number, amount: bigint) {\n    try {\n      const tx = await this.contract.repayLoan(loanId, { value: amount });\n      const receipt = await tx.wait();\n      return {\n        hash: tx.hash,\n        receipt,\n        success: true,\n        amount: amount,\n      };\n    } catch (error) {\n      console.error(\"Error repaying loan:\", error);\n      throw error;\n    }\n  }\n\n  async getLoan(loanId: number) {\n    return await this.contract.loans(loanId);\n  }\n\n  async getLoanDetails(loanId: number) {\n    return await this.contract.getLoanDetails(loanId);\n  }\n\n  // Supply chain operations\n  async addSupplyChainEvent(\n    tokenId: number,\n    eventType: string,\n    location: string,\n    notes: string\n  ) {\n    const tx = await this.contract.addSupplyChainEvent(\n      tokenId,\n      eventType,\n      location,\n      notes\n    );\n    return await tx.wait();\n  }\n\n  async getSupplyChainEvents(tokenId: number) {\n    try {\n      return await this.contract.getSupplyChainEvents(tokenId);\n    } catch (error) {\n      console.log(\"⚠️  getSupplyChainEvents not available in current ABI\");\n      return [];\n    }\n  }\n\n  // View functions\n  async getFarmerPredictions(farmer: string) {\n    return await this.contract.getFarmerPredictions(farmer);\n  }\n\n  async getFarmerTokens(farmer: string) {\n    return await this.contract.getFarmerTokens(farmer);\n  }\n\n  async getFarmerLoans(farmer: string) {\n    return await this.contract.getFarmerLoans(farmer);\n  }\n\n  // Reward System\n  async rewardFarmer(farmer: string, amount: bigint) {\n    try {\n      const tx = await this.contract.rewardFarmer(farmer, amount);\n      await tx.wait();\n      return {\n        hash: tx.hash,\n        success: true,\n        amount: amount,\n        farmer: farmer,\n      };\n    } catch (error) {\n      console.error(\"Error rewarding farmer:\", error);\n      throw error;\n    }\n  }\n\n  async fundRewards(amount?: bigint) {\n    try {\n      const tx = await this.contract.fundRewards(amount || 0n);\n      await tx.wait();\n      return {\n        hash: tx.hash,\n        success: true,\n        amount: amount || 0n,\n      };\n    } catch (error) {\n      console.error(\"Error funding rewards:\", error);\n      throw error;\n    }\n  }\n\n  // Platform info\n  async getPlatformSettings() {\n    const [feeRate, interestRate, maxDuration, collateralRatio] =\n      await Promise.all([\n        this.contract.platformFeeRate(),\n        this.contract.defaultInterestRate(),\n        this.contract.maxLoanDuration(),\n        this.contract.minCollateralRatio(),\n      ]);\n\n    return {\n      feeRate: Number(feeRate),\n      interestRate: Number(interestRate),\n      maxDuration: Number(maxDuration),\n      collateralRatio: Number(collateralRatio),\n    };\n  }\n}\n\n// Server-side contract helper for owner operations\nexport function getServerContractHelper(): AgriYieldHelper {\n  // Use Hedera Testnet\n  const rpcUrl =\n    process.env.HEDERA_TESTNET_RPC_URL || \"https://testnet.hashio.io/api\";\n  const privateKey = process.env.HEDERA_TESTNET_PRIVATE_KEY;\n\n  if (!privateKey) {\n    throw new Error(\"HEDERA_TESTNET_PRIVATE_KEY not set in environment\");\n  }\n\n  const provider = new ethers.JsonRpcProvider(rpcUrl);\n  const signer = new ethers.Wallet(privateKey, provider);\n\n  return new AgriYieldHelper(signer);\n}\n\n// Export contract address for easy access\nexport { CONTRACT_ADDRESS as AGRIYIELD_CONTRACT_ADDRESS };\n"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AACA;;;AAGO,MAAM,mBAAmB,8CAA8C,yCAAyC;AAChH,MAAM,eAAe,0IAAiB,CAAC,GAAG;AA+G1C,SAAS,qBACd,QAAyC;IAEzC,OAAO,IAAI,0LAAM,CAAC,QAAQ,CAAC,kBAAkB,cAAc;AAC7D;AAGO,MAAM;IACH,SAA4B;IAEpC,YAAY,QAAyC,CAAE;QACrD,IAAI,CAAC,QAAQ,GAAG,qBAAqB;IACvC;IAEA,oBAAoB;IACpB,MAAM,eAAe,IAAY,EAAE,QAAgB,EAAE,aAAqB,EAAE;QAC1E,MAAM,KAAK,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAC3C,MACA,UACA;QAEF,OAAO,MAAM,GAAG,IAAI;IACtB;IAEA,MAAM,UAAU,OAAe,EAAE;QAC/B,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;IACrC;IAEA,MAAM,mBAAmB,YAAoB,EAAE;QAC7C,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;IAC9C;IAEA,2BAA2B;IAC3B,MAAM,iBACJ,QAAgB,EAChB,QAAgB,EAChB,YAAoB,EACpB,WAAmB,EACnB;QACA,IAAI;YACF,MAAM,KAAK,MAAM,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAC7C,UACA,UACA,cACA;YAEF,MAAM,UAAU,MAAM,GAAG,IAAI;YAC7B,OAAO;gBACL,MAAM,GAAG,IAAI;gBACb;gBACA,SAAS;YACX;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,gCAAgC;YAC9C,MAAM;QACR;IACF;IAEA,MAAM,gBAAgB,OAAe,EAAE;QACrC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC;IAC3C;IAEA,8BAA8B;IAC9B,MAAM,sBACJ,QAAgB,EAChB,cAAsB,EACtB,UAAkB,EAClB,WAAmB,EACnB;QACA,IAAI;YACF,QAAQ,GAAG,CAAC,mCAAmC;gBAC7C;gBACA;gBACA;gBACA;YACF;YAEA,MAAM,KAAK,MAAM,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAClD,UACA,gBACA,YACA;YAEF,MAAM,UAAU,MAAM,GAAG,IAAI;YAC7B,OAAO;gBACL,MAAM,GAAG,IAAI;gBACb;gBACA,SAAS;gBACT,cAAc,QAAQ,IAAI,CAAC,EAAE,EAAE,MAAM,gBAAgB;YACvD;QACF,EAAE,OAAO,OAAY;YACnB,QAAQ,KAAK,CAAC,sCAAsC;YACpD,OAAO;gBACL,SAAS;gBACT,OAAO,MAAM,OAAO;YACtB;QACF;IACF;IAEA,qBAAqB;IACrB,MAAM,YAAY,sBAA8B,EAAE,MAAc,EAAE;QAChE,IAAI;YACF,QAAQ,GAAG,CAAC,qCAAqC;gBAC/C;gBACA;gBACA,YAAY,OAAO;gBACnB,OAAO,OAAO,KAAK,CAAC;YACtB;YAEA,MAAM,KAAK,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CACxC,wBACA;YAEF,MAAM,UAAU,MAAM,GAAG,IAAI;YAC7B,OAAO;gBACL,MAAM,GAAG,IAAI;gBACb;gBACA,SAAS;gBACT,QAAQ,QAAQ,IAAI,CAAC,EAAE,EAAE,MAAM,UAAU;YAC3C;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM;QACR;IACF;IAEA,MAAM,UAAU,MAAc,EAAE,MAAc,EAAE;QAC9C,IAAI;YACF,MAAM,KAAK,MAAM,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ;gBAAE,OAAO;YAAO;YACjE,MAAM,UAAU,MAAM,GAAG,IAAI;YAC7B,OAAO;gBACL,MAAM,GAAG,IAAI;gBACb;gBACA,SAAS;gBACT,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,wBAAwB;YACtC,MAAM;QACR;IACF;IAEA,MAAM,QAAQ,MAAc,EAAE;QAC5B,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;IACnC;IAEA,MAAM,eAAe,MAAc,EAAE;QACnC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;IAC5C;IAEA,0BAA0B;IAC1B,MAAM,oBACJ,OAAe,EACf,SAAiB,EACjB,QAAgB,EAChB,KAAa,EACb;QACA,MAAM,KAAK,MAAM,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAChD,SACA,WACA,UACA;QAEF,OAAO,MAAM,GAAG,IAAI;IACtB;IAEA,MAAM,qBAAqB,OAAe,EAAE;QAC1C,IAAI;YACF,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;QAClD,EAAE,OAAO,OAAO;YACd,QAAQ,GAAG,CAAC;YACZ,OAAO,EAAE;QACX;IACF;IAEA,iBAAiB;IACjB,MAAM,qBAAqB,MAAc,EAAE;QACzC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC;IAClD;IAEA,MAAM,gBAAgB,MAAc,EAAE;QACpC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC;IAC7C;IAEA,MAAM,eAAe,MAAc,EAAE;QACnC,OAAO,MAAM,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC;IAC5C;IAEA,gBAAgB;IAChB,MAAM,aAAa,MAAc,EAAE,MAAc,EAAE;QACjD,IAAI;YACF,MAAM,KAAK,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ;YACpD,MAAM,GAAG,IAAI;YACb,OAAO;gBACL,MAAM,GAAG,IAAI;gBACb,SAAS;gBACT,QAAQ;gBACR,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,2BAA2B;YACzC,MAAM;QACR;IACF;IAEA,MAAM,YAAY,MAAe,EAAE;QACjC,IAAI;YACF,MAAM,KAAK,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,UAAU,EAAE;YACvD,MAAM,GAAG,IAAI;YACb,OAAO;gBACL,MAAM,GAAG,IAAI;gBACb,SAAS;gBACT,QAAQ,UAAU,EAAE;YACtB;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM;QACR;IACF;IAEA,gBAAgB;IAChB,MAAM,sBAAsB;QAC1B,MAAM,CAAC,SAAS,cAAc,aAAa,gBAAgB,GACzD,MAAM,QAAQ,GAAG,CAAC;YAChB,IAAI,CAAC,QAAQ,CAAC,eAAe;YAC7B,IAAI,CAAC,QAAQ,CAAC,mBAAmB;YACjC,IAAI,CAAC,QAAQ,CAAC,eAAe;YAC7B,IAAI,CAAC,QAAQ,CAAC,kBAAkB;SACjC;QAEH,OAAO;YACL,SAAS,OAAO;YAChB,cAAc,OAAO;YACrB,aAAa,OAAO;YACpB,iBAAiB,OAAO;QAC1B;IACF;AACF;AAGO,SAAS;IACd,qBAAqB;IACrB,MAAM,SACJ,QAAQ,GAAG,CAAC,sBAAsB,IAAI;IACxC,MAAM,aAAa,QAAQ,GAAG,CAAC,0BAA0B;IAEzD,IAAI,CAAC,YAAY;QACf,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,WAAW,IAAI,0LAAM,CAAC,eAAe,CAAC;IAC5C,MAAM,SAAS,IAAI,0LAAM,CAAC,MAAM,CAAC,YAAY;IAE7C,OAAO,IAAI,gBAAgB;AAC7B","debugId":null}},
    {"offset": {"line": 802, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-card text-card-foreground\",\n        destructive:\n          \"text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Alert({\n  className,\n  variant,\n  ...props\n}: React.ComponentProps<\"div\"> & VariantProps<typeof alertVariants>) {\n  return (\n    <div\n      data-slot=\"alert\"\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  )\n}\n\nfunction AlertTitle({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-title\"\n      className={cn(\n        \"col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction AlertDescription({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"alert-description\"\n      className={cn(\n        \"text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,IAAA,uKAAG,EACvB,qOACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,SAAS,MAAM,EACb,SAAS,EACT,OAAO,EACP,GAAG,OAC8D;IACjE,qBACE,8OAAC;QACC,aAAU;QACV,MAAK;QACL,WAAW,IAAA,kHAAE,EAAC,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,WAAW,EAAE,SAAS,EAAE,GAAG,OAAoC;IACtE,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,+DACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,iBAAiB,EACxB,SAAS,EACT,GAAG,OACyB;IAC5B,qBACE,8OAAC;QACC,aAAU;QACV,WAAW,IAAA,kHAAE,EACX,kGACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 868, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/NetworkSetup.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { ethers } from \"ethers\";\nimport { AlertTriangle, CheckCircle, Copy } from \"lucide-react\";\nimport { toast } from \"sonner\";\n\nexport default function NetworkSetup() {\n  const [networkStatus, setNetworkStatus] = useState<{\n    connected: boolean;\n    chainId?: string;\n    balance?: string;\n    address?: string;\n    error?: string;\n  }>({ connected: false });\n\n  const checkNetwork = async () => {\n    try {\n      if (!window.ethereum) {\n        setNetworkStatus({ connected: false, error: \"MetaMask not installed\" });\n        return;\n      }\n\n      const provider = new ethers.BrowserProvider(window.ethereum);\n      const network = await provider.getNetwork();\n      const signer = await provider.getSigner();\n      const address = await signer.getAddress();\n      const balance = await provider.getBalance(address);\n\n      setNetworkStatus({\n        connected: true,\n        chainId: network.chainId.toString(),\n        balance: ethers.formatEther(balance),\n        address,\n      });\n    } catch (error: any) {\n      setNetworkStatus({ connected: false, error: error.message });\n    }\n  };\n\n  const addHederaTestnet = async () => {\n    try {\n      await window.ethereum?.request({\n        method: \"wallet_addEthereumChain\",\n        params: [\n          {\n            chainId: \"0x128\", // 296 in hex (Hedera Testnet)\n            chainName: \"Hedera Testnet\",\n            nativeCurrency: {\n              name: \"HBAR\",\n              symbol: \"HBAR\",\n              decimals: 18,\n            },\n            rpcUrls: [\"https://testnet.hashio.io/api\"],\n            blockExplorerUrls: [\"https://hashscan.io/testnet\"],\n          },\n        ],\n      });\n      toast.success(\"Hedera Testnet network added to MetaMask!\");\n      checkNetwork();\n    } catch (error: any) {\n      toast.error(\"Failed to add network: \" + error.message);\n    }\n  };\n\n  const switchToHedera = async () => {\n    try {\n      await window.ethereum?.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: \"0x128\" }], // 296 in hex (Hedera Testnet)\n      });\n      toast.success(\"Switched to Hedera Testnet network!\");\n      checkNetwork();\n    } catch (error: any) {\n      if (error.code === 4902) {\n        // Network not added yet\n        addHederaTestnet();\n      } else {\n        toast.error(\"Failed to switch network: \" + error.message);\n      }\n    }\n  };\n\n  const copyTestAccount = () => {\n    // This should be your actual Hedera Testnet account private key\n    const message =\n      \"Please use your own Hedera Testnet account private key. You can get testnet HBAR from the Hedera faucet.\";\n    navigator.clipboard.writeText(message);\n    toast.success(\"Instructions copied to clipboard!\");\n  };\n\n  useEffect(() => {\n    checkNetwork();\n  }, []);\n\n  const isCorrectNetwork = networkStatus.chainId === \"296\"; // Hedera Testnet\n  const hasBalance = parseFloat(networkStatus.balance || \"0\") > 0;\n\n  return (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          {isCorrectNetwork && hasBalance ? (\n            <CheckCircle className=\"h-5 w-5 text-green-600\" />\n          ) : (\n            <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\n          )}\n          Blockchain Network Setup\n        </CardTitle>\n        <CardDescription>Configure MetaMask for Hedera Testnet</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {networkStatus.error && (\n          <Alert>\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>{networkStatus.error}</AlertDescription>\n          </Alert>\n        )}\n\n        {networkStatus.connected && (\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-300\">Network:</p>\n              <p className=\"font-semibold\">\n                Chain ID {networkStatus.chainId}\n                {isCorrectNetwork ? \" ✅\" : \" ❌\"}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-gray-600 dark:text-gray-300\">Balance:</p>\n              <p className=\"font-semibold\">\n                {networkStatus.balance} ETH\n                {hasBalance ? \" ✅\" : \" ❌\"}\n              </p>\n            </div>\n          </div>\n        )}\n\n        <div className=\"space-y-2\">\n          {!isCorrectNetwork && (\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\">\n                You need to connect to Hedera Testnet (Chain ID: 296)\n              </p>\n              <Button onClick={switchToHedera} size=\"sm\">\n                Add/Switch to Hedera Testnet\n              </Button>\n            </div>\n          )}\n\n          {isCorrectNetwork && !hasBalance && (\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-2\">\n                You need HBAR to pay for transactions. Get testnet HBAR from the\n                faucet:\n              </p>\n              <div className=\"flex gap-2\">\n                <Button\n                  onClick={() =>\n                    window.open(\"https://portal.hedera.com/faucet\", \"_blank\")\n                  }\n                  size=\"sm\"\n                  variant=\"outline\"\n                >\n                  Get Testnet HBAR\n                </Button>\n                <Button onClick={copyTestAccount} size=\"sm\" variant=\"outline\">\n                  <Copy className=\"h-4 w-4 mr-2\" />\n                  Copy Instructions\n                </Button>\n              </div>\n              <p className=\"text-xs text-gray-500 mt-1\">\n                Use the Hedera faucet to get testnet HBAR\n              </p>\n            </div>\n          )}\n\n          {isCorrectNetwork && hasBalance && (\n            <Alert>\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                ✅ Ready for blockchain transactions! You're connected to Hedera\n                Testnet with sufficient HBAR.\n              </AlertDescription>\n            </Alert>\n          )}\n        </div>\n\n        <Button onClick={checkNetwork} variant=\"outline\" size=\"sm\">\n          Refresh Status\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1258, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/app/lending/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { useWalletStore } from \"@/lib/wallet-provider\";\nimport { formatCurrency, formatDate } from \"@/lib/utils\";\nimport { AgriYieldHelper } from \"@/lib/contract\";\nimport { toast } from \"sonner\";\nimport { ethers } from \"ethers\";\nimport NetworkSetup from \"@/components/NetworkSetup\";\nimport {\n  DollarSign,\n  ArrowLeft,\n  Shield,\n  TrendingUp,\n  CheckCircle,\n  AlertTriangle,\n  CreditCard,\n  Coins,\n  ExternalLink,\n  Lock,\n  Unlock,\n} from \"lucide-react\";\n\ninterface YieldPrediction {\n  id: string;\n  cropType: string;\n  predictedYield: number;\n  riskLevel: number;\n  confidence: number;\n  createdAt: string;\n}\n\ninterface Loan {\n  id: string;\n  blockchainLoanId?: string;\n  amount: number;\n  interestRate: number;\n  status: \"pending\" | \"active\" | \"completed\" | \"defaulted\";\n  collateral: string[];\n  collateralPredictionId?: string;\n  startDate: string;\n  endDate: string;\n  repaidAmount: number;\n  blockchainTxHash?: string;\n  createdAt: string;\n}\n\ninterface HarvestToken {\n  id: string;\n  yieldPredictionId?: string;\n  cropType: string;\n  amount: number;\n  tokenizedAmount: number;\n  qualityGrade?: string;\n  status: \"pending\" | \"tokenized\" | \"sold\" | \"burned\" | \"locked\";\n  isLocked: boolean;\n  qrCode: string;\n  metadataURI?: string;\n  blockchainTokenId?: string;\n  blockchainTxHash?: string;\n  createdAt: string;\n}\n\nexport default function Lending() {\n  const router = useRouter();\n  const { isConnected, account } = useWalletStore();\n\n  const [yieldPredictions, setYieldPredictions] = useState<YieldPrediction[]>(\n    []\n  );\n  const [loans, setLoans] = useState<Loan[]>([]);\n  const [harvestTokens, setHarvestTokens] = useState<HarvestToken[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Tokenization form state\n  const [selectedPrediction, setSelectedPrediction] = useState(\"\");\n  const [harvestAmount, setHarvestAmount] = useState(\"\");\n  const [qualityGrade, setQualityGrade] = useState(\"A\");\n  const [isTokenizing, setIsTokenizing] = useState(false);\n\n  // Loan form state\n  const [selectedToken, setSelectedToken] = useState(\"\");\n  const [loanAmount, setLoanAmount] = useState(\"\");\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  // Repayment state\n  const [repayAmount, setRepayAmount] = useState(\"\");\n  const [isRepaying, setIsRepaying] = useState(false);\n  const [repayModalOpen, setRepayModalOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isConnected) {\n      router.push(\"/\");\n    } else {\n      fetchData();\n    }\n  }, [isConnected, router, account]);\n\n  const fetchData = async () => {\n    if (!account?.address) return;\n\n    setIsLoading(true);\n    try {\n      // Fetch yield predictions\n      const predictionsResponse = await fetch(\n        `/api/yield-predictions?walletAddress=${account.address}`\n      );\n      if (predictionsResponse.ok) {\n        const predictionsResult = await predictionsResponse.json();\n        setYieldPredictions(predictionsResult.data || []);\n      }\n\n      // Fetch loans\n      const loansResponse = await fetch(\n        `/api/loans?walletAddress=${account.address}`\n      );\n      if (loansResponse.ok) {\n        const loansResult = await loansResponse.json();\n        setLoans(loansResult.data || []);\n      }\n\n      // Fetch harvest tokens\n      const tokensResponse = await fetch(\n        `/api/harvest-tokens?walletAddress=${account.address}`\n      );\n      if (tokensResponse.ok) {\n        const tokensResult = await tokensResponse.json();\n        setHarvestTokens(tokensResult.data || []);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      toast.error(\"Failed to load data\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleTokenizeHarvest = async () => {\n    if (!selectedPrediction || !harvestAmount) {\n      toast.error(\"Please select a yield prediction and enter harvest amount\");\n      return;\n    }\n\n    if (!account?.address) {\n      toast.error(\"Wallet not connected\");\n      return;\n    }\n\n    setIsTokenizing(true);\n    try {\n      const prediction = yieldPredictions.find(\n        (p) => p.id === selectedPrediction\n      );\n      if (!prediction) {\n        throw new Error(\"Selected prediction not found\");\n      }\n\n      const response = await fetch(\"/api/harvest-tokens\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          walletAddress: account.address,\n          yieldPredictionId: selectedPrediction,\n          cropType: prediction.cropType,\n          amount: harvestAmount,\n          qualityGrade: qualityGrade,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to tokenize harvest\");\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        console.log(\"Database token created successfully:\", result.data);\n\n        // Now handle blockchain interaction on client side\n        try {\n          console.log(\"Starting blockchain interaction...\");\n\n          // Check if wallet is connected\n          if (!window.ethereum) {\n            throw new Error(\n              \"No wallet detected. Please install MetaMask or connect your wallet.\"\n            );\n          }\n\n          // Connect to local Hardhat network for real blockchain interaction\n          console.log(\"Connecting to local blockchain network...\");\n\n          try {\n            const provider = new ethers.BrowserProvider(window.ethereum!);\n            console.log(\"Provider created successfully\");\n\n            // Check network\n            const network = await provider.getNetwork();\n            console.log(\"Connected to network:\", {\n              name: network.name,\n              chainId: network.chainId.toString(),\n            });\n\n            // Check if we're on the correct network (Hedera Testnet = 296)\n            if (network.chainId !== 296n) {\n              throw new Error(\n                `Wrong network! Please connect to Hedera Testnet (Chain ID: 296). Currently on Chain ID: ${network.chainId}`\n              );\n            }\n\n            const signer = await provider.getSigner();\n            const signerAddress = await signer.getAddress();\n            console.log(\"Signer address:\", signerAddress);\n\n            // Check balance\n            const balance = await provider.getBalance(signerAddress);\n            console.log(\"Signer balance:\", ethers.formatEther(balance), \"ETH\");\n\n            if (balance === 0n) {\n              throw new Error(\n                \"No ETH balance! Please import a Hardhat test account with ETH.\"\n              );\n            }\n\n            const contractHelper = new AgriYieldHelper(signer);\n            console.log(\"Contract helper created successfully\");\n\n            // Mint harvest token on smart contract\n            const quantity = Math.floor(parseFloat(harvestAmount) * 100); // Convert to kg (scaled by 100)\n            console.log(\"Minting token with params:\", {\n              cropType: prediction.cropType,\n              quantity,\n              qualityGrade,\n              metadataURI: result.data.metadataURI,\n            });\n\n            // Add timeout to prevent hanging\n            const blockchainPromise = contractHelper.mintHarvestToken(\n              prediction.cropType,\n              quantity,\n              qualityGrade,\n              result.data.metadataURI\n            );\n\n            const timeoutPromise = new Promise((_, reject) =>\n              setTimeout(\n                () =>\n                  reject(\n                    new Error(\"Blockchain transaction timeout after 30 seconds\")\n                  ),\n                30000 // Reduced to 30 seconds\n              )\n            );\n\n            console.log(\"Starting blockchain transaction...\");\n            const blockchainResult = (await Promise.race([\n              blockchainPromise,\n              timeoutPromise,\n            ])) as any;\n\n            console.log(\"Blockchain result:\", blockchainResult);\n\n            if (blockchainResult.success) {\n              // Update the token with blockchain data\n              const updatedToken = {\n                ...result.data,\n                status: \"tokenized\",\n                blockchainTokenId:\n                  blockchainResult.receipt?.logs[0]?.args?.tokenId?.toString(),\n                blockchainTxHash: blockchainResult.hash,\n              };\n\n              // Add the new token to the list\n              setHarvestTokens((prev) => [updatedToken, ...prev]);\n              toast.success(\"Harvest tokenized successfully!\");\n\n              // Reset form\n              setSelectedPrediction(\"\");\n              setHarvestAmount(\"\");\n              setQualityGrade(\"A\");\n            } else {\n              throw new Error(\"Blockchain transaction failed\");\n            }\n          } catch (providerError) {\n            console.error(\"Provider/Network error:\", providerError);\n            throw providerError;\n          }\n        } catch (blockchainError: any) {\n          console.error(\"Blockchain error:\", blockchainError);\n          toast.error(\n            `Token created in database but blockchain transaction failed: ${blockchainError.message}`\n          );\n\n          // Still add the token to the list with pending status\n          setHarvestTokens((prev) => [result.data, ...prev]);\n        }\n      } else {\n        throw new Error(result.error || \"Failed to tokenize harvest\");\n      }\n    } catch (error) {\n      console.error(\"Failed to tokenize harvest:\", error);\n      toast.error(\"Failed to tokenize harvest. Please try again.\");\n    } finally {\n      setIsTokenizing(false);\n    }\n  };\n\n  const handleRequestLoan = async () => {\n    if (!selectedToken || !loanAmount) {\n      toast.error(\"Please select a harvest token and enter loan amount\");\n      return;\n    }\n\n    if (!account?.address) {\n      toast.error(\"Wallet not connected\");\n      return;\n    }\n\n    setIsProcessing(true);\n    try {\n      const token = harvestTokens.find((t) => t.id === selectedToken);\n      if (!token) {\n        throw new Error(\"Selected token not found\");\n      }\n\n      // Find the associated yield prediction\n      const prediction = yieldPredictions.find(\n        (p) => p.id === token.yieldPredictionId\n      );\n      if (!prediction) {\n        throw new Error(\"Associated yield prediction not found\");\n      }\n\n      const response = await fetch(\"/api/loans\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          walletAddress: account.address,\n          collateralTokenId: selectedToken,\n          amount: loanAmount,\n          collateralPredictionId: prediction.id,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        console.error(\"Loan request failed:\", {\n          status: response.status,\n          statusText: response.statusText,\n          error: errorData,\n        });\n        throw new Error(\n          `Failed to request loan: ${errorData.error || response.statusText}`\n        );\n      }\n\n      const result = await response.json();\n      console.log(\"Database result:\", result);\n\n      if (result.success) {\n        // Now handle blockchain interaction on client side\n        try {\n          const provider = new ethers.BrowserProvider(window.ethereum!);\n          const signer = await provider.getSigner();\n          const contractHelper = new AgriYieldHelper(signer);\n\n          // Request loan from smart contract\n          console.log(\"Loan amount (string):\", loanAmount);\n          const loanAmountWei = ethers.parseEther(loanAmount);\n          console.log(\"Loan amount (wei):\", loanAmountWei);\n\n          // For now, we need to create the prediction in the smart contract first\n          // Let's create it and then use its ID\n          console.log(\"Creating yield prediction in smart contract...\");\n\n          // Create prediction in smart contract\n          const createResult = await contractHelper.createYieldPrediction(\n            prediction.cropType || \"Wheat\",\n            Math.floor((prediction.predictedYield || 100) * 100), // Convert to scaled value\n            Math.floor((prediction.confidence || 80) * 100), // Convert to scaled value\n            Math.floor(Date.now() / 1000) + 30 * 24 * 60 * 60 // 30 days from now\n          );\n\n          console.log(\"Prediction created:\", createResult);\n\n          if (!createResult.success) {\n            throw new Error(\n              `Failed to create prediction: ${createResult.error}`\n            );\n          }\n\n          const blockchainPredictionId = createResult.predictionId || 1;\n\n          const blockchainResult = await contractHelper.requestLoan(\n            blockchainPredictionId,\n            loanAmountWei\n          );\n\n          console.log(\"Blockchain result:\", blockchainResult);\n\n          if (blockchainResult.success) {\n            // Update the loan with blockchain data\n            const updatedLoan = {\n              ...result.data,\n              status: \"active\" as const,\n              blockchainLoanId: blockchainResult.loanId?.toString(),\n              blockchainTxHash: blockchainResult.hash,\n            };\n\n            console.log(\"Updated loan:\", updatedLoan);\n\n            // TODO: Update loan status in database via API call\n            // For now, just update local state\n\n            // Add the new loan to the list\n            setLoans((prev) => [updatedLoan, ...prev]);\n            toast.success(\n              `Loan of ${formatCurrency(parseFloat(loanAmount))} approved!`\n            );\n\n            // Reset form\n            setSelectedToken(\"\");\n            setLoanAmount(\"\");\n          } else {\n            throw new Error(\n              `Blockchain transaction failed: ${blockchainResult.error}`\n            );\n          }\n        } catch (blockchainError) {\n          console.error(\"Blockchain error:\", blockchainError);\n          toast.error(\n            \"Loan created in database but blockchain transaction failed\"\n          );\n\n          // Still add the loan to the list with pending status\n          setLoans((prev) => [result.data, ...prev]);\n        }\n      } else {\n        throw new Error(result.error || \"Failed to request loan\");\n      }\n    } catch (error) {\n      console.error(\"Failed to request loan:\", error);\n      toast.error(\"Failed to request loan. Please try again.\");\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  const handleRepayLoan = async (loanId: string) => {\n    if (!repayAmount) {\n      toast.error(\"Please enter repayment amount\");\n      return;\n    }\n\n    if (!account?.address) {\n      toast.error(\"Wallet not connected\");\n      return;\n    }\n\n    setIsRepaying(true);\n    try {\n      const response = await fetch(`/api/loans/${loanId}/repay`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          walletAddress: account.address,\n          amount: repayAmount,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to repay loan\");\n      }\n\n      const result = await response.json();\n\n      if (result.success) {\n        // Now handle blockchain interaction on client side\n        try {\n          const provider = new ethers.BrowserProvider(window.ethereum!);\n          const signer = await provider.getSigner();\n          const contractHelper = new AgriYieldHelper(signer);\n\n          // Repay loan on smart contract\n          const repayAmountWei = ethers.parseEther(repayAmount);\n          const blockchainResult = await contractHelper.repayLoan(\n            parseInt(activeLoan?.blockchainLoanId || \"0\"),\n            repayAmountWei\n          );\n\n          if (blockchainResult.success) {\n            // Update the loan in the list with blockchain data\n            setLoans((prev) =>\n              prev.map((loan) =>\n                loan.id === loanId\n                  ? {\n                      ...loan,\n                      repaidAmount: result.data.repaidAmount,\n                      status: result.data.status,\n                      blockchainTxHash: blockchainResult.hash,\n                    }\n                  : loan\n              )\n            );\n            toast.success(\"Loan repayment successful!\");\n            setRepayAmount(\"\");\n            setRepayModalOpen(false);\n          } else {\n            throw new Error(\"Blockchain transaction failed\");\n          }\n        } catch (blockchainError) {\n          console.error(\"Blockchain error:\", blockchainError);\n          toast.error(\n            \"Repayment recorded in database but blockchain transaction failed\"\n          );\n\n          // Still update the loan in the list\n          setLoans((prev) =>\n            prev.map((loan) =>\n              loan.id === loanId\n                ? {\n                    ...loan,\n                    repaidAmount: result.data.repaidAmount,\n                    status: result.data.status,\n                  }\n                : loan\n            )\n          );\n        }\n      } else {\n        throw new Error(result.error || \"Failed to repay loan\");\n      }\n    } catch (error) {\n      console.error(\"Failed to repay loan:\", error);\n      toast.error(\"Failed to repay loan. Please try again.\");\n    } finally {\n      setIsRepaying(false);\n    }\n  };\n\n  const activeLoan = loans.find((loan) => loan.status === \"active\");\n  const availableCollateral = harvestTokens.filter(\n    (token) => token.status === \"tokenized\" && !token.isLocked\n  );\n\n  // Debug logging (can be removed after testing)\n  // console.log(\"Debug - Harvest tokens:\", harvestTokens);\n  // console.log(\"Debug - Available collateral:\", availableCollateral);\n\n  const totalCollateralValue = availableCollateral.reduce(\n    (sum, token) => sum + token.tokenizedAmount,\n    0\n  );\n\n  const maxLoanAmount = totalCollateralValue * 0.7; // 70% of collateral value\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-green-50 to-blue-50 p-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex items-center justify-center h-64\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-green-600 mx-auto mb-4\"></div>\n              <p className=\"text-gray-600\">Loading lending data...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isConnected) {\n    return null;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center gap-4\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => router.push(\"/dashboard\")}\n        >\n          <ArrowLeft className=\"h-4 w-4 mr-2\" />\n          Back\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">\n            Lending & Tokenization\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Access loans using your harvest as collateral\n          </p>\n        </div>\n      </div>\n\n      {/* Network Setup */}\n      <NetworkSetup />\n\n      {/* Quick Actions for Loans */}\n      {loans.length > 0 && (\n        <Card className=\"dashboard-card border-l-4 border-l-green-500\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" />\n              Loan Quick Actions\n            </CardTitle>\n            <CardDescription>\n              Manage your loans and make payments\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {loans.map((loan) => (\n                <div\n                  key={loan.id}\n                  className={`p-4 rounded-lg border-2 ${\n                    loan.status === \"active\"\n                      ? \"border-green-200 bg-green-50 dark:bg-green-950 dark:border-green-800\"\n                      : loan.status === \"completed\"\n                      ? \"border-blue-200 bg-blue-50 dark:bg-blue-950 dark:border-blue-800\"\n                      : \"border-yellow-200 bg-yellow-50 dark:bg-yellow-950 dark:border-yellow-800\"\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h3 className=\"font-semibold\">\n                      {formatCurrency(loan.amount)}\n                    </h3>\n                    <Badge\n                      variant={\n                        loan.status === \"active\"\n                          ? \"default\"\n                          : loan.status === \"completed\"\n                          ? \"secondary\"\n                          : loan.status === \"defaulted\"\n                          ? \"destructive\"\n                          : \"outline\"\n                      }\n                    >\n                      {loan.status}\n                    </Badge>\n                  </div>\n                  <div className=\"text-sm text-gray-600 dark:text-gray-300 mb-3\">\n                    <p>Repaid: {formatCurrency(loan.repaidAmount || 0)}</p>\n                    <p>\n                      Remaining:{\" \"}\n                      {formatCurrency(\n                        (loan.amount || 0) - (loan.repaidAmount || 0)\n                      )}\n                    </p>\n                  </div>\n\n                  {(loan.status === \"active\" || loan.status === \"pending\") && (\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button\n                          size=\"sm\"\n                          className=\"w-full bg-green-600 hover:bg-green-700\"\n                        >\n                          <DollarSign className=\"h-3 w-3 mr-1\" />\n                          Make Payment\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent className=\"sm:max-w-[425px]\">\n                        <DialogHeader>\n                          <DialogTitle>Repay Loan</DialogTitle>\n                          <DialogDescription>\n                            Make a payment towards your{\" \"}\n                            {formatCurrency(loan.amount)} loan.\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                                Total Loan Amount\n                              </p>\n                              <p className=\"font-semibold\">\n                                {formatCurrency(loan.amount)}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                                Remaining Balance\n                              </p>\n                              <p className=\"font-semibold text-red-600\">\n                                {formatCurrency(\n                                  (loan.amount || 0) - (loan.repaidAmount || 0)\n                                )}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"space-y-2\">\n                            <label\n                              htmlFor=\"repay-amount\"\n                              className=\"text-sm font-medium\"\n                            >\n                              Payment Amount (USD)\n                            </label>\n                            <Input\n                              id=\"repay-amount\"\n                              type=\"number\"\n                              placeholder=\"Enter amount to repay\"\n                              value={repayAmount}\n                              onChange={(e) => setRepayAmount(e.target.value)}\n                              max={loan.amount - (loan.repaidAmount || 0)}\n                              min=\"0.01\"\n                              step=\"0.01\"\n                            />\n                            <p className=\"text-xs text-gray-500\">\n                              Maximum:{\" \"}\n                              {formatCurrency(\n                                (loan.amount || 0) - (loan.repaidAmount || 0)\n                              )}\n                            </p>\n                          </div>\n                        </div>\n                        <DialogFooter>\n                          <Button variant=\"outline\" disabled={isRepaying}>\n                            Cancel\n                          </Button>\n                          <Button\n                            onClick={() => handleRepayLoan(loan.id)}\n                            disabled={\n                              isRepaying ||\n                              !repayAmount ||\n                              parseFloat(repayAmount) <= 0\n                            }\n                            className=\"bg-green-600 hover:bg-green-700\"\n                          >\n                            {isRepaying ? (\n                              <>\n                                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                                Processing...\n                              </>\n                            ) : (\n                              <>\n                                <DollarSign className=\"h-4 w-4 mr-2\" />\n                                Pay{\" \"}\n                                {formatCurrency(parseFloat(repayAmount || \"0\"))}\n                              </>\n                            )}\n                          </Button>\n                        </DialogFooter>\n                      </DialogContent>\n                    </Dialog>\n                  )}\n\n                  {loan.status === \"completed\" && (\n                    <Button\n                      size=\"sm\"\n                      className=\"w-full\"\n                      variant=\"outline\"\n                      disabled\n                    >\n                      ✅ Fully Paid\n                    </Button>\n                  )}\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Active Loan Status */}\n      {activeLoan && (\n        <Card className=\"dashboard-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              Active Loan\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div>\n                  <h3 className=\"font-semibold text-lg\">\n                    {formatCurrency(activeLoan.amount)}\n                  </h3>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                    Interest Rate: {activeLoan.interestRate}% APR\n                  </p>\n                </div>\n                <Badge variant=\"default\">Active</Badge>\n              </div>\n              <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-300\">Start Date</p>\n                  <p className=\"font-semibold\">\n                    {activeLoan.startDate\n                      ? formatDate(activeLoan.startDate)\n                      : \"N/A\"}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-300\">Due Date</p>\n                  <p className=\"font-semibold\">\n                    {activeLoan.endDate\n                      ? formatDate(activeLoan.endDate)\n                      : \"N/A\"}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-300\">\n                    Repaid Amount\n                  </p>\n                  <p className=\"font-semibold\">\n                    {formatCurrency(activeLoan.repaidAmount || 0)}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-gray-600 dark:text-gray-300\">Remaining</p>\n                  <p className=\"font-semibold\">\n                    {formatCurrency(\n                      (activeLoan.amount || 0) - (activeLoan.repaidAmount || 0)\n                    )}\n                  </p>\n                </div>\n              </div>\n\n              {/* Repayment Section */}\n              <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-semibold\">Loan Management</h4>\n                  <Dialog\n                    open={repayModalOpen}\n                    onOpenChange={setRepayModalOpen}\n                  >\n                    <DialogTrigger asChild>\n                      <Button className=\"bg-green-600 hover:bg-green-700\">\n                        <DollarSign className=\"h-4 w-4 mr-2\" />\n                        Make Payment\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-[425px]\">\n                      <DialogHeader>\n                        <DialogTitle>Repay Loan</DialogTitle>\n                        <DialogDescription>\n                          Make a payment towards your loan. You can pay the full\n                          amount or make a partial payment.\n                        </DialogDescription>\n                      </DialogHeader>\n                      <div className=\"grid gap-4 py-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                              Total Loan Amount\n                            </p>\n                            <p className=\"font-semibold\">\n                              {formatCurrency(activeLoan.amount)}\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                              Remaining Balance\n                            </p>\n                            <p className=\"font-semibold text-red-600\">\n                              {formatCurrency(\n                                (activeLoan.amount || 0) -\n                                  (activeLoan.repaidAmount || 0)\n                              )}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <label\n                            htmlFor=\"repay-amount\"\n                            className=\"text-sm font-medium\"\n                          >\n                            Payment Amount (USD)\n                          </label>\n                          <Input\n                            id=\"repay-amount\"\n                            type=\"number\"\n                            placeholder=\"Enter amount to repay\"\n                            value={repayAmount}\n                            onChange={(e) => setRepayAmount(e.target.value)}\n                            max={\n                              activeLoan.amount - (activeLoan.repaidAmount || 0)\n                            }\n                            min=\"0.01\"\n                            step=\"0.01\"\n                          />\n                          <p className=\"text-xs text-gray-500\">\n                            Maximum:{\" \"}\n                            {formatCurrency(\n                              (activeLoan.amount || 0) -\n                                (activeLoan.repaidAmount || 0)\n                            )}\n                          </p>\n                        </div>\n                      </div>\n                      <DialogFooter>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => setRepayModalOpen(false)}\n                          disabled={isRepaying}\n                        >\n                          Cancel\n                        </Button>\n                        <Button\n                          onClick={() => handleRepayLoan(activeLoan.id)}\n                          disabled={\n                            isRepaying ||\n                            !repayAmount ||\n                            parseFloat(repayAmount) <= 0\n                          }\n                          className=\"bg-green-600 hover:bg-green-700\"\n                        >\n                          {isRepaying ? (\n                            <>\n                              <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                              Processing...\n                            </>\n                          ) : (\n                            <>\n                              <DollarSign className=\"h-4 w-4 mr-2\" />\n                              Pay{\" \"}\n                              {formatCurrency(parseFloat(repayAmount || \"0\"))}\n                            </>\n                          )}\n                        </Button>\n                      </DialogFooter>\n                    </DialogContent>\n                  </Dialog>\n                </div>\n                {activeLoan.blockchainTxHash && (\n                  <div className=\"mt-3\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() =>\n                        window.open(\n                          `https://hashscan.io/testnet/transaction/${activeLoan.blockchainTxHash}`,\n                          \"_blank\"\n                        )\n                      }\n                    >\n                      <ExternalLink className=\"h-3 w-3 mr-1\" />\n                      View Loan on HashScan\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Tokenize Harvest */}\n        <Card className=\"dashboard-card\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Coins className=\"h-5 w-5\" />\n              Tokenize Your Harvest\n            </CardTitle>\n            <CardDescription>\n              Convert your harvest into tradeable tokens for collateral\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <label className=\"block text-sm font-medium\">\n                Select Yield Prediction\n              </label>\n              <Select\n                value={selectedPrediction}\n                onValueChange={setSelectedPrediction}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose prediction to tokenize\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {yieldPredictions.map((prediction) => (\n                    <SelectItem key={prediction.id} value={prediction.id}>\n                      {prediction.cropType} - {prediction.predictedYield} tons\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <label className=\"block text-sm font-medium\">\n                  Harvest Amount (tons)\n                </label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"Enter amount\"\n                  value={harvestAmount}\n                  onChange={(e) => setHarvestAmount(e.target.value)}\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <label className=\"block text-sm font-medium\">\n                  Quality Grade\n                </label>\n                <Select value={qualityGrade} onValueChange={setQualityGrade}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"A\">Grade A (Premium)</SelectItem>\n                    <SelectItem value=\"B\">Grade B (Standard)</SelectItem>\n                    <SelectItem value=\"C\">Grade C (Basic)</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {selectedPrediction && (\n              <div className=\"p-3 bg-green-50 dark:bg-green-950 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm font-medium\">\n                    Yield Prediction Details\n                  </span>\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                  Predicted yield:{\" \"}\n                  {\n                    yieldPredictions.find((p) => p.id === selectedPrediction)\n                      ?.predictedYield\n                  }{\" \"}\n                  tons\n                  <br />\n                  Confidence:{\" \"}\n                  {(\n                    (yieldPredictions.find((p) => p.id === selectedPrediction)\n                      ?.confidence || 0) * 100\n                  ).toFixed(1)}\n                  %\n                </p>\n              </div>\n            )}\n\n            <Button\n              className=\"w-full btn-primary\"\n              onClick={handleTokenizeHarvest}\n              disabled={isTokenizing || !selectedPrediction || !harvestAmount}\n            >\n              {isTokenizing ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Tokenizing...\n                </>\n              ) : (\n                <>\n                  <Coins className=\"mr-2 h-4 w-4\" />\n                  Tokenize Harvest\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Loan Application */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <DollarSign className=\"h-5 w-5\" />\n              Apply for Loan\n            </CardTitle>\n            <CardDescription>\n              Request a loan using your tokenized harvest as collateral\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <Shield className=\"h-4 w-4 text-blue-600\" />\n                <span className=\"text-sm font-medium\">\n                  Available Collateral\n                </span>\n              </div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Total Value: {formatCurrency(totalCollateralValue)}\n                <br />\n                Max Loan Amount: {formatCurrency(maxLoanAmount)}\n              </p>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"block text-sm font-medium\">\n                Select Collateral Token\n              </label>\n              <Select value={selectedToken} onValueChange={setSelectedToken}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Choose harvest token\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableCollateral.map((token) => (\n                    <SelectItem key={token.id} value={token.id}>\n                      {token.cropType} - {token.amount} tons (Grade{\" \"}\n                      {token.qualityGrade})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"block text-sm font-medium\">\n                Loan Amount (USD)\n              </label>\n              <Input\n                type=\"number\"\n                placeholder=\"Enter loan amount\"\n                value={loanAmount}\n                onChange={(e) => setLoanAmount(e.target.value)}\n                max={maxLoanAmount}\n              />\n              <p className=\"text-xs text-gray-500\">\n                Maximum: {formatCurrency(maxLoanAmount)}\n              </p>\n            </div>\n\n            <div className=\"p-3 bg-yellow-50 dark:bg-yellow-950 rounded-lg\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                <span className=\"text-sm font-medium\">Loan Terms</span>\n              </div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Interest Rate: 12% APR\n                <br />\n                Term: 12 months\n                <br />\n                Collateral will be locked during loan period\n              </p>\n            </div>\n\n            <Button\n              className=\"w-full\"\n              onClick={handleRequestLoan}\n              disabled={\n                isProcessing || !!activeLoan || !selectedToken || !loanAmount\n              }\n            >\n              {isProcessing ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Processing...\n                </>\n              ) : (\n                <>\n                  <CreditCard className=\"mr-2 h-4 w-4\" />\n                  Request Loan\n                </>\n              )}\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tokenized Assets */}\n      {harvestTokens.length > 0 && (\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Your Tokenized Assets\n            </CardTitle>\n            <CardDescription>\n              Manage your tokenized harvest assets\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {harvestTokens.map((token) => (\n                <div\n                  key={token.id}\n                  className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg\"\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold\">{token.cropType}</h3>\n                      <Badge\n                        variant={\n                          token.status === \"tokenized\"\n                            ? \"default\"\n                            : token.status === \"locked\"\n                            ? \"destructive\"\n                            : \"secondary\"\n                        }\n                      >\n                        {token.status}\n                      </Badge>\n                      {token.isLocked && (\n                        <Badge variant=\"outline\" className=\"text-red-600\">\n                          <Lock className=\"h-3 w-3 mr-1\" />\n                          Locked\n                        </Badge>\n                      )}\n                    </div>\n                    <span className=\"text-sm text-gray-500\">\n                      {token.createdAt\n                        ? formatDate(new Date(token.createdAt))\n                        : \"N/A\"}\n                    </span>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-300\">\n                        Physical Amount\n                      </p>\n                      <p className=\"font-semibold\">{token.amount} tons</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-300\">\n                        Tokenized Amount\n                      </p>\n                      <p className=\"font-semibold\">\n                        {formatCurrency(token.tokenizedAmount)}\n                      </p>\n                    </div>\n                    {token.qualityGrade && (\n                      <div>\n                        <p className=\"text-gray-600 dark:text-gray-300\">\n                          Quality Grade\n                        </p>\n                        <p className=\"font-semibold\">\n                          Grade {token.qualityGrade}\n                        </p>\n                      </div>\n                    )}\n                    {token.blockchainTokenId && (\n                      <div>\n                        <p className=\"text-gray-600 dark:text-gray-300\">\n                          Token ID\n                        </p>\n                        <p className=\"font-semibold\">\n                          #{token.blockchainTokenId}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"mt-3 flex gap-2\">\n                    <Button size=\"sm\" variant=\"outline\">\n                      View QR Code\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\">\n                      Track Supply Chain\n                    </Button>\n                    {token.blockchainTxHash && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() =>\n                          window.open(\n                            `https://hashscan.io/testnet/transaction/${token.blockchainTxHash}`,\n                            \"_blank\"\n                          )\n                        }\n                      >\n                        <ExternalLink className=\"h-3 w-3 mr-1\" />\n                        View on HashScan\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Loan History */}\n      {loans.length > 0 && (\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-5 w-5\" />\n              Loan History\n            </CardTitle>\n            <CardDescription>View all your loan transactions</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {loans.map((loan) => (\n                <div\n                  key={loan.id}\n                  className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg\"\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center gap-2\">\n                      <h3 className=\"font-semibold\">\n                        {formatCurrency(loan.amount)}\n                      </h3>\n                      <Badge\n                        variant={\n                          loan.status === \"active\"\n                            ? \"default\"\n                            : loan.status === \"completed\"\n                            ? \"secondary\"\n                            : loan.status === \"defaulted\"\n                            ? \"destructive\"\n                            : \"outline\"\n                        }\n                      >\n                        {loan.status}\n                      </Badge>\n                    </div>\n                    <span className=\"text-sm text-gray-500\">\n                      {loan.createdAt\n                        ? formatDate(new Date(loan.createdAt))\n                        : \"N/A\"}\n                    </span>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-300\">\n                        Interest Rate\n                      </p>\n                      <p className=\"font-semibold\">{loan.interestRate}% APR</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-300\">\n                        Repaid Amount\n                      </p>\n                      <p className=\"font-semibold\">\n                        {formatCurrency(loan.repaidAmount)}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600 dark:text-gray-300\">\n                        Due Date\n                      </p>\n                      <p className=\"font-semibold\">\n                        {loan.endDate\n                          ? formatDate(new Date(loan.endDate))\n                          : \"N/A\"}\n                      </p>\n                    </div>\n                    {loan.blockchainLoanId && (\n                      <div>\n                        <p className=\"text-gray-600 dark:text-gray-300\">\n                          Blockchain Loan ID\n                        </p>\n                        <p className=\"font-semibold\">\n                          #{loan.blockchainLoanId}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"mt-3 flex gap-2\">\n                    {loan.status === \"active\" && (\n                      <Dialog\n                        open={repayModalOpen && activeLoan?.id === loan.id}\n                        onOpenChange={(open) => {\n                          setRepayModalOpen(open);\n                          if (open) {\n                            // Set this loan as the active loan for repayment\n                            const updatedLoans = loans.map((l) => ({\n                              ...l,\n                              isActiveForRepayment: l.id === loan.id,\n                            }));\n                            setLoans(updatedLoans);\n                          }\n                        }}\n                      >\n                        <DialogTrigger asChild>\n                          <Button\n                            size=\"sm\"\n                            className=\"bg-green-600 hover:bg-green-700\"\n                          >\n                            <DollarSign className=\"h-3 w-3 mr-1\" />\n                            Repay\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-[425px]\">\n                          <DialogHeader>\n                            <DialogTitle>Repay Loan</DialogTitle>\n                            <DialogDescription>\n                              Make a payment towards your loan. You can pay the\n                              full amount or make a partial payment.\n                            </DialogDescription>\n                          </DialogHeader>\n                          <div className=\"grid gap-4 py-4\">\n                            <div className=\"grid grid-cols-2 gap-4\">\n                              <div>\n                                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                                  Total Loan Amount\n                                </p>\n                                <p className=\"font-semibold\">\n                                  {formatCurrency(loan.amount)}\n                                </p>\n                              </div>\n                              <div>\n                                <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                                  Remaining Balance\n                                </p>\n                                <p className=\"font-semibold text-red-600\">\n                                  {formatCurrency(\n                                    (loan.amount || 0) -\n                                      (loan.repaidAmount || 0)\n                                  )}\n                                </p>\n                              </div>\n                            </div>\n                            <div className=\"space-y-2\">\n                              <label\n                                htmlFor=\"repay-amount\"\n                                className=\"text-sm font-medium\"\n                              >\n                                Payment Amount (USD)\n                              </label>\n                              <Input\n                                id=\"repay-amount\"\n                                type=\"number\"\n                                placeholder=\"Enter amount to repay\"\n                                value={repayAmount}\n                                onChange={(e) => setRepayAmount(e.target.value)}\n                                max={loan.amount - (loan.repaidAmount || 0)}\n                                min=\"0.01\"\n                                step=\"0.01\"\n                              />\n                              <p className=\"text-xs text-gray-500\">\n                                Maximum:{\" \"}\n                                {formatCurrency(\n                                  (loan.amount || 0) - (loan.repaidAmount || 0)\n                                )}\n                              </p>\n                            </div>\n                          </div>\n                          <DialogFooter>\n                            <Button\n                              variant=\"outline\"\n                              onClick={() => setRepayModalOpen(false)}\n                              disabled={isRepaying}\n                            >\n                              Cancel\n                            </Button>\n                            <Button\n                              onClick={() => handleRepayLoan(loan.id)}\n                              disabled={\n                                isRepaying ||\n                                !repayAmount ||\n                                parseFloat(repayAmount) <= 0\n                              }\n                              className=\"bg-green-600 hover:bg-green-700\"\n                            >\n                              {isRepaying ? (\n                                <>\n                                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                                  Processing...\n                                </>\n                              ) : (\n                                <>\n                                  <DollarSign className=\"h-4 w-4 mr-2\" />\n                                  Pay{\" \"}\n                                  {formatCurrency(\n                                    parseFloat(repayAmount || \"0\")\n                                  )}\n                                </>\n                              )}\n                            </Button>\n                          </DialogFooter>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n                    {loan.blockchainTxHash && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() =>\n                          window.open(\n                            `https://hashscan.io/testnet/transaction/${loan.blockchainTxHash}`,\n                            \"_blank\"\n                          )\n                        }\n                      >\n                        <ExternalLink className=\"h-3 w-3 mr-1\" />\n                        View on HashScan\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Info Section */}\n      <Card className=\"mt-8\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center\">\n            <h3 className=\"font-semibold mb-4\">How It Works</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-sm\">\n              <div className=\"p-4 bg-blue-50 dark:bg-blue-950 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Coins className=\"h-5 w-5 text-blue-600\" />\n                  <span className=\"font-semibold\">1. Tokenize</span>\n                </div>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  Convert your harvest into blockchain tokens\n                </p>\n              </div>\n              <div className=\"p-4 bg-green-50 dark:bg-green-950 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Shield className=\"h-5 w-5 text-green-600\" />\n                  <span className=\"font-semibold\">2. Collateral</span>\n                </div>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  Use tokens as collateral for loans\n                </p>\n              </div>\n              <div className=\"p-4 bg-purple-50 dark:bg-purple-950 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <DollarSign className=\"h-5 w-5 text-purple-600\" />\n                  <span className=\"font-semibold\">3. Access Funds</span>\n                </div>\n                <p className=\"text-gray-600 dark:text-gray-300\">\n                  Get immediate access to capital\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}