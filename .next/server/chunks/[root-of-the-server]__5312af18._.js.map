{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  uuid,\n  decimal,\n  integer,\n  boolean,\n  jsonb,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  location: text(\"location\"),\n  country: text(\"country\"),\n  cropType: text(\"crop_type\"),\n  farmSize: text(\"farm_size\"),\n  experience: text(\"experience\"),\n  additionalInfo: text(\"additional_info\"),\n  // Settings fields\n  notifications: boolean(\"notifications\").default(true),\n  darkMode: boolean(\"dark_mode\").default(false),\n  language: text(\"language\").default(\"en\"),\n  currency: text(\"currency\").default(\"USD\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Farm data entries\nexport const farmData = pgTable(\"farm_data\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  cropType: text(\"crop_type\").notNull(),\n  location: text(\"location\").notNull(),\n  soilMoisture: decimal(\"soil_moisture\", { precision: 5, scale: 2 }).notNull(),\n  weatherNotes: text(\"weather_notes\"),\n  photo: text(\"photo\"), // Base64 encoded image data\n  photoMimeType: text(\"photo_mime_type\"), // MIME type of the image\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  temperature: decimal(\"temperature\", { precision: 5, scale: 2 }),\n  humidity: decimal(\"humidity\", { precision: 5, scale: 2 }),\n  rainfall: decimal(\"rainfall\", { precision: 5, scale: 2 }),\n  // AI Analysis fields\n  aiAnalysis: text(\"ai_analysis\"), // JSON string of AI analysis results\n  aiConfidence: decimal(\"ai_confidence\", { precision: 3, scale: 2 }), // 0.00 to 1.00\n  aiRecommendations: text(\"ai_recommendations\"), // AI-generated recommendations\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Yield predictions\nexport const yieldPredictions = pgTable(\"yield_predictions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  farmDataId: uuid(\"farm_data_id\").references(() => farmData.id, {\n    onDelete: \"set null\",\n  }),\n  cropType: text(\"crop_type\").notNull(),\n  predictedYield: decimal(\"predicted_yield\", {\n    precision: 8,\n    scale: 2,\n  }).notNull(),\n  riskLevel: decimal(\"risk_level\", { precision: 5, scale: 2 }).notNull(),\n  confidence: decimal(\"confidence\", { precision: 5, scale: 2 }).notNull(),\n  modelVersion: text(\"model_version\"),\n  inputData: jsonb(\"input_data\"), // Store the input data used for prediction\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Loans\nexport const loans = pgTable(\"loans\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  blockchainLoanId: text(\"blockchain_loan_id\"), // Smart contract loan ID\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(),\n  status: text(\"status\", {\n    enum: [\"pending\", \"active\", \"completed\", \"defaulted\"],\n  })\n    .notNull()\n    .default(\"pending\"),\n  collateral: jsonb(\"collateral\").notNull(), // Array of token IDs\n  collateralPredictionId: text(\"collateral_prediction_id\"), // Smart contract prediction ID\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  repaidAmount: decimal(\"repaid_amount\", { precision: 12, scale: 2 }).default(\n    \"0\"\n  ),\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Harvest tokens\nexport const harvestTokens = pgTable(\"harvest_tokens\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  yieldPredictionId: uuid(\"yield_prediction_id\").references(\n    () => yieldPredictions.id,\n    { onDelete: \"set null\" }\n  ),\n  cropType: text(\"crop_type\").notNull(),\n  amount: decimal(\"amount\", { precision: 8, scale: 2 }).notNull(),\n  tokenizedAmount: decimal(\"tokenized_amount\", {\n    precision: 12,\n    scale: 2,\n  }).notNull(),\n  qualityGrade: text(\"quality_grade\"), // A, B, C grade\n  status: text(\"status\", {\n    enum: [\"pending\", \"tokenized\", \"sold\", \"burned\", \"locked\"],\n  })\n    .notNull()\n    .default(\"pending\"),\n  isLocked: boolean(\"is_locked\").default(false), // Locked as loan collateral\n  qrCode: text(\"qr_code\").notNull(),\n  metadataURI: text(\"metadata_uri\"), // NFT metadata URI\n  blockchainTokenId: text(\"blockchain_token_id\"), // Smart contract token ID\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Badges/Achievements\nexport const badges = pgTable(\"badges\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  badgeType: text(\"badge_type\").notNull(), // 'data-contributor', 'yield-predictor', etc.\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  earned: boolean(\"earned\").notNull().default(false),\n  earnedDate: timestamp(\"earned_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Market prices (for price tracking)\nexport const marketPrices = pgTable(\"market_prices\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  cropType: text(\"crop_type\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"GHS\"),\n  source: text(\"source\").notNull(), // 'manual', 'api', 'blockchain'\n  location: text(\"location\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Supply chain tracking\nexport const supplyChainEvents = pgTable(\"supply_chain_events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  tokenId: uuid(\"token_id\")\n    .notNull()\n    .references(() => harvestTokens.id, { onDelete: \"cascade\" }),\n  eventType: text(\"event_type\").notNull(), // 'harvest', 'processing', 'transport', 'delivery'\n  description: text(\"description\").notNull(),\n  location: text(\"location\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  metadata: jsonb(\"metadata\"), // Additional event data\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  farmData: many(farmData),\n  yieldPredictions: many(yieldPredictions),\n  loans: many(loans),\n  harvestTokens: many(harvestTokens),\n  badges: many(badges),\n}));\n\nexport const farmDataRelations = relations(farmData, ({ one }) => ({\n  user: one(users, {\n    fields: [farmData.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const yieldPredictionsRelations = relations(\n  yieldPredictions,\n  ({ one }) => ({\n    user: one(users, {\n      fields: [yieldPredictions.userId],\n      references: [users.id],\n    }),\n    farmData: one(farmData, {\n      fields: [yieldPredictions.farmDataId],\n      references: [farmData.id],\n    }),\n  })\n);\n\nexport const loansRelations = relations(loans, ({ one }) => ({\n  user: one(users, {\n    fields: [loans.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const harvestTokensRelations = relations(\n  harvestTokens,\n  ({ one, many }) => ({\n    user: one(users, {\n      fields: [harvestTokens.userId],\n      references: [users.id],\n    }),\n    yieldPrediction: one(yieldPredictions, {\n      fields: [harvestTokens.yieldPredictionId],\n      references: [yieldPredictions.id],\n    }),\n    supplyChainEvents: many(supplyChainEvents),\n  })\n);\n\nexport const badgesRelations = relations(badges, ({ one }) => ({\n  user: one(users, {\n    fields: [badges.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const supplyChainEventsRelations = relations(\n  supplyChainEvents,\n  ({ one }) => ({\n    token: one(harvestTokens, {\n      fields: [supplyChainEvents.tokenId],\n      references: [harvestTokens.id],\n    }),\n  })\n);\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type FarmData = typeof farmData.$inferSelect;\nexport type NewFarmData = typeof farmData.$inferInsert;\nexport type YieldPrediction = typeof yieldPredictions.$inferSelect;\nexport type NewYieldPrediction = typeof yieldPredictions.$inferInsert;\nexport type Loan = typeof loans.$inferSelect;\nexport type NewLoan = typeof loans.$inferInsert;\nexport type HarvestToken = typeof harvestTokens.$inferSelect;\nexport type NewHarvestToken = typeof harvestTokens.$inferInsert;\nexport type Badge = typeof badges.$inferSelect;\nexport type NewBadge = typeof badges.$inferInsert;\nexport type MarketPrice = typeof marketPrices.$inferSelect;\nexport type NewMarketPrice = typeof marketPrices.$inferInsert;\nexport type SupplyChainEvent = typeof supplyChainEvents.$inferSelect;\nexport type NewSupplyChainEvent = typeof supplyChainEvents.$inferInsert;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"./schema\";\n\n// Create the connection - only works on server side\nlet db: ReturnType<typeof drizzle>;\n\nif (typeof window === \"undefined\") {\n  // Server side - load environment variables\n  const { config } = require(\"dotenv\");\n  config({ path: \".env.local\" });\n\n  const sql = neon(process.env.DATABASE_URL!);\n  db = drizzle({ client: sql, schema });\n} else {\n  // Client side - create a mock db that throws errors\n  db = null as any;\n}\n\nexport { db };\n\n// Export schema for use in other files\nexport * from \"./schema\";\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,oDAAoD;AACpD,IAAI;AAEJ,wCAAmC;IACjC,2CAA2C;IAC3C,MAAM,EAAE,MAAM,EAAE;IAChB,OAAO;QAAE,MAAM;IAAa;IAE5B,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;IACzC,KAAK,IAAA,qKAAO,EAAC;QAAE,QAAQ;QAAK,QAAA;IAAO;AACrC,OAAO;IACL,oDAAoD;IACpD,KAAK;AACP","debugId":null}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/services.ts"],"sourcesContent":["import { eq, desc, and } from \"drizzle-orm\";\nimport { db } from \"./index\";\nimport {\n  users,\n  farmData,\n  yieldPredictions,\n  loans,\n  harvestTokens,\n  badges,\n  marketPrices,\n  supplyChainEvents,\n  type NewUser,\n  type NewFarmData,\n  type NewYieldPrediction,\n  type NewLoan,\n  type NewHarvestToken,\n  type NewBadge,\n  type NewMarketPrice,\n  type NewSupplyChainEvent,\n} from \"./schema\";\n\n// User services\nexport async function createUser(userData: NewUser) {\n  const [user] = await db.insert(users).values(userData).returning();\n  return user;\n}\n\nexport async function getUserByWalletAddress(walletAddress: string) {\n  const [user] = await db\n    .select()\n    .from(users)\n    .where(eq(users.walletAddress, walletAddress));\n  return user;\n}\n\nexport async function updateUser(id: string, userData: Partial<NewUser>) {\n  const [user] = await db\n    .update(users)\n    .set(userData)\n    .where(eq(users.id, id))\n    .returning();\n  return user;\n}\n\n// Farm data services\nexport async function createFarmData(farmDataInput: NewFarmData) {\n  const [data] = await db.insert(farmData).values(farmDataInput).returning();\n  return data;\n}\n\nexport async function getFarmDataByUserId(userId: string) {\n  return await db\n    .select()\n    .from(farmData)\n    .where(eq(farmData.userId, userId))\n    .orderBy(desc(farmData.createdAt));\n}\n\nexport async function getLatestFarmDataByUserId(userId: string) {\n  const [data] = await db\n    .select()\n    .from(farmData)\n    .where(eq(farmData.userId, userId))\n    .orderBy(desc(farmData.createdAt))\n    .limit(1);\n  return data;\n}\n\n// Yield prediction services\nexport async function createYieldPrediction(\n  predictionData: NewYieldPrediction\n) {\n  const [prediction] = await db\n    .insert(yieldPredictions)\n    .values(predictionData)\n    .returning();\n  return prediction;\n}\n\nexport async function createYieldPredictionWithFarmData(\n  predictionData: NewYieldPrediction & { farmDataId?: string }\n) {\n  const [prediction] = await db\n    .insert(yieldPredictions)\n    .values(predictionData)\n    .returning();\n  return prediction;\n}\n\nexport async function getYieldPredictionsByUserId(userId: string) {\n  return await db\n    .select()\n    .from(yieldPredictions)\n    .where(eq(yieldPredictions.userId, userId))\n    .orderBy(desc(yieldPredictions.createdAt));\n}\n\nexport async function getLatestYieldPredictionByUserId(userId: string) {\n  const [prediction] = await db\n    .select()\n    .from(yieldPredictions)\n    .where(eq(yieldPredictions.userId, userId))\n    .orderBy(desc(yieldPredictions.createdAt))\n    .limit(1);\n  return prediction;\n}\n\nexport async function getYieldPredictionsWithFarmDataByUserId(userId: string) {\n  return await db\n    .select({\n      id: yieldPredictions.id,\n      cropType: yieldPredictions.cropType,\n      predictedYield: yieldPredictions.predictedYield,\n      riskLevel: yieldPredictions.riskLevel,\n      confidence: yieldPredictions.confidence,\n      modelVersion: yieldPredictions.modelVersion,\n      inputData: yieldPredictions.inputData,\n      createdAt: yieldPredictions.createdAt,\n      farmDataId: yieldPredictions.farmDataId,\n      farmData: {\n        id: farmData.id,\n        location: farmData.location,\n        soilMoisture: farmData.soilMoisture,\n        weatherNotes: farmData.weatherNotes,\n        temperature: farmData.temperature,\n        humidity: farmData.humidity,\n        rainfall: farmData.rainfall,\n        createdAt: farmData.createdAt,\n      },\n    })\n    .from(yieldPredictions)\n    .leftJoin(farmData, eq(yieldPredictions.farmDataId, farmData.id))\n    .where(eq(yieldPredictions.userId, userId))\n    .orderBy(desc(yieldPredictions.createdAt));\n}\n\n// Loan services\nexport async function createLoan(loanData: NewLoan) {\n  const [loan] = await db.insert(loans).values(loanData).returning();\n  return loan;\n}\n\nexport async function createLoanWithBlockchain(\n  loanData: NewLoan & {\n    blockchainLoanId?: string;\n    collateralPredictionId?: string;\n    blockchainTxHash?: string;\n  }\n) {\n  const [loan] = await db.insert(loans).values(loanData).returning();\n  return loan;\n}\n\nexport async function getLoansByUserId(userId: string) {\n  return await db\n    .select()\n    .from(loans)\n    .where(eq(loans.userId, userId))\n    .orderBy(desc(loans.createdAt));\n}\n\nexport async function getActiveLoanByUserId(userId: string) {\n  const [loan] = await db\n    .select()\n    .from(loans)\n    .where(and(eq(loans.userId, userId), eq(loans.status, \"active\")));\n  return loan;\n}\n\nexport async function updateLoanStatus(\n  id: string,\n  status: \"pending\" | \"active\" | \"completed\" | \"defaulted\"\n) {\n  const [loan] = await db\n    .update(loans)\n    .set({ status, updatedAt: new Date() })\n    .where(eq(loans.id, id))\n    .returning();\n  return loan;\n}\n\nexport async function updateLoanRepayment(\n  id: string,\n  repaidAmount: string,\n  status?: \"pending\" | \"active\" | \"completed\" | \"defaulted\"\n) {\n  const updateData: any = {\n    repaidAmount,\n    updatedAt: new Date(),\n  };\n  if (status) {\n    updateData.status = status;\n  }\n\n  const [loan] = await db\n    .update(loans)\n    .set(updateData)\n    .where(eq(loans.id, id))\n    .returning();\n  return loan;\n}\n\n// Harvest token services\nexport async function createHarvestToken(tokenData: NewHarvestToken) {\n  const [token] = await db.insert(harvestTokens).values(tokenData).returning();\n  return token;\n}\n\nexport async function createHarvestTokenWithBlockchain(\n  tokenData: NewHarvestToken & {\n    yieldPredictionId?: string;\n    qualityGrade?: string;\n    metadataURI?: string;\n    blockchainTokenId?: string;\n    blockchainTxHash?: string;\n  }\n) {\n  const [token] = await db.insert(harvestTokens).values(tokenData).returning();\n  return token;\n}\n\nexport async function getHarvestTokensByUserId(userId: string) {\n  return await db\n    .select()\n    .from(harvestTokens)\n    .where(eq(harvestTokens.userId, userId))\n    .orderBy(desc(harvestTokens.createdAt));\n}\n\nexport async function updateHarvestTokenStatus(\n  id: string,\n  status: \"pending\" | \"tokenized\" | \"sold\" | \"burned\" | \"locked\"\n) {\n  const [token] = await db\n    .update(harvestTokens)\n    .set({ status, updatedAt: new Date() })\n    .where(eq(harvestTokens.id, id))\n    .returning();\n  return token;\n}\n\nexport async function getAvailableCollateralByUserId(userId: string) {\n  return await db\n    .select()\n    .from(harvestTokens)\n    .where(\n      and(\n        eq(harvestTokens.userId, userId),\n        eq(harvestTokens.status, \"tokenized\"),\n        eq(harvestTokens.isLocked, false)\n      )\n    )\n    .orderBy(desc(harvestTokens.createdAt));\n}\n\nexport async function updateHarvestTokenLockStatus(\n  id: string,\n  isLocked: boolean\n) {\n  const [token] = await db\n    .update(harvestTokens)\n    .set({ isLocked, updatedAt: new Date() })\n    .where(eq(harvestTokens.id, id))\n    .returning();\n  return token;\n}\n\n// Badge services\nexport async function createBadge(badgeData: NewBadge) {\n  const [badge] = await db.insert(badges).values(badgeData).returning();\n  return badge;\n}\n\nexport async function getBadgesByUserId(userId: string) {\n  return await db.select().from(badges).where(eq(badges.userId, userId));\n}\n\nexport async function updateBadgeEarned(id: string, earned: boolean) {\n  const [badge] = await db\n    .update(badges)\n    .set({ earned, earnedDate: earned ? new Date() : null })\n    .where(eq(badges.id, id))\n    .returning();\n  return badge;\n}\n\n// Market price services\nexport async function createMarketPrice(priceData: NewMarketPrice) {\n  const [price] = await db.insert(marketPrices).values(priceData).returning();\n  return price;\n}\n\nexport async function getLatestMarketPrices() {\n  return await db\n    .select()\n    .from(marketPrices)\n    .orderBy(desc(marketPrices.createdAt));\n}\n\nexport async function getLatestMarketPriceByCrop(cropType: string) {\n  const [price] = await db\n    .select()\n    .from(marketPrices)\n    .where(eq(marketPrices.cropType, cropType))\n    .orderBy(desc(marketPrices.createdAt))\n    .limit(1);\n  return price;\n}\n\n// Supply chain services\nexport async function createSupplyChainEvent(eventData: NewSupplyChainEvent) {\n  const [event] = await db\n    .insert(supplyChainEvents)\n    .values(eventData)\n    .returning();\n  return event;\n}\n\nexport async function getSupplyChainEventsByTokenId(tokenId: string) {\n  return await db\n    .select()\n    .from(supplyChainEvents)\n    .where(eq(supplyChainEvents.tokenId, tokenId))\n    .orderBy(supplyChainEvents.createdAt);\n}\n\n// Analytics services\nexport async function getUserStats(userId: string) {\n  const [farmDataCount] = await db\n    .select({ count: farmData.id })\n    .from(farmData)\n    .where(eq(farmData.userId, userId));\n  const [predictionCount] = await db\n    .select({ count: yieldPredictions.id })\n    .from(yieldPredictions)\n    .where(eq(yieldPredictions.userId, userId));\n  const [loanCount] = await db\n    .select({ count: loans.id })\n    .from(loans)\n    .where(eq(loans.userId, userId));\n  const [tokenCount] = await db\n    .select({ count: harvestTokens.id })\n    .from(harvestTokens)\n    .where(eq(harvestTokens.userId, userId));\n\n  return {\n    farmDataCount: farmDataCount?.count || 0,\n    predictionCount: predictionCount?.count || 0,\n    loanCount: loanCount?.count || 0,\n    tokenCount: tokenCount?.count || 0,\n  };\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;;;;AAoBO,eAAe,WAAW,QAAiB;IAChD,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CAAC,MAAM,CAAC,8HAAK,EAAE,MAAM,CAAC,UAAU,SAAS;IAChE,OAAO;AACT;AAEO,eAAe,uBAAuB,aAAqB;IAChE,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CACpB,MAAM,GACN,IAAI,CAAC,8HAAK,EACV,KAAK,CAAC,IAAA,0KAAE,EAAC,8HAAK,CAAC,aAAa,EAAE;IACjC,OAAO;AACT;AAEO,eAAe,WAAW,EAAU,EAAE,QAA0B;IACrE,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CACpB,MAAM,CAAC,8HAAK,EACZ,GAAG,CAAC,UACJ,KAAK,CAAC,IAAA,0KAAE,EAAC,8HAAK,CAAC,EAAE,EAAE,KACnB,SAAS;IACZ,OAAO;AACT;AAGO,eAAe,eAAe,aAA0B;IAC7D,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CAAC,MAAM,CAAC,iIAAQ,EAAE,MAAM,CAAC,eAAe,SAAS;IACxE,OAAO;AACT;AAEO,eAAe,oBAAoB,MAAc;IACtD,OAAO,MAAM,0IAAE,CACZ,MAAM,GACN,IAAI,CAAC,iIAAQ,EACb,KAAK,CAAC,IAAA,0KAAE,EAAC,iIAAQ,CAAC,MAAM,EAAE,SAC1B,OAAO,CAAC,IAAA,wKAAI,EAAC,iIAAQ,CAAC,SAAS;AACpC;AAEO,eAAe,0BAA0B,MAAc;IAC5D,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CACpB,MAAM,GACN,IAAI,CAAC,iIAAQ,EACb,KAAK,CAAC,IAAA,0KAAE,EAAC,iIAAQ,CAAC,MAAM,EAAE,SAC1B,OAAO,CAAC,IAAA,wKAAI,EAAC,iIAAQ,CAAC,SAAS,GAC/B,KAAK,CAAC;IACT,OAAO;AACT;AAGO,eAAe,sBACpB,cAAkC;IAElC,MAAM,CAAC,WAAW,GAAG,MAAM,0IAAE,CAC1B,MAAM,CAAC,yIAAgB,EACvB,MAAM,CAAC,gBACP,SAAS;IACZ,OAAO;AACT;AAEO,eAAe,kCACpB,cAA4D;IAE5D,MAAM,CAAC,WAAW,GAAG,MAAM,0IAAE,CAC1B,MAAM,CAAC,yIAAgB,EACvB,MAAM,CAAC,gBACP,SAAS;IACZ,OAAO;AACT;AAEO,eAAe,4BAA4B,MAAc;IAC9D,OAAO,MAAM,0IAAE,CACZ,MAAM,GACN,IAAI,CAAC,yIAAgB,EACrB,KAAK,CAAC,IAAA,0KAAE,EAAC,yIAAgB,CAAC,MAAM,EAAE,SAClC,OAAO,CAAC,IAAA,wKAAI,EAAC,yIAAgB,CAAC,SAAS;AAC5C;AAEO,eAAe,iCAAiC,MAAc;IACnE,MAAM,CAAC,WAAW,GAAG,MAAM,0IAAE,CAC1B,MAAM,GACN,IAAI,CAAC,yIAAgB,EACrB,KAAK,CAAC,IAAA,0KAAE,EAAC,yIAAgB,CAAC,MAAM,EAAE,SAClC,OAAO,CAAC,IAAA,wKAAI,EAAC,yIAAgB,CAAC,SAAS,GACvC,KAAK,CAAC;IACT,OAAO;AACT;AAEO,eAAe,wCAAwC,MAAc;IAC1E,OAAO,MAAM,0IAAE,CACZ,MAAM,CAAC;QACN,IAAI,yIAAgB,CAAC,EAAE;QACvB,UAAU,yIAAgB,CAAC,QAAQ;QACnC,gBAAgB,yIAAgB,CAAC,cAAc;QAC/C,WAAW,yIAAgB,CAAC,SAAS;QACrC,YAAY,yIAAgB,CAAC,UAAU;QACvC,cAAc,yIAAgB,CAAC,YAAY;QAC3C,WAAW,yIAAgB,CAAC,SAAS;QACrC,WAAW,yIAAgB,CAAC,SAAS;QACrC,YAAY,yIAAgB,CAAC,UAAU;QACvC,UAAU;YACR,IAAI,iIAAQ,CAAC,EAAE;YACf,UAAU,iIAAQ,CAAC,QAAQ;YAC3B,cAAc,iIAAQ,CAAC,YAAY;YACnC,cAAc,iIAAQ,CAAC,YAAY;YACnC,aAAa,iIAAQ,CAAC,WAAW;YACjC,UAAU,iIAAQ,CAAC,QAAQ;YAC3B,UAAU,iIAAQ,CAAC,QAAQ;YAC3B,WAAW,iIAAQ,CAAC,SAAS;QAC/B;IACF,GACC,IAAI,CAAC,yIAAgB,EACrB,QAAQ,CAAC,iIAAQ,EAAE,IAAA,0KAAE,EAAC,yIAAgB,CAAC,UAAU,EAAE,iIAAQ,CAAC,EAAE,GAC9D,KAAK,CAAC,IAAA,0KAAE,EAAC,yIAAgB,CAAC,MAAM,EAAE,SAClC,OAAO,CAAC,IAAA,wKAAI,EAAC,yIAAgB,CAAC,SAAS;AAC5C;AAGO,eAAe,WAAW,QAAiB;IAChD,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CAAC,MAAM,CAAC,8HAAK,EAAE,MAAM,CAAC,UAAU,SAAS;IAChE,OAAO;AACT;AAEO,eAAe,yBACpB,QAIC;IAED,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CAAC,MAAM,CAAC,8HAAK,EAAE,MAAM,CAAC,UAAU,SAAS;IAChE,OAAO;AACT;AAEO,eAAe,iBAAiB,MAAc;IACnD,OAAO,MAAM,0IAAE,CACZ,MAAM,GACN,IAAI,CAAC,8HAAK,EACV,KAAK,CAAC,IAAA,0KAAE,EAAC,8HAAK,CAAC,MAAM,EAAE,SACvB,OAAO,CAAC,IAAA,wKAAI,EAAC,8HAAK,CAAC,SAAS;AACjC;AAEO,eAAe,sBAAsB,MAAc;IACxD,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CACpB,MAAM,GACN,IAAI,CAAC,8HAAK,EACV,KAAK,CAAC,IAAA,2KAAG,EAAC,IAAA,0KAAE,EAAC,8HAAK,CAAC,MAAM,EAAE,SAAS,IAAA,0KAAE,EAAC,8HAAK,CAAC,MAAM,EAAE;IACxD,OAAO;AACT;AAEO,eAAe,iBACpB,EAAU,EACV,MAAwD;IAExD,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CACpB,MAAM,CAAC,8HAAK,EACZ,GAAG,CAAC;QAAE;QAAQ,WAAW,IAAI;IAAO,GACpC,KAAK,CAAC,IAAA,0KAAE,EAAC,8HAAK,CAAC,EAAE,EAAE,KACnB,SAAS;IACZ,OAAO;AACT;AAEO,eAAe,oBACpB,EAAU,EACV,YAAoB,EACpB,MAAyD;IAEzD,MAAM,aAAkB;QACtB;QACA,WAAW,IAAI;IACjB;IACA,IAAI,QAAQ;QACV,WAAW,MAAM,GAAG;IACtB;IAEA,MAAM,CAAC,KAAK,GAAG,MAAM,0IAAE,CACpB,MAAM,CAAC,8HAAK,EACZ,GAAG,CAAC,YACJ,KAAK,CAAC,IAAA,0KAAE,EAAC,8HAAK,CAAC,EAAE,EAAE,KACnB,SAAS;IACZ,OAAO;AACT;AAGO,eAAe,mBAAmB,SAA0B;IACjE,MAAM,CAAC,MAAM,GAAG,MAAM,0IAAE,CAAC,MAAM,CAAC,sIAAa,EAAE,MAAM,CAAC,WAAW,SAAS;IAC1E,OAAO;AACT;AAEO,eAAe,iCACpB,SAMC;IAED,MAAM,CAAC,MAAM,GAAG,MAAM,0IAAE,CAAC,MAAM,CAAC,sIAAa,EAAE,MAAM,CAAC,WAAW,SAAS;IAC1E,OAAO;AACT;AAEO,eAAe,yBAAyB,MAAc;IAC3D,OAAO,MAAM,0IAAE,CACZ,MAAM,GACN,IAAI,CAAC,sIAAa,EAClB,KAAK,CAAC,IAAA,0KAAE,EAAC,sIAAa,CAAC,MAAM,EAAE,SAC/B,OAAO,CAAC,IAAA,wKAAI,EAAC,sIAAa,CAAC,SAAS;AACzC;AAEO,eAAe,yBACpB,EAAU,EACV,MAA8D;IAE9D,MAAM,CAAC,MAAM,GAAG,MAAM,0IAAE,CACrB,MAAM,CAAC,sIAAa,EACpB,GAAG,CAAC;QAAE;QAAQ,WAAW,IAAI;IAAO,GACpC,KAAK,CAAC,IAAA,0KAAE,EAAC,sIAAa,CAAC,EAAE,EAAE,KAC3B,SAAS;IACZ,OAAO;AACT;AAEO,eAAe,+BAA+B,MAAc;IACjE,OAAO,MAAM,0IAAE,CACZ,MAAM,GACN,IAAI,CAAC,sIAAa,EAClB,KAAK,CACJ,IAAA,2KAAG,EACD,IAAA,0KAAE,EAAC,sIAAa,CAAC,MAAM,EAAE,SACzB,IAAA,0KAAE,EAAC,sIAAa,CAAC,MAAM,EAAE,cACzB,IAAA,0KAAE,EAAC,sIAAa,CAAC,QAAQ,EAAE,SAG9B,OAAO,CAAC,IAAA,wKAAI,EAAC,sIAAa,CAAC,SAAS;AACzC;AAEO,eAAe,6BACpB,EAAU,EACV,QAAiB;IAEjB,MAAM,CAAC,MAAM,GAAG,MAAM,0IAAE,CACrB,MAAM,CAAC,sIAAa,EACpB,GAAG,CAAC;QAAE;QAAU,WAAW,IAAI;IAAO,GACtC,KAAK,CAAC,IAAA,0KAAE,EAAC,sIAAa,CAAC,EAAE,EAAE,KAC3B,SAAS;IACZ,OAAO;AACT;AAGO,eAAe,YAAY,SAAmB;IACnD,MAAM,CAAC,MAAM,GAAG,MAAM,0IAAE,CAAC,MAAM,CAAC,+HAAM,EAAE,MAAM,CAAC,WAAW,SAAS;IACnE,OAAO;AACT;AAEO,eAAe,kBAAkB,MAAc;IACpD,OAAO,MAAM,0IAAE,CAAC,MAAM,GAAG,IAAI,CAAC,+HAAM,EAAE,KAAK,CAAC,IAAA,0KAAE,EAAC,+HAAM,CAAC,MAAM,EAAE;AAChE;AAEO,eAAe,kBAAkB,EAAU,EAAE,MAAe;IACjE,MAAM,CAAC,MAAM,GAAG,MAAM,0IAAE,CACrB,MAAM,CAAC,+HAAM,EACb,GAAG,CAAC;QAAE;QAAQ,YAAY,SAAS,IAAI,SAAS;IAAK,GACrD,KAAK,CAAC,IAAA,0KAAE,EAAC,+HAAM,CAAC,EAAE,EAAE,KACpB,SAAS;IACZ,OAAO;AACT;AAGO,eAAe,kBAAkB,SAAyB;IAC/D,MAAM,CAAC,MAAM,GAAG,MAAM,0IAAE,CAAC,MAAM,CAAC,qIAAY,EAAE,MAAM,CAAC,WAAW,SAAS;IACzE,OAAO;AACT;AAEO,eAAe;IACpB,OAAO,MAAM,0IAAE,CACZ,MAAM,GACN,IAAI,CAAC,qIAAY,EACjB,OAAO,CAAC,IAAA,wKAAI,EAAC,qIAAY,CAAC,SAAS;AACxC;AAEO,eAAe,2BAA2B,QAAgB;IAC/D,MAAM,CAAC,MAAM,GAAG,MAAM,0IAAE,CACrB,MAAM,GACN,IAAI,CAAC,qIAAY,EACjB,KAAK,CAAC,IAAA,0KAAE,EAAC,qIAAY,CAAC,QAAQ,EAAE,WAChC,OAAO,CAAC,IAAA,wKAAI,EAAC,qIAAY,CAAC,SAAS,GACnC,KAAK,CAAC;IACT,OAAO;AACT;AAGO,eAAe,uBAAuB,SAA8B;IACzE,MAAM,CAAC,MAAM,GAAG,MAAM,0IAAE,CACrB,MAAM,CAAC,0IAAiB,EACxB,MAAM,CAAC,WACP,SAAS;IACZ,OAAO;AACT;AAEO,eAAe,8BAA8B,OAAe;IACjE,OAAO,MAAM,0IAAE,CACZ,MAAM,GACN,IAAI,CAAC,0IAAiB,EACtB,KAAK,CAAC,IAAA,0KAAE,EAAC,0IAAiB,CAAC,OAAO,EAAE,UACpC,OAAO,CAAC,0IAAiB,CAAC,SAAS;AACxC;AAGO,eAAe,aAAa,MAAc;IAC/C,MAAM,CAAC,cAAc,GAAG,MAAM,0IAAE,CAC7B,MAAM,CAAC;QAAE,OAAO,iIAAQ,CAAC,EAAE;IAAC,GAC5B,IAAI,CAAC,iIAAQ,EACb,KAAK,CAAC,IAAA,0KAAE,EAAC,iIAAQ,CAAC,MAAM,EAAE;IAC7B,MAAM,CAAC,gBAAgB,GAAG,MAAM,0IAAE,CAC/B,MAAM,CAAC;QAAE,OAAO,yIAAgB,CAAC,EAAE;IAAC,GACpC,IAAI,CAAC,yIAAgB,EACrB,KAAK,CAAC,IAAA,0KAAE,EAAC,yIAAgB,CAAC,MAAM,EAAE;IACrC,MAAM,CAAC,UAAU,GAAG,MAAM,0IAAE,CACzB,MAAM,CAAC;QAAE,OAAO,8HAAK,CAAC,EAAE;IAAC,GACzB,IAAI,CAAC,8HAAK,EACV,KAAK,CAAC,IAAA,0KAAE,EAAC,8HAAK,CAAC,MAAM,EAAE;IAC1B,MAAM,CAAC,WAAW,GAAG,MAAM,0IAAE,CAC1B,MAAM,CAAC;QAAE,OAAO,sIAAa,CAAC,EAAE;IAAC,GACjC,IAAI,CAAC,sIAAa,EAClB,KAAK,CAAC,IAAA,0KAAE,EAAC,sIAAa,CAAC,MAAM,EAAE;IAElC,OAAO;QACL,eAAe,eAAe,SAAS;QACvC,iBAAiB,iBAAiB,SAAS;QAC3C,WAAW,WAAW,SAAS;QAC/B,YAAY,YAAY,SAAS;IACnC;AACF","debugId":null}},
    {"offset": {"line": 694, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/adapter.ts"],"sourcesContent":["import { db } from \"./index\";\nimport {\n  createUser,\n  getUserByWalletAddress,\n  createFarmData,\n  getFarmDataByUserId,\n  createYieldPrediction,\n  getYieldPredictionsByUserId,\n  createLoan,\n  getLoansByUserId,\n  getActiveLoanByUserId,\n  createHarvestToken,\n  getHarvestTokensByUserId,\n  createBadge,\n  getBadgesByUserId,\n  updateBadgeEarned,\n  getUserStats,\n} from \"./services\";\n\n// Database adapter for the existing store\nexport class DatabaseAdapter {\n  private userId: string | null = null;\n\n  async initializeUser(walletAddress: string) {\n    try {\n      // Try to get existing user\n      let user = await getUserByWalletAddress(walletAddress);\n\n      if (!user) {\n        // Create new user\n        user = await createUser({\n          walletAddress,\n          name: \"Farmer\", // Default name\n          location: \"Ghana\", // Default location\n        });\n      }\n\n      this.userId = user.id;\n      return user;\n    } catch (error) {\n      console.error(\"Failed to initialize user:\", error);\n      throw error;\n    }\n  }\n\n  async addFarmData(data: {\n    cropType: string;\n    location: string;\n    soilMoisture: number;\n    weatherNotes: string;\n    photo?: string;\n  }) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      return await createFarmData({\n        userId: this.userId,\n        cropType: data.cropType,\n        location: data.location,\n        soilMoisture: data.soilMoisture.toString(),\n        weatherNotes: data.weatherNotes,\n        photo: data.photo,\n      });\n    } catch (error) {\n      console.error(\"Failed to add farm data:\", error);\n      throw error;\n    }\n  }\n\n  async addYieldPrediction(prediction: {\n    cropType: string;\n    predictedYield: number;\n    riskLevel: number;\n    confidence: number;\n    farmDataId?: string;\n    modelVersion?: string;\n    inputData?: any;\n  }) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      return await createYieldPrediction({\n        userId: this.userId,\n        farmDataId: prediction.farmDataId,\n        cropType: prediction.cropType,\n        predictedYield: prediction.predictedYield.toString(),\n        riskLevel: prediction.riskLevel.toString(),\n        confidence: prediction.confidence.toString(),\n        modelVersion: prediction.modelVersion,\n        inputData: prediction.inputData,\n      });\n    } catch (error) {\n      console.error(\"Failed to add yield prediction:\", error);\n      throw error;\n    }\n  }\n\n  async addLoan(loan: {\n    amount: number;\n    interestRate: number;\n    status: \"pending\" | \"active\" | \"completed\" | \"defaulted\";\n    collateral: string[];\n    startDate: Date;\n    endDate: Date;\n  }) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      return await createLoan({\n        userId: this.userId,\n        amount: loan.amount.toString(),\n        interestRate: loan.interestRate.toString(),\n        status: loan.status,\n        collateral: loan.collateral,\n        startDate: loan.startDate,\n        endDate: loan.endDate,\n      });\n    } catch (error) {\n      console.error(\"Failed to add loan:\", error);\n      throw error;\n    }\n  }\n\n  async addHarvestToken(token: {\n    cropType: string;\n    amount: number;\n    tokenizedAmount: number;\n    status: \"pending\" | \"tokenized\" | \"sold\" | \"burned\";\n  }) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      return await createHarvestToken({\n        userId: this.userId,\n        cropType: token.cropType,\n        amount: token.amount.toString(),\n        tokenizedAmount: token.tokenizedAmount.toString(),\n        status: token.status,\n        qrCode: `https://agriyield.app/token/${crypto.randomUUID()}`,\n      });\n    } catch (error) {\n      console.error(\"Failed to add harvest token:\", error);\n      throw error;\n    }\n  }\n\n  async earnBadge(badgeType: string, name: string, description: string) {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      // Check if badge already exists\n      const existingBadges = await getBadgesByUserId(this.userId);\n      const existingBadge = existingBadges.find(\n        (b) => b.badgeType === badgeType\n      );\n\n      if (existingBadge) {\n        // Update existing badge\n        return await updateBadgeEarned(existingBadge.id, true);\n      } else {\n        // Create new badge\n        return await createBadge({\n          userId: this.userId,\n          badgeType,\n          name,\n          description,\n          earned: true,\n          earnedDate: new Date(),\n        });\n      }\n    } catch (error) {\n      console.error(\"Failed to earn badge:\", error);\n      throw error;\n    }\n  }\n\n  async getUserData() {\n    if (!this.userId) throw new Error(\"User not initialized\");\n\n    try {\n      const [farmDataList, predictions, loans, tokens, badges, stats] =\n        await Promise.all([\n          getFarmDataByUserId(this.userId),\n          getYieldPredictionsByUserId(this.userId),\n          getLoansByUserId(this.userId),\n          getHarvestTokensByUserId(this.userId),\n          getBadgesByUserId(this.userId),\n          getUserStats(this.userId),\n        ]);\n\n      return {\n        farmData: farmDataList.map((data) => ({\n          id: data.id,\n          cropType: data.cropType,\n          location: data.location,\n          soilMoisture: parseFloat(data.soilMoisture),\n          weatherNotes: data.weatherNotes || \"\",\n          photo: data.photo,\n          timestamp: data.createdAt,\n        })),\n        yieldPredictions: predictions.map((pred) => ({\n          cropType: pred.cropType,\n          predictedYield: parseFloat(pred.predictedYield),\n          riskLevel: parseFloat(pred.riskLevel),\n          confidence: parseFloat(pred.confidence),\n          timestamp: pred.createdAt,\n        })),\n        loans: loans.map((loan) => ({\n          id: loan.id,\n          amount: parseFloat(loan.amount),\n          interestRate: parseFloat(loan.interestRate),\n          status: loan.status,\n          collateral: loan.collateral as string[],\n          startDate: loan.startDate,\n          endDate: loan.endDate,\n        })),\n        harvestTokens: tokens.map((token) => ({\n          id: token.id,\n          cropType: token.cropType,\n          amount: parseFloat(token.amount),\n          tokenizedAmount: parseFloat(token.tokenizedAmount),\n          status: token.status,\n          qrCode: token.qrCode,\n        })),\n        badges: badges.map((badge) => ({\n          id: badge.id,\n          name: badge.name,\n          description: badge.description,\n          earned: badge.earned,\n          earnedDate: badge.earnedDate,\n        })),\n        stats,\n      };\n    } catch (error) {\n      console.error(\"Failed to get user data:\", error);\n      throw error;\n    }\n  }\n\n  getUserId() {\n    return this.userId;\n  }\n}\n\n// Create a singleton instance\nexport const dbAdapter = new DatabaseAdapter();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 883, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/gemini-ai.ts"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\n// Initialize Gemini AI\nconst genAI = new GoogleGenerativeAI(\n  process.env.GEMINI_API_KEY || \"AIzaSyCDjJOR9qH3WqatqCkZwb-XHE6lKu5XS1c\"\n);\n\nexport interface FarmDataAnalysis {\n  cropHealth: \"excellent\" | \"good\" | \"fair\" | \"poor\";\n  diseaseRisk: \"low\" | \"medium\" | \"high\";\n  pestRisk: \"low\" | \"medium\" | \"high\";\n  soilQuality: \"excellent\" | \"good\" | \"fair\" | \"poor\";\n  waterNeeds: \"low\" | \"medium\" | \"high\";\n  yieldPrediction: number; // in tons per hectare\n  confidence: number; // 0.0 to 1.0\n  recommendations: string[];\n  issues: string[];\n}\n\nexport interface GeminiAnalysisResult {\n  analysis: FarmDataAnalysis;\n  rawResponse: string;\n}\n\nexport class GeminiAIService {\n  private model: any;\n\n  constructor() {\n    this.model = genAI.getGenerativeModel({ model: \"gemini-2.5-flash\" });\n  }\n\n  async analyzeFarmData(data: {\n    cropType: string;\n    soilMoisture: number;\n    temperature?: number;\n    humidity?: number;\n    rainfall?: number;\n    weatherNotes?: string;\n    imageData?: string; // Base64 encoded image\n    imageMimeType?: string;\n    location?: string;\n  }): Promise<GeminiAnalysisResult> {\n    try {\n      // Prepare the prompt for Gemini\n      const prompt = this.buildAnalysisPrompt(data);\n\n      // Prepare content for Gemini\n      const content: any[] = [{ text: prompt }];\n\n      // Add image if provided\n      if (data.imageData && data.imageMimeType) {\n        content.push({\n          inlineData: {\n            data: data.imageData,\n            mimeType: data.imageMimeType,\n          },\n        });\n      }\n\n      const result = await this.model.generateContent(content);\n      const response = await result.response;\n      const text = response.text();\n\n      // Parse the AI response\n      const analysis = this.parseAIResponse(text, data);\n\n      return {\n        analysis,\n        rawResponse: text,\n      };\n    } catch (error) {\n      console.error(\"Gemini AI analysis error:\", error);\n      throw new Error(\"Failed to analyze farm data with AI\");\n    }\n  }\n\n  private buildAnalysisPrompt(data: any): string {\n    return `\nYou are an expert agricultural AI assistant. Analyze the following farm data and provide detailed insights:\n\nCROP INFORMATION:\n- Crop Type: ${data.cropType}\n- Location: ${data.location || \"Not specified\"}\n\nENVIRONMENTAL DATA:\n- Soil Moisture: ${data.soilMoisture}%\n- Temperature: ${data.temperature || \"Not provided\"}°C\n- Humidity: ${data.humidity || \"Not provided\"}%\n- Rainfall: ${data.rainfall || \"Not provided\"}mm\n- Weather Notes: ${data.weatherNotes || \"None\"}\n\nPlease provide a comprehensive analysis in the following JSON format:\n{\n  \"cropHealth\": \"excellent|good|fair|poor\",\n  \"diseaseRisk\": \"low|medium|high\",\n  \"pestRisk\": \"low|medium|high\", \n  \"soilQuality\": \"excellent|good|fair|poor\",\n  \"waterNeeds\": \"low|medium|high\",\n  \"yieldPrediction\": 0.0,\n  \"confidence\": 0.0,\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"],\n  \"issues\": [\"issue1\", \"issue2\"]\n}\n\nFocus on:\n1. Crop health assessment based on environmental conditions\n2. Disease and pest risk evaluation\n3. Soil quality analysis\n4. Water requirements\n5. Yield prediction in tons per hectare\n6. Specific actionable recommendations\n7. Potential issues to address\n\nBe precise and practical in your recommendations for African smallholder farmers.\n    `.trim();\n  }\n\n  private parseAIResponse(response: string, data: any): FarmDataAnalysis {\n    try {\n      // Extract JSON from the response\n      const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error(\"No JSON found in AI response\");\n      }\n\n      const parsed = JSON.parse(jsonMatch[0]);\n\n      // Validate and normalize the response\n      return {\n        cropHealth: (this.validateEnum(parsed.cropHealth, [\n          \"excellent\",\n          \"good\",\n          \"fair\",\n          \"poor\",\n        ]) || \"fair\") as \"excellent\" | \"good\" | \"fair\" | \"poor\",\n        diseaseRisk: (this.validateEnum(parsed.diseaseRisk, [\n          \"low\",\n          \"medium\",\n          \"high\",\n        ]) || \"medium\") as \"low\" | \"medium\" | \"high\",\n        pestRisk: (this.validateEnum(parsed.pestRisk, [\n          \"low\",\n          \"medium\",\n          \"high\",\n        ]) || \"medium\") as \"low\" | \"medium\" | \"high\",\n        soilQuality: (this.validateEnum(parsed.soilQuality, [\n          \"excellent\",\n          \"good\",\n          \"fair\",\n          \"poor\",\n        ]) || \"fair\") as \"excellent\" | \"good\" | \"fair\" | \"poor\",\n        waterNeeds: (this.validateEnum(parsed.waterNeeds, [\n          \"low\",\n          \"medium\",\n          \"high\",\n        ]) || \"medium\") as \"low\" | \"medium\" | \"high\",\n        yieldPrediction: Math.max(\n          0,\n          Math.min(50, parseFloat(parsed.yieldPrediction) || 0)\n        ),\n        confidence: Math.max(\n          0,\n          Math.min(1, parseFloat(parsed.confidence) || 0.5)\n        ),\n        recommendations: Array.isArray(parsed.recommendations)\n          ? parsed.recommendations.slice(0, 5)\n          : [],\n        issues: Array.isArray(parsed.issues) ? parsed.issues.slice(0, 3) : [],\n      };\n    } catch (error) {\n      console.error(\"Error parsing AI response:\", error);\n\n      // Return default analysis if parsing fails\n      return {\n        cropHealth: \"fair\",\n        diseaseRisk: \"medium\",\n        pestRisk: \"medium\",\n        soilQuality: \"fair\",\n        waterNeeds: \"medium\",\n        yieldPrediction: 2.5,\n        confidence: 0.5,\n        recommendations: [\n          \"Monitor soil moisture levels regularly\",\n          \"Check for signs of disease or pest damage\",\n          \"Consider soil testing for better insights\",\n        ],\n        issues: [\"Limited data for comprehensive analysis\"],\n      };\n    }\n  }\n\n  private validateEnum(value: any, validValues: string[]): string | null {\n    return validValues.includes(value) ? value : null;\n  }\n\n  async generateYieldPrediction(data: {\n    cropType: string;\n    soilMoisture: number;\n    temperature?: number;\n    humidity?: number;\n    rainfall?: number;\n    weatherNotes?: string;\n    location?: string;\n    historicalData?: any[];\n  }): Promise<{\n    predictedYield: number;\n    confidence: number;\n    factors: string[];\n    recommendations: string[];\n    riskFactors: string[];\n  }> {\n    try {\n      const prompt = `\nYou are an expert agricultural AI assistant specializing in yield prediction for African smallholder farmers. Analyze the following farm data and provide a comprehensive yield prediction:\n\nCROP INFORMATION:\n- Crop Type: ${data.cropType}\n- Location: ${data.location || \"Not specified\"}\n\nENVIRONMENTAL DATA:\n- Soil Moisture: ${data.soilMoisture}%\n- Temperature: ${data.temperature || \"Not provided\"}°C\n- Humidity: ${data.humidity || \"Not provided\"}%\n- Rainfall: ${data.rainfall || \"Not provided\"}mm\n- Weather Notes: ${data.weatherNotes || \"None\"}\n\nPlease provide a comprehensive yield prediction analysis in the following JSON format:\n{\n  \"predictedYield\": 0.0,\n  \"confidence\": 0.0,\n  \"factors\": [\"factor1\", \"factor2\", \"factor3\"],\n  \"recommendations\": [\"recommendation1\", \"recommendation2\"],\n  \"riskFactors\": [\"risk1\", \"risk2\"]\n}\n\nFocus on:\n1. Realistic yield prediction in tons per hectare for ${\n        data.cropType\n      } in African conditions\n2. Confidence level based on data completeness and quality\n3. Key factors affecting yield (soil, weather, crop-specific needs)\n4. Practical recommendations for the farmer\n5. Risk factors to monitor\n\nBe specific and practical for smallholder farmers in Africa. Consider typical yields for ${\n        data.cropType\n      } in similar conditions.\n      `;\n\n      const result = await this.model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n\n      const jsonMatch = text.match(/\\{[\\s\\S]*\\}/);\n      if (jsonMatch) {\n        const parsed = JSON.parse(jsonMatch[0]);\n\n        // Validate and normalize the response\n        return {\n          predictedYield: Math.max(\n            0.5,\n            Math.min(50, parseFloat(parsed.predictedYield) || 2.5)\n          ),\n          confidence: Math.max(\n            0.1,\n            Math.min(1, parseFloat(parsed.confidence) || 0.6)\n          ),\n          factors: Array.isArray(parsed.factors)\n            ? parsed.factors.slice(0, 5)\n            : [\"Soil moisture levels\", \"Environmental conditions\"],\n          recommendations: Array.isArray(parsed.recommendations)\n            ? parsed.recommendations.slice(0, 4)\n            : [\n                \"Monitor soil moisture regularly\",\n                \"Check for pest and disease signs\",\n              ],\n          riskFactors: Array.isArray(parsed.riskFactors)\n            ? parsed.riskFactors.slice(0, 3)\n            : [\"Weather variability\", \"Pest pressure\"],\n        };\n      }\n\n      // Fallback prediction with more realistic values\n      const baseYield = this.getBaseYieldForCrop(data.cropType);\n      const moistureFactor = Math.max(\n        0.5,\n        Math.min(1.5, data.soilMoisture / 70)\n      );\n      const predictedYield = baseYield * moistureFactor;\n\n      return {\n        predictedYield: Math.round(predictedYield * 10) / 10,\n        confidence: 0.6,\n        factors: [\n          \"Soil moisture levels\",\n          \"Crop-specific requirements\",\n          \"Environmental conditions\",\n        ],\n        recommendations: [\n          \"Monitor soil moisture regularly\",\n          \"Check for signs of disease or pest damage\",\n          \"Consider soil testing for better insights\",\n        ],\n        riskFactors: [\n          \"Weather variability\",\n          \"Pest and disease pressure\",\n          \"Soil nutrient levels\",\n        ],\n      };\n    } catch (error) {\n      console.error(\"Yield prediction error:\", error);\n      return {\n        predictedYield: this.getBaseYieldForCrop(data.cropType),\n        confidence: 0.5,\n        factors: [\"Limited data available\"],\n        recommendations: [\"Gather more farm data for better predictions\"],\n        riskFactors: [\"Insufficient data for risk assessment\"],\n      };\n    }\n  }\n\n  private getBaseYieldForCrop(cropType: string): number {\n    const baseYields: { [key: string]: number } = {\n      Maize: 3.5,\n      Cocoa: 0.8,\n      Rice: 4.2,\n      Wheat: 2.8,\n      Cassava: 12.0,\n      Sorghum: 2.5,\n      Millet: 1.8,\n      Groundnut: 1.2,\n    };\n    return baseYields[cropType] || 2.5;\n  }\n}\n\nexport const geminiAI = new GeminiAIService();\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1157, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/app/api/yield-predictions/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { dbAdapter } from \"@/lib/db/adapter\";\nimport { geminiAI } from \"@/lib/gemini-ai\";\nimport {\n  getFarmDataByUserId,\n  getYieldPredictionsByUserId,\n} from \"@/lib/db/services\";\nimport { getUserByWalletAddress } from \"@/lib/db/services\";\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const walletAddress = searchParams.get(\"walletAddress\");\n\n    if (!walletAddress) {\n      return NextResponse.json(\n        { error: \"Wallet address is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Get user by wallet address\n    const user = await getUserByWalletAddress(walletAddress);\n    if (!user) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    // Get user's yield predictions\n    const predictions = await getYieldPredictionsByUserId(user.id);\n\n    return NextResponse.json({\n      success: true,\n      data: predictions.map((pred) => ({\n        id: pred.id,\n        cropType: pred.cropType,\n        predictedYield: parseFloat(pred.predictedYield),\n        riskLevel: parseFloat(pred.riskLevel),\n        confidence: parseFloat(pred.confidence),\n        modelVersion: pred.modelVersion,\n        inputData: pred.inputData,\n        createdAt: pred.createdAt,\n      })),\n    });\n  } catch (error) {\n    console.error(\"Failed to fetch yield predictions:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch yield predictions\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const {\n      walletAddress,\n      farmDataId,\n      cropType,\n      soilMoisture,\n      temperature,\n      humidity,\n      rainfall,\n      weatherNotes,\n      location,\n    } = body;\n\n    if (!walletAddress) {\n      return NextResponse.json(\n        { error: \"Wallet address is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Initialize user in database adapter\n    await dbAdapter.initializeUser(walletAddress);\n\n    let farmData = null;\n\n    // If farmDataId is provided, fetch the farm data\n    if (farmDataId) {\n      // We'll need to add this function to services\n      const user = await getUserByWalletAddress(walletAddress);\n      if (user) {\n        const allFarmData = await getFarmDataByUserId(user.id);\n        farmData = allFarmData.find((fd) => fd.id === farmDataId);\n      }\n    }\n\n    // Prepare data for Gemini AI\n    const predictionData = {\n      cropType: farmData?.cropType || cropType,\n      soilMoisture: farmData ? parseFloat(farmData.soilMoisture) : soilMoisture,\n      temperature: farmData\n        ? parseFloat(farmData.temperature || \"0\")\n        : temperature,\n      humidity: farmData ? parseFloat(farmData.humidity || \"0\") : humidity,\n      rainfall: farmData ? parseFloat(farmData.rainfall || \"0\") : rainfall,\n      weatherNotes: farmData?.weatherNotes || weatherNotes,\n      location: farmData?.location || location,\n    };\n\n    // Generate prediction using Gemini AI\n    const aiPrediction = await geminiAI.generateYieldPrediction(predictionData);\n\n    // Calculate risk level based on confidence and other factors\n    const riskLevel = Math.max(\n      0,\n      Math.min(100, (1 - aiPrediction.confidence) * 100 + Math.random() * 20)\n    );\n\n    // Store prediction in database\n    const prediction = {\n      cropType: predictionData.cropType,\n      predictedYield: aiPrediction.predictedYield,\n      riskLevel: riskLevel,\n      confidence: aiPrediction.confidence,\n      modelVersion: \"gemini-2.5-flash\",\n      inputData: {\n        farmDataId: farmDataId || null,\n        ...predictionData,\n        aiFactors: aiPrediction.factors,\n      },\n    };\n\n    const result = await dbAdapter.addYieldPrediction(prediction);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        ...result,\n        predictedYield: aiPrediction.predictedYield,\n        riskLevel: riskLevel,\n        confidence: aiPrediction.confidence,\n        factors: aiPrediction.factors,\n      },\n    });\n  } catch (error) {\n    console.error(\"Failed to generate yield prediction:\", error);\n    return NextResponse.json(\n      { error: \"Failed to generate yield prediction\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}