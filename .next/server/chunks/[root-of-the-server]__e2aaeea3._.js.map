{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/schema.ts"],"sourcesContent":["import {\n  pgTable,\n  text,\n  timestamp,\n  uuid,\n  decimal,\n  integer,\n  boolean,\n  jsonb,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  walletAddress: text(\"wallet_address\").notNull().unique(),\n  name: text(\"name\"),\n  email: text(\"email\"),\n  phone: text(\"phone\"),\n  location: text(\"location\"),\n  country: text(\"country\"),\n  cropType: text(\"crop_type\"),\n  farmSize: text(\"farm_size\"),\n  experience: text(\"experience\"),\n  additionalInfo: text(\"additional_info\"),\n  // Settings fields\n  notifications: boolean(\"notifications\").default(true),\n  darkMode: boolean(\"dark_mode\").default(false),\n  language: text(\"language\").default(\"en\"),\n  currency: text(\"currency\").default(\"USD\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Farm data entries\nexport const farmData = pgTable(\"farm_data\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  cropType: text(\"crop_type\").notNull(),\n  location: text(\"location\").notNull(),\n  soilMoisture: decimal(\"soil_moisture\", { precision: 5, scale: 2 }).notNull(),\n  weatherNotes: text(\"weather_notes\"),\n  photo: text(\"photo\"), // Base64 or URL\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  temperature: decimal(\"temperature\", { precision: 5, scale: 2 }),\n  humidity: decimal(\"humidity\", { precision: 5, scale: 2 }),\n  rainfall: decimal(\"rainfall\", { precision: 5, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Yield predictions\nexport const yieldPredictions = pgTable(\"yield_predictions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  cropType: text(\"crop_type\").notNull(),\n  predictedYield: decimal(\"predicted_yield\", {\n    precision: 8,\n    scale: 2,\n  }).notNull(),\n  riskLevel: decimal(\"risk_level\", { precision: 5, scale: 2 }).notNull(),\n  confidence: decimal(\"confidence\", { precision: 5, scale: 2 }).notNull(),\n  modelVersion: text(\"model_version\"),\n  inputData: jsonb(\"input_data\"), // Store the input data used for prediction\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Loans\nexport const loans = pgTable(\"loans\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  amount: decimal(\"amount\", { precision: 12, scale: 2 }).notNull(),\n  interestRate: decimal(\"interest_rate\", { precision: 5, scale: 2 }).notNull(),\n  status: text(\"status\", {\n    enum: [\"pending\", \"active\", \"completed\", \"defaulted\"],\n  })\n    .notNull()\n    .default(\"pending\"),\n  collateral: jsonb(\"collateral\").notNull(), // Array of token IDs\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Harvest tokens\nexport const harvestTokens = pgTable(\"harvest_tokens\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  cropType: text(\"crop_type\").notNull(),\n  amount: decimal(\"amount\", { precision: 8, scale: 2 }).notNull(),\n  tokenizedAmount: decimal(\"tokenized_amount\", {\n    precision: 12,\n    scale: 2,\n  }).notNull(),\n  status: text(\"status\", { enum: [\"pending\", \"tokenized\", \"sold\", \"burned\"] })\n    .notNull()\n    .default(\"pending\"),\n  qrCode: text(\"qr_code\").notNull(),\n  blockchainTokenId: text(\"blockchain_token_id\"),\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Badges/Achievements\nexport const badges = pgTable(\"badges\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  badgeType: text(\"badge_type\").notNull(), // 'data-contributor', 'yield-predictor', etc.\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  earned: boolean(\"earned\").notNull().default(false),\n  earnedDate: timestamp(\"earned_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Market prices (for price tracking)\nexport const marketPrices = pgTable(\"market_prices\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  cropType: text(\"crop_type\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"GHS\"),\n  source: text(\"source\").notNull(), // 'manual', 'api', 'blockchain'\n  location: text(\"location\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Supply chain tracking\nexport const supplyChainEvents = pgTable(\"supply_chain_events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  tokenId: uuid(\"token_id\")\n    .notNull()\n    .references(() => harvestTokens.id, { onDelete: \"cascade\" }),\n  eventType: text(\"event_type\").notNull(), // 'harvest', 'processing', 'transport', 'delivery'\n  description: text(\"description\").notNull(),\n  location: text(\"location\"),\n  latitude: decimal(\"latitude\", { precision: 10, scale: 8 }),\n  longitude: decimal(\"longitude\", { precision: 11, scale: 8 }),\n  metadata: jsonb(\"metadata\"), // Additional event data\n  blockchainTxHash: text(\"blockchain_tx_hash\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Define relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  farmData: many(farmData),\n  yieldPredictions: many(yieldPredictions),\n  loans: many(loans),\n  harvestTokens: many(harvestTokens),\n  badges: many(badges),\n}));\n\nexport const farmDataRelations = relations(farmData, ({ one }) => ({\n  user: one(users, {\n    fields: [farmData.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const yieldPredictionsRelations = relations(\n  yieldPredictions,\n  ({ one }) => ({\n    user: one(users, {\n      fields: [yieldPredictions.userId],\n      references: [users.id],\n    }),\n  })\n);\n\nexport const loansRelations = relations(loans, ({ one }) => ({\n  user: one(users, {\n    fields: [loans.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const harvestTokensRelations = relations(\n  harvestTokens,\n  ({ one, many }) => ({\n    user: one(users, {\n      fields: [harvestTokens.userId],\n      references: [users.id],\n    }),\n    supplyChainEvents: many(supplyChainEvents),\n  })\n);\n\nexport const badgesRelations = relations(badges, ({ one }) => ({\n  user: one(users, {\n    fields: [badges.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const supplyChainEventsRelations = relations(\n  supplyChainEvents,\n  ({ one }) => ({\n    token: one(harvestTokens, {\n      fields: [supplyChainEvents.tokenId],\n      references: [harvestTokens.id],\n    }),\n  })\n);\n\n// Export types\nexport type User = typeof users.$inferSelect;\nexport type NewUser = typeof users.$inferInsert;\nexport type FarmData = typeof farmData.$inferSelect;\nexport type NewFarmData = typeof farmData.$inferInsert;\nexport type YieldPrediction = typeof yieldPredictions.$inferSelect;\nexport type NewYieldPrediction = typeof yieldPredictions.$inferInsert;\nexport type Loan = typeof loans.$inferSelect;\nexport type NewLoan = typeof loans.$inferInsert;\nexport type HarvestToken = typeof harvestTokens.$inferSelect;\nexport type NewHarvestToken = typeof harvestTokens.$inferInsert;\nexport type Badge = typeof badges.$inferSelect;\nexport type NewBadge = typeof badges.$inferInsert;\nexport type MarketPrice = typeof marketPrices.$inferSelect;\nexport type NewMarketPrice = typeof marketPrices.$inferInsert;\nexport type SupplyChainEvent = typeof supplyChainEvents.$inferSelect;\nexport type NewSupplyChainEvent = typeof supplyChainEvents.$inferInsert;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/db/index.ts"],"sourcesContent":["import { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"./schema\";\n\n// Create the connection - only works on server side\nlet db: ReturnType<typeof drizzle>;\n\nif (typeof window === \"undefined\") {\n  // Server side - load environment variables\n  const { config } = require(\"dotenv\");\n  config({ path: \".env.local\" });\n\n  const sql = neon(process.env.DATABASE_URL!);\n  db = drizzle({ client: sql, schema });\n} else {\n  // Client side - create a mock db that throws errors\n  db = null as any;\n}\n\nexport { db };\n\n// Export schema for use in other files\nexport * from \"./schema\";\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,oDAAoD;AACpD,IAAI;AAEJ,wCAAmC;IACjC,2CAA2C;IAC3C,MAAM,EAAE,MAAM,EAAE;IAChB,OAAO;QAAE,MAAM;IAAa;IAE5B,MAAM,MAAM,IAAA,gKAAI,EAAC,QAAQ,GAAG,CAAC,YAAY;IACzC,KAAK,IAAA,qKAAO,EAAC;QAAE,QAAQ;QAAK,QAAA;IAAO;AACrC,OAAO;IACL,oDAAoD;IACpD,KAAK;AACP","debugId":null}},
    {"offset": {"line": 403, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/app/api/user/update-profile/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport { db } from \"@/lib/db\";\nimport { users } from \"@/lib/db/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { walletAddress, ...profileData } = await request.json();\n\n    if (!walletAddress) {\n      return NextResponse.json(\n        { error: \"Wallet address is required\" },\n        { status: 400 }\n      );\n    }\n\n    // Update user profile in the database\n    const result = await db\n      .update(users)\n      .set({\n        name: profileData.fullName,\n        email: profileData.email,\n        phone: profileData.phone,\n        location: profileData.location,\n        country: profileData.country,\n        cropType: profileData.cropType,\n        farmSize: profileData.farmSize,\n        experience: profileData.farmingExperience,\n        additionalInfo: profileData.additionalInfo,\n        updatedAt: new Date(),\n      })\n      .where(eq(users.walletAddress, walletAddress))\n      .returning();\n\n    if (result.length === 0) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: \"Profile updated successfully\",\n      user: result[0],\n    });\n  } catch (error) {\n    console.error(\"Error updating profile:\", error);\n    return NextResponse.json(\n      { error: \"Failed to update profile\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAE,aAAa,EAAE,GAAG,aAAa,GAAG,MAAM,QAAQ,IAAI;QAE5D,IAAI,CAAC,eAAe;YAClB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,MAAM,SAAS,MAAM,0IAAE,CACpB,MAAM,CAAC,8HAAK,EACZ,GAAG,CAAC;YACH,MAAM,YAAY,QAAQ;YAC1B,OAAO,YAAY,KAAK;YACxB,OAAO,YAAY,KAAK;YACxB,UAAU,YAAY,QAAQ;YAC9B,SAAS,YAAY,OAAO;YAC5B,UAAU,YAAY,QAAQ;YAC9B,UAAU,YAAY,QAAQ;YAC9B,YAAY,YAAY,iBAAiB;YACzC,gBAAgB,YAAY,cAAc;YAC1C,WAAW,IAAI;QACjB,GACC,KAAK,CAAC,IAAA,0KAAE,EAAC,8HAAK,CAAC,aAAa,EAAE,gBAC9B,SAAS;QAEZ,IAAI,OAAO,MAAM,KAAK,GAAG;YACvB,OAAO,gJAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,MAAM,MAAM,CAAC,EAAE;QACjB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2B,GACpC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}