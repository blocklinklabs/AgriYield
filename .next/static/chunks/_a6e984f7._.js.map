{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatCurrency(amount: number, currency = \"USD\") {\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency,\n  }).format(amount);\n}\n\nexport function safeDate(date: any): Date {\n  if (date instanceof Date) {\n    return date;\n  }\n\n  if (typeof date === \"string\" || typeof date === \"number\") {\n    const parsed = new Date(date);\n    return isNaN(parsed.getTime()) ? new Date() : parsed;\n  }\n\n  return new Date();\n}\n\nexport function formatDate(date: Date | string | number) {\n  const dateObj = safeDate(date);\n\n  return new Intl.DateTimeFormat(\"en-US\", {\n    year: \"numeric\",\n    month: \"short\",\n    day: \"numeric\",\n  }).format(dateObj);\n}\n\nexport function generateMockYieldPrediction(cropType: string): {\n  predictedYield: number;\n  riskLevel: number;\n  confidence: number;\n} {\n  const baseYield =\n    {\n      Maize: 2.5,\n      Cocoa: 1.8,\n      Rice: 3.2,\n      Wheat: 2.1,\n      Cassava: 4.5,\n    }[cropType] || 2.0;\n\n  const variation = (Math.random() - 0.5) * 0.4; // Â±20% variation\n  const predictedYield = Math.max(0.5, baseYield + variation);\n\n  const riskLevel = Math.random() * 30 + 5; // 5-35% risk\n  const confidence = Math.random() * 20 + 75; // 75-95% confidence\n\n  return {\n    predictedYield: Math.round(predictedYield * 10) / 10,\n    riskLevel: Math.round(riskLevel * 10) / 10,\n    confidence: Math.round(confidence * 10) / 10,\n  };\n}\n\nexport function calculateLoanInterest(\n  amount: number,\n  riskLevel: number\n): number {\n  const baseRate = 5.0; // 5% base rate\n  const riskAdjustment = riskLevel * 0.1; // 0.1% per risk point\n  return Math.min(15.0, baseRate + riskAdjustment); // Cap at 15%\n}\n\nexport function generateQRCodeData(tokenId: string): string {\n  return `https://agriyield.app/token/${tokenId}`;\n}\n\nexport function mockHBARReward(): number {\n  return Math.random() * 10 + 5; // 5-15 HBAR\n}\n\nexport function isOffline(): boolean {\n  return typeof navigator !== \"undefined\" && !navigator.onLine;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;;;AAEO,SAAS;IAAG,IAAA,IAAA,OAAA,UAAA,QAAA,AAAG,SAAH,UAAA,OAAA,OAAA,GAAA,OAAA,MAAA;QAAG,OAAH,QAAA,SAAA,CAAA,KAAuB;;IACxC,OAAO,IAAA,yKAAO,EAAC,IAAA,gJAAI,EAAC;AACtB;AAEO,SAAS,eAAe,MAAc;QAAE,WAAA,iEAAW;IACxD,OAAO,IAAI,KAAK,YAAY,CAAC,SAAS;QACpC,OAAO;QACP;IACF,GAAG,MAAM,CAAC;AACZ;AAEO,SAAS,SAAS,IAAS;IAChC,IAAI,gBAAgB,MAAM;QACxB,OAAO;IACT;IAEA,IAAI,OAAO,SAAS,YAAY,OAAO,SAAS,UAAU;QACxD,MAAM,SAAS,IAAI,KAAK;QACxB,OAAO,MAAM,OAAO,OAAO,MAAM,IAAI,SAAS;IAChD;IAEA,OAAO,IAAI;AACb;AAEO,SAAS,WAAW,IAA4B;IACrD,MAAM,UAAU,SAAS;IAEzB,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;QACtC,MAAM;QACN,OAAO;QACP,KAAK;IACP,GAAG,MAAM,CAAC;AACZ;AAEO,SAAS,4BAA4B,QAAgB;IAK1D,MAAM,YACJ;QACE,OAAO;QACP,OAAO;QACP,MAAM;QACN,OAAO;QACP,SAAS;IACX,CAAC,CAAC,SAAS,IAAI;IAEjB,MAAM,YAAY,CAAC,KAAK,MAAM,KAAK,GAAG,IAAI,KAAK,iBAAiB;IAChE,MAAM,iBAAiB,KAAK,GAAG,CAAC,KAAK,YAAY;IAEjD,MAAM,YAAY,KAAK,MAAM,KAAK,KAAK,GAAG,aAAa;IACvD,MAAM,aAAa,KAAK,MAAM,KAAK,KAAK,IAAI,oBAAoB;IAEhE,OAAO;QACL,gBAAgB,KAAK,KAAK,CAAC,iBAAiB,MAAM;QAClD,WAAW,KAAK,KAAK,CAAC,YAAY,MAAM;QACxC,YAAY,KAAK,KAAK,CAAC,aAAa,MAAM;IAC5C;AACF;AAEO,SAAS,sBACd,MAAc,EACd,SAAiB;IAEjB,MAAM,WAAW,KAAK,eAAe;IACrC,MAAM,iBAAiB,YAAY,KAAK,sBAAsB;IAC9D,OAAO,KAAK,GAAG,CAAC,MAAM,WAAW,iBAAiB,aAAa;AACjE;AAEO,SAAS,mBAAmB,OAAe;IAChD,OAAO,AAAC,+BAAsC,OAAR;AACxC;AAEO,SAAS;IACd,OAAO,KAAK,MAAM,KAAK,KAAK,GAAG,YAAY;AAC7C;AAEO,SAAS;IACd,OAAO,OAAO,cAAc,eAAe,CAAC,UAAU,MAAM;AAC9D","debugId":null}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/hybrid-store.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\nexport interface WalletState {\n  accountId: string | null;\n  isConnected: boolean;\n  connect: (accountId: string) => void;\n  disconnect: () => void;\n}\n\nexport interface FarmData {\n  id: string;\n  cropType: string;\n  location: string;\n  soilMoisture: number;\n  weatherNotes: string;\n  photo?: string;\n  timestamp: Date;\n}\n\nexport interface YieldPrediction {\n  cropType: string;\n  predictedYield: number;\n  riskLevel: number;\n  confidence: number;\n  timestamp: Date;\n}\n\nexport interface Loan {\n  id: string;\n  amount: number;\n  interestRate: number;\n  status: \"active\" | \"pending\" | \"completed\";\n  collateral: string[];\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface HarvestToken {\n  id: string;\n  cropType: string;\n  amount: number;\n  tokenizedAmount: number;\n  status: \"pending\" | \"tokenized\" | \"sold\";\n  qrCode: string;\n}\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  earned: boolean;\n  earnedDate?: Date;\n}\n\nexport interface AppState {\n  // Wallet\n  wallet: WalletState;\n\n  // Farm Data\n  farmData: FarmData[];\n  addFarmData: (data: Omit<FarmData, \"id\" | \"timestamp\">) => Promise<void>;\n\n  // Yield Predictions\n  yieldPredictions: YieldPrediction[];\n  addYieldPrediction: (\n    prediction: Omit<YieldPrediction, \"timestamp\">\n  ) => Promise<void>;\n\n  // Loans\n  loans: Loan[];\n  addLoan: (loan: Omit<Loan, \"id\">) => Promise<void>;\n  updateLoanStatus: (loanId: string, status: Loan[\"status\"]) => Promise<void>;\n\n  // Harvest Tokens\n  harvestTokens: HarvestToken[];\n  addHarvestToken: (\n    token: Omit<HarvestToken, \"id\" | \"qrCode\">\n  ) => Promise<void>;\n  updateTokenStatus: (\n    tokenId: string,\n    status: HarvestToken[\"status\"]\n  ) => Promise<void>;\n\n  // Badges\n  badges: Badge[];\n  earnBadge: (badgeId: string) => Promise<void>;\n\n  // Offline\n  isOnline: boolean;\n  setOnlineStatus: (status: boolean) => void;\n\n  // Database sync\n  syncWithDatabase: () => Promise<void>;\n  isDatabaseConnected: boolean;\n}\n\nexport const useHybridStore = create<AppState>()(\n  persist(\n    (set, get) => ({\n      // Wallet\n      wallet: {\n        accountId: null,\n        isConnected: false,\n        connect: async (accountId: string) => {\n          set((state) => ({\n            wallet: { ...state.wallet, accountId, isConnected: true },\n          }));\n\n          // Initialize user in database\n          try {\n            await fetch(\"/api/user/initialize\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ walletAddress: accountId }),\n            });\n            await get().syncWithDatabase();\n          } catch (error) {\n            console.error(\"Failed to sync with database:\", error);\n          }\n        },\n        disconnect: () =>\n          set((state) => ({\n            wallet: { ...state.wallet, accountId: null, isConnected: false },\n          })),\n      },\n\n      // Farm Data\n      farmData: [],\n      addFarmData: async (data) => {\n        const newData = {\n          ...data,\n          id: crypto.randomUUID(),\n          timestamp: new Date(),\n        };\n\n        set((state) => ({\n          farmData: [...state.farmData, newData],\n        }));\n\n        // Save to database\n        try {\n          await fetch(\"/api/farm-data\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(data),\n          });\n        } catch (error) {\n          console.error(\"Failed to save farm data to database:\", error);\n        }\n      },\n\n      // Yield Predictions\n      yieldPredictions: [],\n      addYieldPrediction: async (prediction) => {\n        const newPrediction = {\n          ...prediction,\n          timestamp: new Date(),\n        };\n\n        set((state) => ({\n          yieldPredictions: [...state.yieldPredictions, newPrediction],\n        }));\n\n        // Save to database\n        try {\n          await fetch(\"/api/yield-predictions\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(prediction),\n          });\n        } catch (error) {\n          console.error(\"Failed to save yield prediction to database:\", error);\n        }\n      },\n\n      // Loans\n      loans: [],\n      addLoan: async (loan) => {\n        const newLoan = {\n          ...loan,\n          id: crypto.randomUUID(),\n        };\n\n        set((state) => ({\n          loans: [...state.loans, newLoan],\n        }));\n\n        // Save to database\n        try {\n          await fetch(\"/api/loans\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(loan),\n          });\n        } catch (error) {\n          console.error(\"Failed to save loan to database:\", error);\n        }\n      },\n      updateLoanStatus: async (loanId, status) => {\n        set((state) => ({\n          loans: state.loans.map((loan) =>\n            loan.id === loanId ? { ...loan, status } : loan\n          ),\n        }));\n\n        // Update in database\n        try {\n          // Database update would go here\n        } catch (error) {\n          console.error(\"Failed to update loan status in database:\", error);\n        }\n      },\n\n      // Harvest Tokens\n      harvestTokens: [],\n      addHarvestToken: async (token) => {\n        const newToken = {\n          ...token,\n          id: crypto.randomUUID(),\n          qrCode: `https://agriyield.app/token/${crypto.randomUUID()}`,\n        };\n\n        set((state) => ({\n          harvestTokens: [...state.harvestTokens, newToken],\n        }));\n\n        // Save to database\n        try {\n          await fetch(\"/api/harvest-tokens\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(token),\n          });\n        } catch (error) {\n          console.error(\"Failed to save harvest token to database:\", error);\n        }\n      },\n      updateTokenStatus: async (tokenId, status) => {\n        set((state) => ({\n          harvestTokens: state.harvestTokens.map((token) =>\n            token.id === tokenId ? { ...token, status } : token\n          ),\n        }));\n\n        // Update in database\n        try {\n          // Database update would go here\n        } catch (error) {\n          console.error(\"Failed to update token status in database:\", error);\n        }\n      },\n\n      // Badges\n      badges: [\n        {\n          id: \"data-contributor\",\n          name: \"Data Contributor\",\n          description: \"Submit 3+ farm data entries\",\n          earned: false,\n        },\n        {\n          id: \"yield-predictor\",\n          name: \"Yield Predictor\",\n          description: \"Get your first yield prediction\",\n          earned: false,\n        },\n        {\n          id: \"token-holder\",\n          name: \"Token Holder\",\n          description: \"Tokenize your first harvest\",\n          earned: false,\n        },\n        {\n          id: \"loan-borrower\",\n          name: \"Loan Borrower\",\n          description: \"Take your first loan\",\n          earned: false,\n        },\n      ],\n      earnBadge: async (badgeId) => {\n        const badge = get().badges.find((b) => b.id === badgeId);\n        if (!badge) return;\n\n        set((state) => ({\n          badges: state.badges.map((badge) =>\n            badge.id === badgeId\n              ? { ...badge, earned: true, earnedDate: new Date() }\n              : badge\n          ),\n        }));\n\n        // Save to database\n        try {\n          await fetch(\"/api/badges\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              badgeId,\n              name: badge.name,\n              description: badge.description,\n            }),\n          });\n        } catch (error) {\n          console.error(\"Failed to save badge to database:\", error);\n        }\n      },\n\n      // Offline\n      isOnline: true,\n      setOnlineStatus: (status) => set({ isOnline: status }),\n\n      // Database sync\n      isDatabaseConnected: false,\n      syncWithDatabase: async () => {\n        try {\n          const response = await fetch(\"/api/user/data\");\n          const userData = await response.json();\n          set({\n            farmData: userData.farmData,\n            yieldPredictions: userData.yieldPredictions,\n            loans: userData.loans,\n            harvestTokens: userData.harvestTokens,\n            badges: userData.badges,\n            isDatabaseConnected: true,\n          });\n        } catch (error) {\n          console.error(\"Failed to sync with database:\", error);\n          set({ isDatabaseConnected: false });\n        }\n      },\n    }),\n    {\n      name: \"agriyield-hybrid-storage\",\n      partialize: (state) => ({\n        wallet: state.wallet,\n        farmData: state.farmData,\n        yieldPredictions: state.yieldPredictions,\n        loans: state.loans,\n        harvestTokens: state.harvestTokens,\n        badges: state.badges,\n        isDatabaseConnected: state.isDatabaseConnected,\n      }),\n    }\n  )\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 376, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/store.ts"],"sourcesContent":["import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nimport { safeDate } from \"./utils\";\n\n// Re-export the hybrid store as the main store\nexport { useHybridStore as useAppStore } from \"./hybrid-store\";\n\nexport interface WalletState {\n  accountId: string | null;\n  isConnected: boolean;\n  connect: (accountId: string) => void;\n  disconnect: () => void;\n}\n\nexport interface FarmData {\n  id: string;\n  cropType: string;\n  location: string;\n  soilMoisture: number;\n  weatherNotes: string;\n  photo?: string;\n  timestamp: Date;\n}\n\nexport interface YieldPrediction {\n  cropType: string;\n  predictedYield: number;\n  riskLevel: number;\n  confidence: number;\n  timestamp: Date;\n}\n\nexport interface Loan {\n  id: string;\n  amount: number;\n  interestRate: number;\n  status: \"active\" | \"pending\" | \"completed\";\n  collateral: string[];\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface HarvestToken {\n  id: string;\n  cropType: string;\n  amount: number;\n  tokenizedAmount: number;\n  status: \"pending\" | \"tokenized\" | \"sold\";\n  qrCode: string;\n}\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  earned: boolean;\n  earnedDate?: Date;\n}\n\nexport interface AppState {\n  // Wallet\n  wallet: WalletState;\n\n  // Farm Data\n  farmData: FarmData[];\n  addFarmData: (data: Omit<FarmData, \"id\" | \"timestamp\">) => void;\n\n  // Yield Predictions\n  yieldPredictions: YieldPrediction[];\n  addYieldPrediction: (prediction: Omit<YieldPrediction, \"timestamp\">) => void;\n\n  // Loans\n  loans: Loan[];\n  addLoan: (loan: Omit<Loan, \"id\">) => void;\n  updateLoanStatus: (loanId: string, status: Loan[\"status\"]) => void;\n\n  // Harvest Tokens\n  harvestTokens: HarvestToken[];\n  addHarvestToken: (token: Omit<HarvestToken, \"id\" | \"qrCode\">) => void;\n  updateTokenStatus: (tokenId: string, status: HarvestToken[\"status\"]) => void;\n\n  // Badges\n  badges: Badge[];\n  earnBadge: (badgeId: string) => void;\n\n  // Offline\n  isOnline: boolean;\n  setOnlineStatus: (status: boolean) => void;\n}\n\nexport const useAppStore = create<AppState>()(\n  persist(\n    (set, get) => ({\n      // Wallet\n      wallet: {\n        accountId: null,\n        isConnected: false,\n        connect: (accountId: string) =>\n          set((state) => ({\n            wallet: { ...state.wallet, accountId, isConnected: true },\n          })),\n        disconnect: () =>\n          set((state) => ({\n            wallet: { ...state.wallet, accountId: null, isConnected: false },\n          })),\n      },\n\n      // Farm Data\n      farmData: [],\n      addFarmData: (data) =>\n        set((state) => ({\n          farmData: [\n            ...state.farmData,\n            {\n              ...data,\n              id: crypto.randomUUID(),\n              timestamp: new Date(),\n            },\n          ],\n        })),\n\n      // Yield Predictions\n      yieldPredictions: [],\n      addYieldPrediction: (prediction) =>\n        set((state) => ({\n          yieldPredictions: [\n            ...state.yieldPredictions,\n            {\n              ...prediction,\n              timestamp: new Date(),\n            },\n          ],\n        })),\n\n      // Loans\n      loans: [],\n      addLoan: (loan) =>\n        set((state) => ({\n          loans: [\n            ...state.loans,\n            {\n              ...loan,\n              id: crypto.randomUUID(),\n            },\n          ],\n        })),\n      updateLoanStatus: (loanId, status) =>\n        set((state) => ({\n          loans: state.loans.map((loan) =>\n            loan.id === loanId ? { ...loan, status } : loan\n          ),\n        })),\n\n      // Harvest Tokens\n      harvestTokens: [],\n      addHarvestToken: (token) =>\n        set((state) => ({\n          harvestTokens: [\n            ...state.harvestTokens,\n            {\n              ...token,\n              id: crypto.randomUUID(),\n              qrCode: `https://agriyield.app/token/${crypto.randomUUID()}`,\n            },\n          ],\n        })),\n      updateTokenStatus: (tokenId, status) =>\n        set((state) => ({\n          harvestTokens: state.harvestTokens.map((token) =>\n            token.id === tokenId ? { ...token, status } : token\n          ),\n        })),\n\n      // Badges\n      badges: [\n        {\n          id: \"data-contributor\",\n          name: \"Data Contributor\",\n          description: \"Submit 3+ farm data entries\",\n          earned: false,\n        },\n        {\n          id: \"yield-predictor\",\n          name: \"Yield Predictor\",\n          description: \"Get your first yield prediction\",\n          earned: false,\n        },\n        {\n          id: \"token-holder\",\n          name: \"Token Holder\",\n          description: \"Tokenize your first harvest\",\n          earned: false,\n        },\n        {\n          id: \"loan-borrower\",\n          name: \"Loan Borrower\",\n          description: \"Take your first loan\",\n          earned: false,\n        },\n      ],\n      earnBadge: (badgeId) =>\n        set((state) => ({\n          badges: state.badges.map((badge) =>\n            badge.id === badgeId\n              ? { ...badge, earned: true, earnedDate: new Date() }\n              : badge\n          ),\n        })),\n\n      // Offline\n      isOnline: true, // Default to true, will be updated on client\n      setOnlineStatus: (status) => set({ isOnline: status }),\n    }),\n    {\n      name: \"agriyield-storage\",\n      partialize: (state) => ({\n        wallet: state.wallet,\n        farmData: state.farmData,\n        yieldPredictions: state.yieldPredictions,\n        loans: state.loans,\n        harvestTokens: state.harvestTokens,\n        badges: state.badges,\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state) {\n          // Convert string dates back to Date objects\n          state.farmData = state.farmData.map((data) => ({\n            ...data,\n            timestamp: safeDate(data.timestamp),\n          }));\n\n          state.yieldPredictions = state.yieldPredictions.map((pred) => ({\n            ...pred,\n            timestamp: safeDate(pred.timestamp),\n          }));\n\n          state.loans = state.loans.map((loan) => ({\n            ...loan,\n            startDate: safeDate(loan.startDate),\n            endDate: safeDate(loan.endDate),\n          }));\n\n          state.badges = state.badges.map((badge) => ({\n            ...badge,\n            earnedDate: badge.earnedDate\n              ? safeDate(badge.earnedDate)\n              : undefined,\n          }));\n        }\n      },\n    }\n  )\n);\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 552, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/lib/simulation-data.ts"],"sourcesContent":["// Simulation data for AgriYield app\n// This file contains realistic data to make the app appear fully functional\n\n// Fixed timestamps to avoid hydration issues\nconst baseDate = new Date(\"2024-09-30T10:00:00Z\");\n\nexport const simulationData = {\n  // Realistic farm data entries\n  farmData: [\n    {\n      id: \"farm-1\",\n      cropType: \"Maize\",\n      location: \"Kumasi, Ghana\",\n      soilMoisture: 78,\n      weatherNotes: \"Sunny with light clouds, optimal growing conditions\",\n      timestamp: new Date(baseDate.getTime() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n    },\n    {\n      id: \"farm-2\",\n      cropType: \"Cocoa\",\n      location: \"Takoradi, Ghana\",\n      soilMoisture: 82,\n      weatherNotes: \"Heavy rainfall, good for cocoa growth\",\n      timestamp: new Date(baseDate.getTime() - 5 * 24 * 60 * 60 * 1000), // 5 days ago\n    },\n    {\n      id: \"farm-3\",\n      cropType: \"Rice\",\n      location: \"Tamale, Ghana\",\n      soilMoisture: 85,\n      weatherNotes: \"Irrigation system working well, fields flooded\",\n      timestamp: new Date(baseDate.getTime() - 7 * 24 * 60 * 60 * 1000), // 7 days ago\n    },\n    {\n      id: \"farm-4\",\n      cropType: \"Cassava\",\n      location: \"Accra, Ghana\",\n      soilMoisture: 72,\n      weatherNotes: \"Dry season, need to increase irrigation\",\n      timestamp: new Date(baseDate.getTime() - 10 * 24 * 60 * 60 * 1000), // 10 days ago\n    },\n    {\n      id: \"farm-5\",\n      cropType: \"Wheat\",\n      location: \"Kumasi, Ghana\",\n      soilMoisture: 68,\n      weatherNotes: \"Cool weather, wheat growing well\",\n      timestamp: new Date(baseDate.getTime() - 14 * 24 * 60 * 60 * 1000), // 14 days ago\n    },\n  ],\n\n  // Realistic yield predictions\n  yieldPredictions: [\n    {\n      cropType: \"Maize\",\n      predictedYield: 4.2,\n      riskLevel: 12,\n      confidence: 89,\n      timestamp: new Date(baseDate.getTime() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n    },\n    {\n      cropType: \"Cocoa\",\n      predictedYield: 2.8,\n      riskLevel: 18,\n      confidence: 85,\n      timestamp: new Date(baseDate.getTime() - 3 * 24 * 60 * 60 * 1000), // 3 days ago\n    },\n    {\n      cropType: \"Rice\",\n      predictedYield: 3.5,\n      riskLevel: 8,\n      confidence: 92,\n      timestamp: new Date(baseDate.getTime() - 6 * 24 * 60 * 60 * 1000), // 6 days ago\n    },\n  ],\n\n  // Realistic loans\n  loans: [\n    {\n      id: \"loan-1\",\n      amount: 1500,\n      interestRate: 6.5,\n      status: \"active\" as const,\n      collateral: [\"Maize harvest tokens\"],\n      startDate: new Date(baseDate.getTime() - 30 * 24 * 60 * 60 * 1000), // 30 days ago\n      endDate: new Date(baseDate.getTime() + 150 * 24 * 60 * 60 * 1000), // 150 days from now\n    },\n  ],\n\n  // Realistic harvest tokens\n  harvestTokens: [\n    {\n      id: \"token-1\",\n      cropType: \"Maize\",\n      amount: 4.2,\n      tokenizedAmount: 42,\n      status: \"tokenized\" as const,\n      qrCode: \"https://agriyield.app/token/maize-001\",\n    },\n    {\n      id: \"token-2\",\n      cropType: \"Cocoa\",\n      amount: 2.8,\n      tokenizedAmount: 28,\n      status: \"tokenized\" as const,\n      qrCode: \"https://agriyield.app/token/cocoa-001\",\n    },\n    {\n      id: \"token-3\",\n      cropType: \"Rice\",\n      amount: 3.5,\n      tokenizedAmount: 35,\n      status: \"pending\" as const,\n      qrCode: \"https://agriyield.app/token/rice-001\",\n    },\n  ],\n\n  // Realistic badges (some earned)\n  badges: [\n    {\n      id: \"data-contributor\",\n      name: \"Data Contributor\",\n      description: \"Submit 3+ farm data entries\",\n      earned: true,\n      earnedDate: new Date(baseDate.getTime() - 5 * 24 * 60 * 60 * 1000),\n    },\n    {\n      id: \"yield-predictor\",\n      name: \"Yield Predictor\",\n      description: \"Get your first yield prediction\",\n      earned: true,\n      earnedDate: new Date(baseDate.getTime() - 2 * 24 * 60 * 60 * 1000),\n    },\n    {\n      id: \"token-holder\",\n      name: \"Token Holder\",\n      description: \"Tokenize your first harvest\",\n      earned: true,\n      earnedDate: new Date(baseDate.getTime() - 1 * 24 * 60 * 60 * 1000),\n    },\n    {\n      id: \"loan-borrower\",\n      name: \"Loan Borrower\",\n      description: \"Take your first loan\",\n      earned: true,\n      earnedDate: new Date(baseDate.getTime() - 30 * 24 * 60 * 60 * 1000),\n    },\n  ],\n\n  // Additional realistic data for enhanced simulation\n  marketData: {\n    currentPrices: {\n      Maize: 450, // GHS per ton\n      Cocoa: 1200, // GHS per ton\n      Rice: 380, // GHS per ton\n      Wheat: 520, // GHS per ton\n      Cassava: 280, // GHS per ton\n    },\n    priceChanges: {\n      Maize: 5.2, // % change\n      Cocoa: -2.1, // % change\n      Rice: 3.8, // % change\n      Wheat: 1.5, // % change\n      Cassava: 4.3, // % change\n    },\n  },\n\n  // Weather data for realistic simulation\n  weatherData: {\n    current: {\n      temperature: 28,\n      humidity: 75,\n      rainfall: 12,\n      windSpeed: 8,\n      condition: \"Partly Cloudy\",\n    },\n    forecast: [\n      {\n        day: \"Today\",\n        high: 30,\n        low: 24,\n        condition: \"Sunny\",\n        rainfall: 0,\n      },\n      {\n        day: \"Tomorrow\",\n        high: 29,\n        low: 23,\n        condition: \"Partly Cloudy\",\n        rainfall: 5,\n      },\n      {\n        day: \"Day 3\",\n        high: 27,\n        low: 22,\n        condition: \"Rainy\",\n        rainfall: 15,\n      },\n    ],\n  },\n\n  // User profile data\n  userProfile: {\n    name: \"Kwame Asante\",\n    location: \"Kumasi, Ghana\",\n    farmSize: \"5.2 hectares\",\n    experience: \"8 years\",\n    crops: [\"Maize\", \"Cocoa\", \"Rice\", \"Cassava\"],\n    rating: 4.7,\n    totalHarvest: 156.8, // tons\n    totalEarnings: 45230, // GHS\n  },\n\n  // Analytics data for charts\n  analyticsData: {\n    monthlyHarvest: [\n      { month: \"Jan\", yield: 12.5, revenue: 5625 },\n      { month: \"Feb\", yield: 15.2, revenue: 6840 },\n      { month: \"Mar\", yield: 18.8, revenue: 8460 },\n      { month: \"Apr\", yield: 22.1, revenue: 9945 },\n      { month: \"May\", yield: 19.5, revenue: 8775 },\n      { month: \"Jun\", yield: 16.3, revenue: 7335 },\n    ],\n    cropDistribution: [\n      { crop: \"Maize\", percentage: 35, color: \"#10b981\" },\n      { crop: \"Cocoa\", percentage: 25, color: \"#f59e0b\" },\n      { crop: \"Rice\", percentage: 20, color: \"#3b82f6\" },\n      { crop: \"Cassava\", percentage: 15, color: \"#8b5cf6\" },\n      { crop: \"Wheat\", percentage: 5, color: \"#ef4444\" },\n    ],\n    riskAnalysis: {\n      low: 2,\n      medium: 1,\n      high: 0,\n    },\n  },\n\n  // Recent activities for timeline\n  recentActivities: [\n    {\n      id: \"activity-1\",\n      type: \"harvest\",\n      description: \"Harvested 4.2 tons of Maize\",\n      timestamp: new Date(baseDate.getTime() - 2 * 60 * 60 * 1000), // 2 hours ago\n      icon: \"ð¾\",\n    },\n    {\n      id: \"activity-2\",\n      type: \"prediction\",\n      description: \"Received yield prediction for Cocoa\",\n      timestamp: new Date(baseDate.getTime() - 4 * 60 * 60 * 1000), // 4 hours ago\n      icon: \"ð\",\n    },\n    {\n      id: \"activity-3\",\n      type: \"loan\",\n      description: \"Loan payment of GHS 150 processed\",\n      timestamp: new Date(baseDate.getTime() - 1 * 24 * 60 * 60 * 1000), // 1 day ago\n      icon: \"ð°\",\n    },\n    {\n      id: \"activity-4\",\n      type: \"token\",\n      description: \"Tokenized 2.8 tons of Cocoa\",\n      timestamp: new Date(baseDate.getTime() - 2 * 24 * 60 * 60 * 1000), // 2 days ago\n      icon: \"ðª\",\n    },\n  ],\n};\n\n// Helper function to generate realistic mock data\nexport const generateMockData = () => {\n  const cropTypes = [\"Maize\", \"Cocoa\", \"Rice\", \"Wheat\", \"Cassava\"];\n  const locations = [\"Kumasi\", \"Accra\", \"Tamale\", \"Takoradi\", \"Cape Coast\"];\n\n  return {\n    cropType: cropTypes[Math.floor(Math.random() * cropTypes.length)],\n    location: locations[Math.floor(Math.random() * locations.length)],\n    soilMoisture: Math.floor(Math.random() * 30) + 60, // 60-90%\n    weatherNotes: [\n      \"Optimal growing conditions\",\n      \"Heavy rainfall, good for growth\",\n      \"Sunny weather, need irrigation\",\n      \"Cloudy with light rain\",\n      \"Hot and dry, increase watering\",\n    ][Math.floor(Math.random() * 5)],\n  };\n};\n\n// Market price simulation\nexport const simulateMarketPrices = () => {\n  const basePrices = {\n    Maize: 450,\n    Cocoa: 1200,\n    Rice: 380,\n    Wheat: 520,\n    Cassava: 280,\n  };\n\n  return Object.entries(basePrices).map(([crop, price]) => ({\n    crop,\n    price: price + (Math.random() - 0.5) * 50, // Â±25 GHS variation\n    change: (Math.random() - 0.5) * 10, // Â±5% change\n  }));\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 921, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/SimulationProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useAppStore } from \"@/lib/store\";\nimport { simulationData } from \"@/lib/simulation-data\";\n\ninterface SimulationProviderProps {\n  children: React.ReactNode;\n}\n\nexport default function SimulationProvider({\n  children,\n}: SimulationProviderProps) {\n  const [isClient, setIsClient] = useState(false);\n  const {\n    farmData,\n    yieldPredictions,\n    loans,\n    harvestTokens,\n    badges,\n    addFarmData,\n    addYieldPrediction,\n    addLoan,\n    addHarvestToken,\n    earnBadge,\n  } = useAppStore();\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  useEffect(() => {\n    // Only run on client and if store is empty (first time user)\n    if (!isClient || farmData.length > 0) return;\n\n    // Add farm data\n    simulationData.farmData.forEach((data) => {\n      addFarmData({\n        cropType: data.cropType,\n        location: data.location,\n        soilMoisture: data.soilMoisture,\n        weatherNotes: data.weatherNotes,\n      });\n    });\n\n    // Add yield predictions\n    simulationData.yieldPredictions.forEach((prediction) => {\n      addYieldPrediction({\n        cropType: prediction.cropType,\n        predictedYield: prediction.predictedYield,\n        riskLevel: prediction.riskLevel,\n        confidence: prediction.confidence,\n      });\n    });\n\n    // Add loans\n    simulationData.loans.forEach((loan) => {\n      addLoan({\n        amount: loan.amount,\n        interestRate: loan.interestRate,\n        status: loan.status,\n        collateral: loan.collateral,\n        startDate: loan.startDate,\n        endDate: loan.endDate,\n      });\n    });\n\n    // Add harvest tokens\n    simulationData.harvestTokens.forEach((token) => {\n      addHarvestToken({\n        cropType: token.cropType,\n        amount: token.amount,\n        tokenizedAmount: token.tokenizedAmount,\n        status: token.status,\n      });\n    });\n\n    // Earn badges\n    simulationData.badges.forEach((badge) => {\n      if (badge.earned) {\n        earnBadge(badge.id);\n      }\n    });\n  }, [\n    isClient,\n    addFarmData,\n    addYieldPrediction,\n    addLoan,\n    addHarvestToken,\n    earnBadge,\n    farmData.length,\n  ]);\n\n  return <>{children}</>;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;AACA;;;AAJA;;;;AAUe,SAAS,mBAAmB,KAEjB;QAFiB,EACzC,QAAQ,EACgB,GAFiB;;IAGzC,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yKAAQ,EAAC;IACzC,MAAM,EACJ,QAAQ,EACR,gBAAgB,EAChB,KAAK,EACL,aAAa,EACb,MAAM,EACN,WAAW,EACX,kBAAkB,EAClB,OAAO,EACP,eAAe,EACf,SAAS,EACV,GAAG,IAAA,yLAAW;IAEf,IAAA,0KAAS;wCAAC;YACR,YAAY;QACd;uCAAG,EAAE;IAEL,IAAA,0KAAS;wCAAC;YACR,6DAA6D;YAC7D,IAAI,CAAC,YAAY,SAAS,MAAM,GAAG,GAAG;YAEtC,gBAAgB;YAChB,8IAAc,CAAC,QAAQ,CAAC,OAAO;gDAAC,CAAC;oBAC/B,YAAY;wBACV,UAAU,KAAK,QAAQ;wBACvB,UAAU,KAAK,QAAQ;wBACvB,cAAc,KAAK,YAAY;wBAC/B,cAAc,KAAK,YAAY;oBACjC;gBACF;;YAEA,wBAAwB;YACxB,8IAAc,CAAC,gBAAgB,CAAC,OAAO;gDAAC,CAAC;oBACvC,mBAAmB;wBACjB,UAAU,WAAW,QAAQ;wBAC7B,gBAAgB,WAAW,cAAc;wBACzC,WAAW,WAAW,SAAS;wBAC/B,YAAY,WAAW,UAAU;oBACnC;gBACF;;YAEA,YAAY;YACZ,8IAAc,CAAC,KAAK,CAAC,OAAO;gDAAC,CAAC;oBAC5B,QAAQ;wBACN,QAAQ,KAAK,MAAM;wBACnB,cAAc,KAAK,YAAY;wBAC/B,QAAQ,KAAK,MAAM;wBACnB,YAAY,KAAK,UAAU;wBAC3B,WAAW,KAAK,SAAS;wBACzB,SAAS,KAAK,OAAO;oBACvB;gBACF;;YAEA,qBAAqB;YACrB,8IAAc,CAAC,aAAa,CAAC,OAAO;gDAAC,CAAC;oBACpC,gBAAgB;wBACd,UAAU,MAAM,QAAQ;wBACxB,QAAQ,MAAM,MAAM;wBACpB,iBAAiB,MAAM,eAAe;wBACtC,QAAQ,MAAM,MAAM;oBACtB;gBACF;;YAEA,cAAc;YACd,8IAAc,CAAC,MAAM,CAAC,OAAO;gDAAC,CAAC;oBAC7B,IAAI,MAAM,MAAM,EAAE;wBAChB,UAAU,MAAM,EAAE;oBACpB;gBACF;;QACF;uCAAG;QACD;QACA;QACA;QACA;QACA;QACA;QACA,SAAS,MAAM;KAChB;IAED,qBAAO;kBAAG;;AACZ;GApFwB;;QAelB,yLAAW;;;KAfO","debugId":null}},
    {"offset": {"line": 1033, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/DatabaseProvider.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { useAppStore } from \"@/lib/store\";\n\nexport default function DatabaseProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [isClient, setIsClient] = useState(false);\n  const { wallet, syncWithDatabase, isDatabaseConnected } = useAppStore();\n\n  useEffect(() => {\n    setIsClient(true);\n  }, []);\n\n  useEffect(() => {\n    if (!isClient || !wallet.isConnected || !wallet.accountId) return;\n\n    // Sync with database when wallet connects\n    const syncData = async () => {\n      try {\n        await syncWithDatabase();\n        console.log(\"â Database sync completed\");\n      } catch (error) {\n        console.error(\"â Database sync failed:\", error);\n      }\n    };\n\n    syncData();\n  }, [isClient, wallet.isConnected, wallet.accountId, syncWithDatabase]);\n\n  if (!isClient) {\n    return <>{children}</>;\n  }\n\n  return (\n    <>\n      {children}\n      {/* Database connection indicator */}\n      {wallet.isConnected && (\n        <div className=\"fixed bottom-4 left-4 z-50\">\n          <div\n            className={`px-3 py-1 rounded-full text-xs font-medium ${\n              isDatabaseConnected\n                ? \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\"\n                : \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\"\n            }`}\n          >\n            {isDatabaseConnected ? \"ð¢ DB Connected\" : \"ð¡ DB Offline\"}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAAA;;;AAHA;;;AAKe,SAAS,iBAAiB,KAIxC;QAJwC,EACvC,QAAQ,EAGT,GAJwC;;IAKvC,MAAM,CAAC,UAAU,YAAY,GAAG,IAAA,yKAAQ,EAAC;IACzC,MAAM,EAAE,MAAM,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,GAAG,IAAA,yLAAW;IAErE,IAAA,0KAAS;sCAAC;YACR,YAAY;QACd;qCAAG,EAAE;IAEL,IAAA,0KAAS;sCAAC;YACR,IAAI,CAAC,YAAY,CAAC,OAAO,WAAW,IAAI,CAAC,OAAO,SAAS,EAAE;YAE3D,0CAA0C;YAC1C,MAAM;uDAAW;oBACf,IAAI;wBACF,MAAM;wBACN,QAAQ,GAAG,CAAC;oBACd,EAAE,OAAO,OAAO;wBACd,QAAQ,KAAK,CAAC,2BAA2B;oBAC3C;gBACF;;YAEA;QACF;qCAAG;QAAC;QAAU,OAAO,WAAW;QAAE,OAAO,SAAS;QAAE;KAAiB;IAErE,IAAI,CAAC,UAAU;QACb,qBAAO;sBAAG;;IACZ;IAEA,qBACE;;YACG;YAEA,OAAO,WAAW,kBACjB,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC;oBACC,WAAW,AAAC,8CAIX,OAHC,sBACI,sEACA;8BAGL,sBAAsB,oBAAoB;;;;;;;;;;;;;AAMvD;GAnDwB;;QAMoC,yLAAW;;;KAN/C","debugId":null}},
    {"offset": {"line": 1119, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/ClientToaster.tsx"],"sourcesContent":["\"use client\";\n\nimport dynamic from \"next/dynamic\";\n\nconst Toaster = dynamic(\n  () =>\n    import(\"@/components/ui/sonner\").then((mod) => ({ default: mod.Toaster })),\n  {\n    ssr: false,\n    loading: () => null,\n  }\n);\n\nexport default Toaster;\n"],"names":[],"mappings":";;;;AAEA;;AAFA;;AAIA,MAAM,UAAU,IAAA,6KAAO,OACrB,IACE,0HAAiC,IAAI,CAAC,CAAC,MAAQ,CAAC;YAAE,SAAS,IAAI,OAAO;QAAC,CAAC;;;;;;IAExE,KAAK;IACL,SAAS,IAAM;;;uCAIJ","debugId":null}},
    {"offset": {"line": 1150, "column": 0}, "map": {"version":3,"sources":["file:///Users/mendsalbert/Documents/agri-yield/components/ClientOnly.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\n\ninterface ClientOnlyProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}\n\nexport default function ClientOnly({\n  children,\n  fallback = null,\n}: ClientOnlyProps) {\n  const [hasMounted, setHasMounted] = useState(false);\n\n  useEffect(() => {\n    setHasMounted(true);\n  }, []);\n\n  if (!hasMounted) {\n    return <>{fallback}</>;\n  }\n\n  return <>{children}</>;\n}\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AASe,SAAS,WAAW,KAGjB;QAHiB,EACjC,QAAQ,EACR,WAAW,IAAI,EACC,GAHiB;;IAIjC,MAAM,CAAC,YAAY,cAAc,GAAG,IAAA,yKAAQ,EAAC;IAE7C,IAAA,0KAAS;gCAAC;YACR,cAAc;QAChB;+BAAG,EAAE;IAEL,IAAI,CAAC,YAAY;QACf,qBAAO;sBAAG;;IACZ;IAEA,qBAAO;kBAAG;;AACZ;GAfwB;KAAA","debugId":null}}]
}